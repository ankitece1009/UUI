{
 "version": "5.8.4",
 "docsGenTypes": {
  "@epam/uui-core:AcceptDropParams": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "AcceptDropParams",
     "nameFull": "AcceptDropParams<TSrcData, TDstData>"
    },
    "src": "uui-core/src/types/dnd.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "AcceptDropParams<TSrcData, TDstData>",
     "print": [
      "interface AcceptDropParams<TSrcData, TDstData> {",
      "    /** Source item data. This is the srcData of the actor that is being dropped into. */",
      "    srcData: TSrcData;",
      "    /** Destination item data. This is the dstData of the actor into which the drop is performed. */",
      "    dstData?: TDstData;",
      "    offsetLeft: number;",
      "    offsetTop: number;",
      "    targetWidth: number;",
      "    targetHeight: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "srcData",
      "name": "srcData",
      "comment": {
       "raw": [
        "Source item data. This is the srcData of the actor that is being dropped into."
       ]
      },
      "typeValue": {
       "raw": "TSrcData"
      },
      "required": true
     },
     {
      "uid": "dstData",
      "name": "dstData",
      "comment": {
       "raw": [
        "Destination item data. This is the dstData of the actor into which the drop is performed."
       ]
      },
      "typeValue": {
       "raw": "TDstData"
      },
      "required": false
     },
     {
      "uid": "offsetLeft",
      "name": "offsetLeft",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": "offsetTop",
      "name": "offsetTop",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": "targetWidth",
      "name": "targetWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": "targetHeight",
      "name": "targetHeight",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:AnalyticsEvent": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "AnalyticsEvent",
     "nameFull": "AnalyticsEvent"
    },
    "src": "uui-core/src/types/objects.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "null | { [key: string]: any; name: string; }",
     "print": [
      "type AnalyticsEvent = {",
      "    /** Name of event */",
      "    name: string;",
      "    /** Any data, which will be sent with event */",
      "    [key: string]: any;",
      "} | null;"
     ]
    }
   }
  },
  "@epam/uui-core:ApiCallErrorType": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ApiCallErrorType",
     "nameFull": "ApiCallErrorType"
    },
    "src": "uui-core/src/hooks/useUuiError.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "'permissionDenied' | 'notFound' | 'serverError' | 'serviceUnavailable' | 'default'",
     "print": [
      "type ApiCallErrorType = 'permissionDenied' | 'notFound' | 'serverError' | 'serviceUnavailable' | 'default';"
     ]
    }
   }
  },
  "@epam/uui-core:ApiCallInfo": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ApiCallInfo",
     "nameFull": "ApiCallInfo"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ApiCallInfo",
     "print": [
      "interface ApiCallInfo {",
      "    /** Request URl */",
      "    url: string;",
      "    /** Name of the request received by processRequest data.operationName */",
      "    name: string;",
      "    /** Request method */",
      "    method: string;",
      "    /** Request payload */",
      "    requestData: {};",
      "    /** Request options */",
      "    options?: ApiCallOptions;",
      "    /** ApiContext request status */",
      "    status: ApiCallStatus;",
      "    /** Request http status */",
      "    httpStatus?: number;",
      "    /** Response data */",
      "    responseData?: {",
      "        /** Request error message */",
      "        errorMessage?: string;",
      "    };",
      "    /** Request error status */",
      "    errorStatus?: number;",
      "    /** Timestamp of request start */",
      "    startedAt?: Date;",
      "    /** Timestamp of request finish */",
      "    finishedAt?: Date;",
      "    /** Number of ping attempts */",
      "    attemptsCount: number;",
      "    /** Discard request error and remove it from requests queue */",
      "    dismissError(): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "url",
      "name": "url",
      "comment": {
       "raw": [
        "Request URl"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": "name",
      "name": "name",
      "comment": {
       "raw": [
        "Name of the request received by processRequest data.operationName"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": "method",
      "name": "method",
      "comment": {
       "raw": [
        "Request method"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": "requestData",
      "name": "requestData",
      "comment": {
       "raw": [
        "Request payload"
       ]
      },
      "typeValue": {
       "raw": "{}"
      },
      "required": true
     },
     {
      "uid": "options",
      "name": "options",
      "comment": {
       "raw": [
        "Request options"
       ]
      },
      "typeValue": {
       "raw": "ApiCallOptions<any>"
      },
      "required": false
     },
     {
      "uid": "status",
      "name": "status",
      "comment": {
       "raw": [
        "ApiContext request status"
       ]
      },
      "typeValue": {
       "raw": "'scheduled' | 'running' | 'error'"
      },
      "typeValueRef": "@epam/uui-core:ApiCallStatus",
      "editor": {
       "type": "oneOf",
       "options": [
        "scheduled",
        "running",
        "error"
       ]
      },
      "required": true
     },
     {
      "uid": "httpStatus",
      "name": "httpStatus",
      "comment": {
       "raw": [
        "Request http status"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "responseData",
      "name": "responseData",
      "comment": {
       "raw": [
        "Response data"
       ]
      },
      "typeValue": {
       "raw": "{ errorMessage?: string | undefined; }"
      },
      "required": false
     },
     {
      "uid": "errorStatus",
      "name": "errorStatus",
      "comment": {
       "raw": [
        "Request error status"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "startedAt",
      "name": "startedAt",
      "comment": {
       "raw": [
        "Timestamp of request start"
       ]
      },
      "typeValue": {
       "raw": "Date"
      },
      "required": false
     },
     {
      "uid": "finishedAt",
      "name": "finishedAt",
      "comment": {
       "raw": [
        "Timestamp of request finish"
       ]
      },
      "typeValue": {
       "raw": "Date"
      },
      "required": false
     },
     {
      "uid": "attemptsCount",
      "name": "attemptsCount",
      "comment": {
       "raw": [
        "Number of ping attempts"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": "dismissError",
      "name": "dismissError",
      "comment": {
       "raw": [
        "Discard request error and remove it from requests queue"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ApiCallOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ApiCallOptions",
     "nameFull": "ApiCallOptions<ResponseData>"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ApiCallOptions<ResponseData>",
     "print": [
      "interface ApiCallOptions<ResponseData = any> {",
      "    /** Native fetch method options  */",
      "    fetchOptions?: RequestInit;",
      "    /** Defines how to handle request errors:",
      "     * 'page' - displays an error splash screen.",
      "     * 'notification' - shows the error using a notification card without blocking the application.",
      "     * 'manual' - means the API context won't handle the error; you should manage it yourself.",
      "     */",
      "    errorHandling?: 'manual' | 'page' | 'notification';",
      "    /**",
      "     * By default, all responses are parsed as JSON.",
      "     * This option allows to extract response data in non-json formats.",
      "     * The callback is passed with response object, and should return a promise to result to return from the processRequest call.",
      "     * Examples:",
      "     * (res) => res.text() // parse all responses as text",
      "     * (res) => res.status === 200 ? res.json() : res.text() // parse OK response as json, and errors as text",
      "     * (res) => res.blob() // get response as Blob object",
      "     */",
      "    parseResponse?: (response: Response) => Promise<ResponseData>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "fetchOptions",
      "name": "fetchOptions",
      "comment": {
       "raw": [
        "Native fetch method options"
       ]
      },
      "typeValue": {
       "raw": "RequestInit"
      },
      "required": false
     },
     {
      "uid": "errorHandling",
      "name": "errorHandling",
      "comment": {
       "raw": [
        "Defines how to handle request errors:",
        " 'page' - displays an error splash screen.",
        " 'notification' - shows the error using a notification card without blocking the application.",
        " 'manual' - means the API context won't handle the error; you should manage it yourself."
       ]
      },
      "typeValue": {
       "raw": "'manual' | 'page' | 'notification'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "manual",
        "page",
        "notification"
       ]
      },
      "required": false
     },
     {
      "uid": "parseResponse",
      "name": "parseResponse",
      "comment": {
       "raw": [
        "By default, all responses are parsed as JSON.",
        " This option allows to extract response data in non-json formats.",
        " The callback is passed with response object, and should return a promise to result to return from the processRequest call.",
        " Examples:",
        " (res) => res.text() // parse all responses as text",
        " (res) => res.status === 200 ? res.json() : res.text() // parse OK response as json, and errors as text",
        " (res) => res.blob() // get response as Blob object"
       ]
      },
      "typeValue": {
       "raw": "(response: Response) => Promise<ResponseData>"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ApiContextProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ApiContextProps",
     "nameFull": "ApiContextProps"
    },
    "src": "uui-core/src/services/ApiContext.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ApiContextProps",
     "print": [
      "interface ApiContextProps {",
      "    /** Url to the relogin page. Used to open new browser window by this path, in case of auth lost error.",
      "     * Opened by this path page, should process authentication and then post 'authSuccess' cross-window message to the opener, to recover failed requests.",
      "     * @default '/auth/login'",
      "     * */",
      "    apiReloginPath?: string;",
      "    /** Url to the api, which ApiContext will start pinging in case of 'connection lost', until it gets 200 status. Then it will retry failed requests.",
      "     * @default '/auth/ping'",
      "     * */",
      "    apiPingPath?: string;",
      "    /** Url to the server api under which all requests will be processed. Usefully for cases, when all api located by some specific url, which is not much app url.",
      "     * @default ''",
      "     * */",
      "    apiServerUrl?: string;",
      "    /**",
      "     * Allows to replace fetch implementation, for adding auth headers, mocking for testing, etc.",
      "     * By default, standard fetch will be used.",
      "     */",
      "    fetch?: typeof fetch;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "apiReloginPath",
      "name": "apiReloginPath",
      "comment": {
       "raw": [
        "Url to the relogin page. Used to open new browser window by this path, in case of auth lost error.",
        " Opened by this path page, should process authentication and then post 'authSuccess' cross-window message to the opener, to recover failed requests.",
        " @default '/auth/login'"
       ],
       "tags": {
        "@default": "/auth/login"
       }
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "apiPingPath",
      "name": "apiPingPath",
      "comment": {
       "raw": [
        "Url to the api, which ApiContext will start pinging in case of 'connection lost', until it gets 200 status. Then it will retry failed requests.",
        " @default '/auth/ping'"
       ],
       "tags": {
        "@default": "/auth/ping"
       }
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "apiServerUrl",
      "name": "apiServerUrl",
      "comment": {
       "raw": [
        "Url to the server api under which all requests will be processed. Usefully for cases, when all api located by some specific url, which is not much app url.",
        " @default ''"
       ],
       "tags": {
        "@default": ""
       }
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "fetch",
      "name": "fetch",
      "comment": {
       "raw": [
        "Allows to replace fetch implementation, for adding auth headers, mocking for testing, etc.",
        " By default, standard fetch will be used."
       ]
      },
      "typeValue": {
       "raw": "typeof fetch"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ApiExtensions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ApiExtensions",
     "nameFull": "ApiExtensions<TApi>"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ApiExtensions<TApi>",
     "print": [
      "interface ApiExtensions<TApi> {",
      "    /** Allows to specify API options for particular request */",
      "    withOptions(options: ApiCallOptions): TApi;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "withOptions",
      "name": "withOptions",
      "comment": {
       "raw": [
        "Allows to specify API options for particular request"
       ]
      },
      "typeValue": {
       "raw": "(options: ApiCallOptions<any>) => TApi"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ApiRecoveryReason": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ApiRecoveryReason",
     "nameFull": "ApiRecoveryReason"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "null | 'auth-lost' | 'connection-lost' | 'server-overload' | 'maintenance'",
     "print": [
      "type ApiRecoveryReason = 'auth-lost' | 'connection-lost' | 'server-overload' | 'maintenance' | null;"
     ]
    }
   }
  },
  "@epam/uui-core:ApiStatus": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ApiStatus",
     "nameFull": "ApiStatus"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "'running' | 'error' | 'idle' | 'recovery'",
     "print": [
      "type ApiStatus = 'idle' | 'running' | 'error' | 'recovery';"
     ]
    }
   }
  },
  "@epam/uui-core:ArrayDataSourceProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ArrayDataSourceProps",
     "nameFull": "ArrayDataSourceProps<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/ArrayDataSource.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ArrayDataSourceProps<TItem, TId, TFilter>",
     "print": [
      "interface ArrayDataSourceProps<TItem, TId, TFilter> extends ArrayListViewProps<TItem, TId, TFilter> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "getId",
      "name": "getId",
      "comment": {
       "raw": [
        "Should return unique ID of the TItem",
        " If omitted, we assume that every TItem has and unique id in its 'id' field.",
        " @param item - record, which id should be returned.",
        " @returns item id."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "complexIds",
      "name": "complexIds",
      "comment": {
       "raw": [
        "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
        " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "getParentId",
      "name": "getParentId",
      "comment": {
       "raw": [
        "Should return ID of the Item's parent. Usually it's i => i.parentId.",
        " If specified, Data Source will build items hierarchy.",
        "",
        " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
        " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
        "   to highlight parents with selected children",
        " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
        "   We need to load parents with a separate call (if backend doesn't pre-fetch them)",
        "",
        " @param item - record, which paretnId should be returned.",
        " @returns item parentId."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId | undefined"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "rowOptions",
      "name": "rowOptions",
      "comment": {
       "raw": [
        "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
        " See DataRowOptions for more details.",
        " If options depends on the item itself, use getRowOptions.",
        " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "DataRowOptions<TItem, TId>"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "getRowOptions",
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
        " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
        " See DataRowOptions for more details.",
        " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item - record, configuration should be returned for.",
        " @param index - index of a row. It is optional and should not be expected, that it is provided on every call."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index?: number | undefined) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "isFoldedByDefault",
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "Can be specified to unfold all or some items at start.",
        " If not specified, all rows would be folded.",
        " @param item - record, folding value should be returned for.",
        " @param dataSourceState - dataSource state with current `foldAll` value. It provides the possibility to respect foldAll change, if `isFoldedByDefault` is implemented."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, state: DataSourceState<TFilter, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "cascadeSelection",
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "selectAll",
      "name": "selectAll",
      "comment": {
       "raw": [
        "Enables/disables selectAll functionality. If disabled explicitly, `selectAll`, returned from a view is null.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "showSelectedOnly",
      "name": "showSelectedOnly",
      "comment": {
       "raw": [
        "Enables returning only selected rows and loading missing selected/checked rows, if it is required/possible.",
        " If enabled, `useView` returns only selected rows from `IDataSourceView.getVisibleRows`."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "patch",
      "name": "patch",
      "comment": {
       "raw": [
        "Items, which should be added/updated/deleted from the tree."
       ]
      },
      "typeValue": {
       "raw": "IMap<TId, TItem> | IImmutableMap<TId, TItem>"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "isDeleted",
      "name": "isDeleted",
      "comment": {
       "raw": [
        "To enable deleting of the items, it is required to specify getter for deleted state."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "getNewItemPosition",
      "name": "getNewItemPosition",
      "comment": {
       "raw": [
        "Provides information about the relative position of the new item.",
        " @param item - new item, position should be got for.",
        " @returns relative position in the list of items.",
        " @default PatchOrdering.TOP"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => symbol"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "getItemTemporaryOrder",
      "name": "getItemTemporaryOrder",
      "comment": {
       "raw": [
        "Provides information about the temporary order of the new item.",
        " @param item - new item, temporary order should be got for.",
        " @returns temporary order",
        "",
        " @experimental The API of this feature can be changed in the future releases."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "fixItemBetweenSortings",
      "name": "fixItemBetweenSortings",
      "comment": {
       "raw": [
        "If enabled, items position is fixed between sorting.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "sortBy",
      "name": "sortBy",
      "comment": {
       "raw": [
        "A pure function that gets sorting value for current sorting value"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:SortConfig",
      "required": false
     },
     {
      "uid": "getSearchFields",
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "A pure function that gets search value for each item.",
        " @default (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:SearchConfig",
      "required": false
     },
     {
      "uid": "sortSearchByRelevance",
      "name": "sortSearchByRelevance",
      "comment": {
       "raw": [
        "Enables sorting of search results by relevance.",
        " - The highest priority has records, which have a full match with a search keyword.",
        " - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
        " - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
        " - And the lowest one - any other match of the search keyword.",
        "",
        " Example:",
        " - `search`: 'some'",
        " - `record string`: 'some word', `rank` = 4",
        " - `record string`: 'someone', `rank` = 3",
        " - `record string`: 'I know some guy', `rank` = 2",
        " - `record string`: 'awesome', `rank` = 1",
        "",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:SearchConfig",
      "required": false
     },
     {
      "uid": "getFilter",
      "name": "getFilter",
      "comment": {
       "raw": [
        "A pure function that returns filter callback to be applied for each item.",
        " The callback should return true, if item passed the filter."
       ]
      },
      "typeValue": {
       "raw": "(filter: TFilter) => (item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:FilterConfig",
      "required": false
     },
     {
      "uid": "items",
      "name": "items",
      "comment": {
       "raw": [
        "Data, which should be represented by a DataSource."
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:ArrayDataSourceConfig",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ArrayElement": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ArrayElement",
     "nameFull": "ArrayElement<ArrayType>"
    },
    "src": "uui-core/src/data/lenses/types.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "ArrayElement<ArrayType>",
     "print": [
      "type ArrayElement<ArrayType> = ArrayType extends (infer ElementType)[] ? ElementType : never;"
     ]
    }
   }
  },
  "@epam/uui-core:ArrayListViewProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ArrayListViewProps",
     "nameFull": "ArrayListViewProps<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/views/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ArrayListViewProps<TItem, TId, TFilter>",
     "print": [
      "interface ArrayListViewProps<TItem, TId, TFilter> extends BaseArrayListViewProps<TItem, TId, TFilter>, ArrayDataSourceConfig<TItem> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "getId",
      "name": "getId",
      "comment": {
       "raw": [
        "Should return unique ID of the TItem",
        " If omitted, we assume that every TItem has and unique id in its 'id' field.",
        " @param item - record, which id should be returned.",
        " @returns item id."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "complexIds",
      "name": "complexIds",
      "comment": {
       "raw": [
        "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
        " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "getParentId",
      "name": "getParentId",
      "comment": {
       "raw": [
        "Should return ID of the Item's parent. Usually it's i => i.parentId.",
        " If specified, Data Source will build items hierarchy.",
        "",
        " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
        " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
        "   to highlight parents with selected children",
        " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
        "   We need to load parents with a separate call (if backend doesn't pre-fetch them)",
        "",
        " @param item - record, which paretnId should be returned.",
        " @returns item parentId."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId | undefined"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "rowOptions",
      "name": "rowOptions",
      "comment": {
       "raw": [
        "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
        " See DataRowOptions for more details.",
        " If options depends on the item itself, use getRowOptions.",
        " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "DataRowOptions<TItem, TId>"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "getRowOptions",
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
        " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
        " See DataRowOptions for more details.",
        " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item - record, configuration should be returned for.",
        " @param index - index of a row. It is optional and should not be expected, that it is provided on every call."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index?: number | undefined) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "isFoldedByDefault",
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "Can be specified to unfold all or some items at start.",
        " If not specified, all rows would be folded.",
        " @param item - record, folding value should be returned for.",
        " @param dataSourceState - dataSource state with current `foldAll` value. It provides the possibility to respect foldAll change, if `isFoldedByDefault` is implemented."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, state: DataSourceState<TFilter, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "cascadeSelection",
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "selectAll",
      "name": "selectAll",
      "comment": {
       "raw": [
        "Enables/disables selectAll functionality. If disabled explicitly, `selectAll`, returned from a view is null.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "showSelectedOnly",
      "name": "showSelectedOnly",
      "comment": {
       "raw": [
        "Enables returning only selected rows and loading missing selected/checked rows, if it is required/possible.",
        " If enabled, `useView` returns only selected rows from `IDataSourceView.getVisibleRows`."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "patch",
      "name": "patch",
      "comment": {
       "raw": [
        "Items, which should be added/updated/deleted from the tree."
       ]
      },
      "typeValue": {
       "raw": "IMap<TId, TItem> | IImmutableMap<TId, TItem>"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "isDeleted",
      "name": "isDeleted",
      "comment": {
       "raw": [
        "To enable deleting of the items, it is required to specify getter for deleted state."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "getNewItemPosition",
      "name": "getNewItemPosition",
      "comment": {
       "raw": [
        "Provides information about the relative position of the new item.",
        " @param item - new item, position should be got for.",
        " @returns relative position in the list of items.",
        " @default PatchOrdering.TOP"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => symbol"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "getItemTemporaryOrder",
      "name": "getItemTemporaryOrder",
      "comment": {
       "raw": [
        "Provides information about the temporary order of the new item.",
        " @param item - new item, temporary order should be got for.",
        " @returns temporary order",
        "",
        " @experimental The API of this feature can be changed in the future releases."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "fixItemBetweenSortings",
      "name": "fixItemBetweenSortings",
      "comment": {
       "raw": [
        "If enabled, items position is fixed between sorting.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "sortBy",
      "name": "sortBy",
      "comment": {
       "raw": [
        "A pure function that gets sorting value for current sorting value"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:SortConfig",
      "required": false
     },
     {
      "uid": "getSearchFields",
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "A pure function that gets search value for each item.",
        " @default (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:SearchConfig",
      "required": false
     },
     {
      "uid": "sortSearchByRelevance",
      "name": "sortSearchByRelevance",
      "comment": {
       "raw": [
        "Enables sorting of search results by relevance.",
        " - The highest priority has records, which have a full match with a search keyword.",
        " - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
        " - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
        " - And the lowest one - any other match of the search keyword.",
        "",
        " Example:",
        " - `search`: 'some'",
        " - `record string`: 'some word', `rank` = 4",
        " - `record string`: 'someone', `rank` = 3",
        " - `record string`: 'I know some guy', `rank` = 2",
        " - `record string`: 'awesome', `rank` = 1",
        "",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:SearchConfig",
      "required": false
     },
     {
      "uid": "getFilter",
      "name": "getFilter",
      "comment": {
       "raw": [
        "A pure function that returns filter callback to be applied for each item.",
        " The callback should return true, if item passed the filter."
       ]
      },
      "typeValue": {
       "raw": "(filter: TFilter) => (item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:FilterConfig",
      "required": false
     },
     {
      "uid": "items",
      "name": "items",
      "comment": {
       "raw": [
        "Data, which should be represented by a DataSource."
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:ArrayDataSourceConfig",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ArrayPickerProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ArrayPickerProps",
     "nameFull": "ArrayPickerProps<TId, TItem>"
    },
    "src": "uui-core/src/types/pickers.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "{ selectionMode: 'multi'; valueType?: 'id' | undefined; emptyValue?: [] | null | undefined; } & IEditable<TId[]> | { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]>",
     "print": [
      "type ArrayPickerProps<TId, TItem> = ({",
      "    /** If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected */",
      "    selectionMode: 'multi';",
      "    /** Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem) */",
      "    valueType?: 'id';",
      "    /** Defines what to use as an empty value. If other value provided, it will be assumed as selection */",
      "    emptyValue?: [",
      "    ] | null;",
      "} & IEditable<TId[]>) | ({",
      "    /** If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected */",
      "    selectionMode: 'multi';",
      "    /** Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem) */",
      "    valueType: 'entity';",
      "    /** Defines what to use as an empty value. If other value provided, it will be assumed as selection */",
      "    emptyValue?: [",
      "    ] | null;",
      "} & IEditable<TItem[]>);"
     ]
    },
    "props": [
     {
      "uid": "selectionMode",
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "required": true
     },
     {
      "uid": "valueType",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "required": false
     },
     {
      "uid": "emptyValue",
      "name": "emptyValue",
      "comment": {
       "raw": [
        "Defines what to use as an empty value. If other value provided, it will be assumed as selection"
       ]
      },
      "typeValue": {
       "raw": "null | []"
      },
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "valueType_2",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "required": true
     },
     {
      "uid": "value_2",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_2",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-core:AsyncDataSourceProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "AsyncDataSourceProps",
     "nameFull": "AsyncDataSourceProps<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/AsyncDataSource.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "AsyncDataSourceProps<TItem, TId, TFilter>",
     "print": [
      "interface AsyncDataSourceProps<TItem, TId, TFilter> extends AsyncListViewProps<TItem, TId, TFilter> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "getId",
      "name": "getId",
      "comment": {
       "raw": [
        "Should return unique ID of the TItem",
        " If omitted, we assume that every TItem has and unique id in its 'id' field.",
        " @param item - record, which id should be returned.",
        " @returns item id."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "complexIds",
      "name": "complexIds",
      "comment": {
       "raw": [
        "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
        " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "getParentId",
      "name": "getParentId",
      "comment": {
       "raw": [
        "Should return ID of the Item's parent. Usually it's i => i.parentId.",
        " If specified, Data Source will build items hierarchy.",
        "",
        " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
        " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
        "   to highlight parents with selected children",
        " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
        "   We need to load parents with a separate call (if backend doesn't pre-fetch them)",
        "",
        " @param item - record, which paretnId should be returned.",
        " @returns item parentId."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId | undefined"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "rowOptions",
      "name": "rowOptions",
      "comment": {
       "raw": [
        "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
        " See DataRowOptions for more details.",
        " If options depends on the item itself, use getRowOptions.",
        " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "DataRowOptions<TItem, TId>"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "getRowOptions",
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
        " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
        " See DataRowOptions for more details.",
        " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item - record, configuration should be returned for.",
        " @param index - index of a row. It is optional and should not be expected, that it is provided on every call."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index?: number | undefined) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "isFoldedByDefault",
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "Can be specified to unfold all or some items at start.",
        " If not specified, all rows would be folded.",
        " @param item - record, folding value should be returned for.",
        " @param dataSourceState - dataSource state with current `foldAll` value. It provides the possibility to respect foldAll change, if `isFoldedByDefault` is implemented."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, state: DataSourceState<TFilter, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "cascadeSelection",
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "selectAll",
      "name": "selectAll",
      "comment": {
       "raw": [
        "Enables/disables selectAll functionality. If disabled explicitly, `selectAll`, returned from a view is null.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "showSelectedOnly",
      "name": "showSelectedOnly",
      "comment": {
       "raw": [
        "Enables returning only selected rows and loading missing selected/checked rows, if it is required/possible.",
        " If enabled, `useView` returns only selected rows from `IDataSourceView.getVisibleRows`."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "patch",
      "name": "patch",
      "comment": {
       "raw": [
        "Items, which should be added/updated/deleted from the tree."
       ]
      },
      "typeValue": {
       "raw": "IMap<TId, TItem> | IImmutableMap<TId, TItem>"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "isDeleted",
      "name": "isDeleted",
      "comment": {
       "raw": [
        "To enable deleting of the items, it is required to specify getter for deleted state."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "getNewItemPosition",
      "name": "getNewItemPosition",
      "comment": {
       "raw": [
        "Provides information about the relative position of the new item.",
        " @param item - new item, position should be got for.",
        " @returns relative position in the list of items.",
        " @default PatchOrdering.TOP"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => symbol"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "getItemTemporaryOrder",
      "name": "getItemTemporaryOrder",
      "comment": {
       "raw": [
        "Provides information about the temporary order of the new item.",
        " @param item - new item, temporary order should be got for.",
        " @returns temporary order",
        "",
        " @experimental The API of this feature can be changed in the future releases."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "fixItemBetweenSortings",
      "name": "fixItemBetweenSortings",
      "comment": {
       "raw": [
        "If enabled, items position is fixed between sorting.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "sortBy",
      "name": "sortBy",
      "comment": {
       "raw": [
        "A pure function that gets sorting value for current sorting value"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:SortConfig",
      "required": false
     },
     {
      "uid": "getSearchFields",
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "A pure function that gets search value for each item.",
        " @default (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:SearchConfig",
      "required": false
     },
     {
      "uid": "sortSearchByRelevance",
      "name": "sortSearchByRelevance",
      "comment": {
       "raw": [
        "Enables sorting of search results by relevance.",
        " - The highest priority has records, which have a full match with a search keyword.",
        " - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
        " - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
        " - And the lowest one - any other match of the search keyword.",
        "",
        " Example:",
        " - `search`: 'some'",
        " - `record string`: 'some word', `rank` = 4",
        " - `record string`: 'someone', `rank` = 3",
        " - `record string`: 'I know some guy', `rank` = 2",
        " - `record string`: 'awesome', `rank` = 1",
        "",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:SearchConfig",
      "required": false
     },
     {
      "uid": "getFilter",
      "name": "getFilter",
      "comment": {
       "raw": [
        "A pure function that returns filter callback to be applied for each item.",
        " The callback should return true, if item passed the filter."
       ]
      },
      "typeValue": {
       "raw": "(filter: TFilter) => (item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:FilterConfig",
      "required": false
     },
     {
      "uid": "api",
      "name": "api",
      "comment": {
       "raw": [
        "A function to retrieve the data, asynchronously. This function usually performs a REST API call.",
        " Should return the array of items, which will be processed by dataSource.",
        " This api called only once during the initialization and assumed to return the full amount of data.",
        " For lazy loading cases, use LazyDataSource"
       ]
      },
      "typeValue": {
       "raw": "() => Promise<TItem[]>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:AsyncDataSourceConfig",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:AsyncListViewProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "AsyncListViewProps",
     "nameFull": "AsyncListViewProps<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/views/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "AsyncListViewProps<TItem, TId, TFilter>",
     "print": [
      "interface AsyncListViewProps<TItem, TId, TFilter> extends BaseArrayListViewProps<TItem, TId, TFilter>, AsyncDataSourceConfig<TItem> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "getId",
      "name": "getId",
      "comment": {
       "raw": [
        "Should return unique ID of the TItem",
        " If omitted, we assume that every TItem has and unique id in its 'id' field.",
        " @param item - record, which id should be returned.",
        " @returns item id."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "complexIds",
      "name": "complexIds",
      "comment": {
       "raw": [
        "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
        " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "getParentId",
      "name": "getParentId",
      "comment": {
       "raw": [
        "Should return ID of the Item's parent. Usually it's i => i.parentId.",
        " If specified, Data Source will build items hierarchy.",
        "",
        " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
        " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
        "   to highlight parents with selected children",
        " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
        "   We need to load parents with a separate call (if backend doesn't pre-fetch them)",
        "",
        " @param item - record, which paretnId should be returned.",
        " @returns item parentId."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId | undefined"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "rowOptions",
      "name": "rowOptions",
      "comment": {
       "raw": [
        "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
        " See DataRowOptions for more details.",
        " If options depends on the item itself, use getRowOptions.",
        " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "DataRowOptions<TItem, TId>"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "getRowOptions",
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
        " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
        " See DataRowOptions for more details.",
        " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item - record, configuration should be returned for.",
        " @param index - index of a row. It is optional and should not be expected, that it is provided on every call."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index?: number | undefined) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "isFoldedByDefault",
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "Can be specified to unfold all or some items at start.",
        " If not specified, all rows would be folded.",
        " @param item - record, folding value should be returned for.",
        " @param dataSourceState - dataSource state with current `foldAll` value. It provides the possibility to respect foldAll change, if `isFoldedByDefault` is implemented."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, state: DataSourceState<TFilter, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "cascadeSelection",
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "selectAll",
      "name": "selectAll",
      "comment": {
       "raw": [
        "Enables/disables selectAll functionality. If disabled explicitly, `selectAll`, returned from a view is null.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "showSelectedOnly",
      "name": "showSelectedOnly",
      "comment": {
       "raw": [
        "Enables returning only selected rows and loading missing selected/checked rows, if it is required/possible.",
        " If enabled, `useView` returns only selected rows from `IDataSourceView.getVisibleRows`."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "patch",
      "name": "patch",
      "comment": {
       "raw": [
        "Items, which should be added/updated/deleted from the tree."
       ]
      },
      "typeValue": {
       "raw": "IMap<TId, TItem> | IImmutableMap<TId, TItem>"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "isDeleted",
      "name": "isDeleted",
      "comment": {
       "raw": [
        "To enable deleting of the items, it is required to specify getter for deleted state."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "getNewItemPosition",
      "name": "getNewItemPosition",
      "comment": {
       "raw": [
        "Provides information about the relative position of the new item.",
        " @param item - new item, position should be got for.",
        " @returns relative position in the list of items.",
        " @default PatchOrdering.TOP"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => symbol"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "getItemTemporaryOrder",
      "name": "getItemTemporaryOrder",
      "comment": {
       "raw": [
        "Provides information about the temporary order of the new item.",
        " @param item - new item, temporary order should be got for.",
        " @returns temporary order",
        "",
        " @experimental The API of this feature can be changed in the future releases."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "fixItemBetweenSortings",
      "name": "fixItemBetweenSortings",
      "comment": {
       "raw": [
        "If enabled, items position is fixed between sorting.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "sortBy",
      "name": "sortBy",
      "comment": {
       "raw": [
        "A pure function that gets sorting value for current sorting value"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:SortConfig",
      "required": false
     },
     {
      "uid": "getSearchFields",
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "A pure function that gets search value for each item.",
        " @default (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:SearchConfig",
      "required": false
     },
     {
      "uid": "sortSearchByRelevance",
      "name": "sortSearchByRelevance",
      "comment": {
       "raw": [
        "Enables sorting of search results by relevance.",
        " - The highest priority has records, which have a full match with a search keyword.",
        " - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
        " - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
        " - And the lowest one - any other match of the search keyword.",
        "",
        " Example:",
        " - `search`: 'some'",
        " - `record string`: 'some word', `rank` = 4",
        " - `record string`: 'someone', `rank` = 3",
        " - `record string`: 'I know some guy', `rank` = 2",
        " - `record string`: 'awesome', `rank` = 1",
        "",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:SearchConfig",
      "required": false
     },
     {
      "uid": "getFilter",
      "name": "getFilter",
      "comment": {
       "raw": [
        "A pure function that returns filter callback to be applied for each item.",
        " The callback should return true, if item passed the filter."
       ]
      },
      "typeValue": {
       "raw": "(filter: TFilter) => (item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:FilterConfig",
      "required": false
     },
     {
      "uid": "api",
      "name": "api",
      "comment": {
       "raw": [
        "A function to retrieve the data, asynchronously. This function usually performs a REST API call.",
        " Should return the array of items, which will be processed by dataSource.",
        " This api called only once during the initialization and assumed to return the full amount of data.",
        " For lazy loading cases, use LazyDataSource"
       ]
      },
      "typeValue": {
       "raw": "() => Promise<TItem[]>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:AsyncDataSourceConfig",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:BaseArrayListViewProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "BaseArrayListViewProps",
     "nameFull": "BaseArrayListViewProps<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/views/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "BaseArrayListViewProps<TItem, TId, TFilter>",
     "print": [
      "interface BaseArrayListViewProps<TItem, TId, TFilter> extends BaseListViewProps<TItem, TId, TFilter>, SortConfig<TItem>, SearchConfig<TItem>, FilterConfig<TItem, TFilter> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "getId",
      "name": "getId",
      "comment": {
       "raw": [
        "Should return unique ID of the TItem",
        " If omitted, we assume that every TItem has and unique id in its 'id' field.",
        " @param item - record, which id should be returned.",
        " @returns item id."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "complexIds",
      "name": "complexIds",
      "comment": {
       "raw": [
        "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
        " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "getParentId",
      "name": "getParentId",
      "comment": {
       "raw": [
        "Should return ID of the Item's parent. Usually it's i => i.parentId.",
        " If specified, Data Source will build items hierarchy.",
        "",
        " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
        " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
        "   to highlight parents with selected children",
        " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
        "   We need to load parents with a separate call (if backend doesn't pre-fetch them)",
        "",
        " @param item - record, which paretnId should be returned.",
        " @returns item parentId."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId | undefined"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "rowOptions",
      "name": "rowOptions",
      "comment": {
       "raw": [
        "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
        " See DataRowOptions for more details.",
        " If options depends on the item itself, use getRowOptions.",
        " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "DataRowOptions<TItem, TId>"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "getRowOptions",
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
        " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
        " See DataRowOptions for more details.",
        " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item - record, configuration should be returned for.",
        " @param index - index of a row. It is optional and should not be expected, that it is provided on every call."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index?: number | undefined) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "isFoldedByDefault",
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "Can be specified to unfold all or some items at start.",
        " If not specified, all rows would be folded.",
        " @param item - record, folding value should be returned for.",
        " @param dataSourceState - dataSource state with current `foldAll` value. It provides the possibility to respect foldAll change, if `isFoldedByDefault` is implemented."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, state: DataSourceState<TFilter, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "cascadeSelection",
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "selectAll",
      "name": "selectAll",
      "comment": {
       "raw": [
        "Enables/disables selectAll functionality. If disabled explicitly, `selectAll`, returned from a view is null.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "showSelectedOnly",
      "name": "showSelectedOnly",
      "comment": {
       "raw": [
        "Enables returning only selected rows and loading missing selected/checked rows, if it is required/possible.",
        " If enabled, `useView` returns only selected rows from `IDataSourceView.getVisibleRows`."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "patch",
      "name": "patch",
      "comment": {
       "raw": [
        "Items, which should be added/updated/deleted from the tree."
       ]
      },
      "typeValue": {
       "raw": "IMap<TId, TItem> | IImmutableMap<TId, TItem>"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "isDeleted",
      "name": "isDeleted",
      "comment": {
       "raw": [
        "To enable deleting of the items, it is required to specify getter for deleted state."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "getNewItemPosition",
      "name": "getNewItemPosition",
      "comment": {
       "raw": [
        "Provides information about the relative position of the new item.",
        " @param item - new item, position should be got for.",
        " @returns relative position in the list of items.",
        " @default PatchOrdering.TOP"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => symbol"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "getItemTemporaryOrder",
      "name": "getItemTemporaryOrder",
      "comment": {
       "raw": [
        "Provides information about the temporary order of the new item.",
        " @param item - new item, temporary order should be got for.",
        " @returns temporary order",
        "",
        " @experimental The API of this feature can be changed in the future releases."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "fixItemBetweenSortings",
      "name": "fixItemBetweenSortings",
      "comment": {
       "raw": [
        "If enabled, items position is fixed between sorting.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "sortBy",
      "name": "sortBy",
      "comment": {
       "raw": [
        "A pure function that gets sorting value for current sorting value"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:SortConfig",
      "required": false
     },
     {
      "uid": "getSearchFields",
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "A pure function that gets search value for each item.",
        " @default (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:SearchConfig",
      "required": false
     },
     {
      "uid": "sortSearchByRelevance",
      "name": "sortSearchByRelevance",
      "comment": {
       "raw": [
        "Enables sorting of search results by relevance.",
        " - The highest priority has records, which have a full match with a search keyword.",
        " - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
        " - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
        " - And the lowest one - any other match of the search keyword.",
        "",
        " Example:",
        " - `search`: 'some'",
        " - `record string`: 'some word', `rank` = 4",
        " - `record string`: 'someone', `rank` = 3",
        " - `record string`: 'I know some guy', `rank` = 2",
        " - `record string`: 'awesome', `rank` = 1",
        "",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:SearchConfig",
      "required": false
     },
     {
      "uid": "getFilter",
      "name": "getFilter",
      "comment": {
       "raw": [
        "A pure function that returns filter callback to be applied for each item.",
        " The callback should return true, if item passed the filter."
       ]
      },
      "typeValue": {
       "raw": "(filter: TFilter) => (item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:FilterConfig",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:BaseDataSourceConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "BaseDataSourceConfig",
     "nameFull": "BaseDataSourceConfig<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "BaseDataSourceConfig<TItem, TId, TFilter>",
     "print": [
      "interface BaseDataSourceConfig<TItem, TId, TFilter = any> extends PatchOptions<TItem, TId> {",
      "    /**",
      "     * Should return unique ID of the TItem",
      "     * If omitted, we assume that every TItem has and unique id in its 'id' field.",
      "     * @param item - record, which id should be returned.",
      "     * @returns item id.",
      "     */",
      "    getId?(item: TItem): TId;",
      "    /**",
      "     * Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
      "     * In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys.",
      "     */",
      "    complexIds?: boolean;",
      "    /** Should return ID of the Item's parent. Usually it's i => i.parentId.",
      "     * If specified, Data Source will build items hierarchy.",
      "     *",
      "     * Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
      "     * - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
      "     *   to highlight parents with selected children",
      "     * - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
      "     *   We need to load parents with a separate call (if backend doesn't pre-fetch them)",
      "     *",
      "     * @param item - record, which paretnId should be returned.",
      "     * @returns item parentId.",
      "     */",
      "    getParentId?(item: TItem): TId | undefined;",
      "    /**",
      "     * Specifies if rows are selectable, checkable, draggable, clickable, and more.",
      "     * See DataRowOptions for more details.",
      "     * If options depends on the item itself, use getRowOptions.",
      "     * Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
      "     * Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      "     * @param item An item to get options for",
      "     */",
      "    rowOptions?: DataRowOptions<TItem, TId>;",
      "    /**",
      "     * For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
      "     * To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
      "     * See DataRowOptions for more details.",
      "     * If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
      "     * Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
      "     * @param item - record, configuration should be returned for.",
      "     * @param index - index of a row. It is optional and should not be expected, that it is provided on every call.",
      "     */",
      "    getRowOptions?(item: TItem, index?: number): DataRowOptions<TItem, TId>;",
      "    /**",
      "     * Can be specified to unfold all or some items at start.",
      "     * If not specified, all rows would be folded.",
      "     * @param item - record, folding value should be returned for.",
      "     * @param dataSourceState - dataSource state with current `foldAll` value. It provides the possibility to respect foldAll change, if `isFoldedByDefault` is implemented.",
      "     */",
      "    isFoldedByDefault?(item: TItem, state: DataSourceState<TFilter, TId>): boolean;",
      "    /**",
      "     * Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      "     * - false: All nodes are selected independently (default).",
      "     * - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      "     * - 'implicit': Selecting a parent node means that all children are considered checked.",
      "     *   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "     *   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "     *   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "     *   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked.",
      "     */",
      "    cascadeSelection?: CascadeSelection;",
      "    /**",
      "     * Enables/disables selectAll functionality. If disabled explicitly, `selectAll`, returned from a view is null.",
      "     * @default true",
      "     */",
      "    selectAll?: true | false;",
      "    /**",
      "     * Enables returning only selected rows and loading missing selected/checked rows, if it is required/possible.",
      "     * If enabled, `useView` returns only selected rows from `IDataSourceView.getVisibleRows`.",
      "     */",
      "    showSelectedOnly?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "getId",
      "name": "getId",
      "comment": {
       "raw": [
        "Should return unique ID of the TItem",
        " If omitted, we assume that every TItem has and unique id in its 'id' field.",
        " @param item - record, which id should be returned.",
        " @returns item id."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "complexIds",
      "name": "complexIds",
      "comment": {
       "raw": [
        "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
        " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "getParentId",
      "name": "getParentId",
      "comment": {
       "raw": [
        "Should return ID of the Item's parent. Usually it's i => i.parentId.",
        " If specified, Data Source will build items hierarchy.",
        "",
        " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
        " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
        "   to highlight parents with selected children",
        " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
        "   We need to load parents with a separate call (if backend doesn't pre-fetch them)",
        "",
        " @param item - record, which paretnId should be returned.",
        " @returns item parentId."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId | undefined"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "rowOptions",
      "name": "rowOptions",
      "comment": {
       "raw": [
        "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
        " See DataRowOptions for more details.",
        " If options depends on the item itself, use getRowOptions.",
        " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "DataRowOptions<TItem, TId>"
      },
      "required": false
     },
     {
      "uid": "getRowOptions",
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
        " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
        " See DataRowOptions for more details.",
        " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item - record, configuration should be returned for.",
        " @param index - index of a row. It is optional and should not be expected, that it is provided on every call."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index?: number | undefined) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "isFoldedByDefault",
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "Can be specified to unfold all or some items at start.",
        " If not specified, all rows would be folded.",
        " @param item - record, folding value should be returned for.",
        " @param dataSourceState - dataSource state with current `foldAll` value. It provides the possibility to respect foldAll change, if `isFoldedByDefault` is implemented."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, state: DataSourceState<TFilter, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "cascadeSelection",
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "required": false
     },
     {
      "uid": "selectAll",
      "name": "selectAll",
      "comment": {
       "raw": [
        "Enables/disables selectAll functionality. If disabled explicitly, `selectAll`, returned from a view is null.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "showSelectedOnly",
      "name": "showSelectedOnly",
      "comment": {
       "raw": [
        "Enables returning only selected rows and loading missing selected/checked rows, if it is required/possible.",
        " If enabled, `useView` returns only selected rows from `IDataSourceView.getVisibleRows`."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "patch",
      "name": "patch",
      "comment": {
       "raw": [
        "Items, which should be added/updated/deleted from the tree."
       ]
      },
      "typeValue": {
       "raw": "IMap<TId, TItem> | IImmutableMap<TId, TItem>"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "isDeleted",
      "name": "isDeleted",
      "comment": {
       "raw": [
        "To enable deleting of the items, it is required to specify getter for deleted state."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "getNewItemPosition",
      "name": "getNewItemPosition",
      "comment": {
       "raw": [
        "Provides information about the relative position of the new item.",
        " @param item - new item, position should be got for.",
        " @returns relative position in the list of items.",
        " @default PatchOrdering.TOP"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => symbol"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "getItemTemporaryOrder",
      "name": "getItemTemporaryOrder",
      "comment": {
       "raw": [
        "Provides information about the temporary order of the new item.",
        " @param item - new item, temporary order should be got for.",
        " @returns temporary order",
        "",
        " @experimental The API of this feature can be changed in the future releases."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "fixItemBetweenSortings",
      "name": "fixItemBetweenSortings",
      "comment": {
       "raw": [
        "If enabled, items position is fixed between sorting.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "sortBy",
      "name": "sortBy",
      "comment": {
       "raw": [
        "A pure function that gets sorting value for current sorting value"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:SortConfig",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:BaseListViewProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "BaseListViewProps",
     "nameFull": "BaseListViewProps<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "BaseListViewProps<TItem, TId, TFilter>",
     "print": [
      "interface BaseListViewProps<TItem, TId, TFilter> extends BaseDataSourceConfig<TItem, TId, TFilter> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "getId",
      "name": "getId",
      "comment": {
       "raw": [
        "Should return unique ID of the TItem",
        " If omitted, we assume that every TItem has and unique id in its 'id' field.",
        " @param item - record, which id should be returned.",
        " @returns item id."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "complexIds",
      "name": "complexIds",
      "comment": {
       "raw": [
        "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
        " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "getParentId",
      "name": "getParentId",
      "comment": {
       "raw": [
        "Should return ID of the Item's parent. Usually it's i => i.parentId.",
        " If specified, Data Source will build items hierarchy.",
        "",
        " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
        " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
        "   to highlight parents with selected children",
        " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
        "   We need to load parents with a separate call (if backend doesn't pre-fetch them)",
        "",
        " @param item - record, which paretnId should be returned.",
        " @returns item parentId."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId | undefined"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "rowOptions",
      "name": "rowOptions",
      "comment": {
       "raw": [
        "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
        " See DataRowOptions for more details.",
        " If options depends on the item itself, use getRowOptions.",
        " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "DataRowOptions<TItem, TId>"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "getRowOptions",
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
        " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
        " See DataRowOptions for more details.",
        " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item - record, configuration should be returned for.",
        " @param index - index of a row. It is optional and should not be expected, that it is provided on every call."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index?: number | undefined) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "isFoldedByDefault",
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "Can be specified to unfold all or some items at start.",
        " If not specified, all rows would be folded.",
        " @param item - record, folding value should be returned for.",
        " @param dataSourceState - dataSource state with current `foldAll` value. It provides the possibility to respect foldAll change, if `isFoldedByDefault` is implemented."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, state: DataSourceState<TFilter, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "cascadeSelection",
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "selectAll",
      "name": "selectAll",
      "comment": {
       "raw": [
        "Enables/disables selectAll functionality. If disabled explicitly, `selectAll`, returned from a view is null.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "showSelectedOnly",
      "name": "showSelectedOnly",
      "comment": {
       "raw": [
        "Enables returning only selected rows and loading missing selected/checked rows, if it is required/possible.",
        " If enabled, `useView` returns only selected rows from `IDataSourceView.getVisibleRows`."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "patch",
      "name": "patch",
      "comment": {
       "raw": [
        "Items, which should be added/updated/deleted from the tree."
       ]
      },
      "typeValue": {
       "raw": "IMap<TId, TItem> | IImmutableMap<TId, TItem>"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "isDeleted",
      "name": "isDeleted",
      "comment": {
       "raw": [
        "To enable deleting of the items, it is required to specify getter for deleted state."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "getNewItemPosition",
      "name": "getNewItemPosition",
      "comment": {
       "raw": [
        "Provides information about the relative position of the new item.",
        " @param item - new item, position should be got for.",
        " @returns relative position in the list of items.",
        " @default PatchOrdering.TOP"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => symbol"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "getItemTemporaryOrder",
      "name": "getItemTemporaryOrder",
      "comment": {
       "raw": [
        "Provides information about the temporary order of the new item.",
        " @param item - new item, temporary order should be got for.",
        " @returns temporary order",
        "",
        " @experimental The API of this feature can be changed in the future releases."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "fixItemBetweenSortings",
      "name": "fixItemBetweenSortings",
      "comment": {
       "raw": [
        "If enabled, items position is fixed between sorting.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "sortBy",
      "name": "sortBy",
      "comment": {
       "raw": [
        "A pure function that gets sorting value for current sorting value"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:SortConfig",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:BlockTypes": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "BlockTypes",
     "nameFull": "BlockTypes"
    },
    "src": "uui-core/src/services/ApiContext.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "'attachment' | 'iframe' | 'image'",
     "print": [
      "type BlockTypes = 'attachment' | 'iframe' | 'image';"
     ]
    }
   }
  },
  "@epam/uui-core:CascadeSelection": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "CascadeSelection",
     "nameFull": "CascadeSelection"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "boolean | 'implicit' | 'explicit'",
     "print": [
      "type CascadeSelection = boolean | typeof CascadeSelectionTypes.EXPLICIT | typeof CascadeSelectionTypes.IMPLICIT;"
     ]
    }
   }
  },
  "@epam/uui-core:CascadeSelectionService": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "CascadeSelectionService",
     "nameFull": "CascadeSelectionService<TItem, TId>"
    },
    "src": "uui-core/src/data/processing/views/dataRows/services/useCascadeSelectionService.ts",
    "comment": {
     "raw": [
      "A service which provides cascade selection functionality with loading missing records."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "CascadeSelectionService<TItem, TId>",
     "print": [
      "/**",
      " * A service which provides cascade selection functionality with loading missing records.",
      " */",
      "interface CascadeSelectionService<TItem, TId> {",
      "    /**",
      "     * Provides a cascade selection functionality.",
      "     * @param isChecked - checking state of the item.",
      "     * @param checkedId - ID of the item to be checked. If `undefined` - root is checked.",
      "     * @param isRoot - marks if cascade selection should be performed on all the items.",
      "     * @param checked - current state of checked items.",
      "     * @returns new checked items.",
      "     */",
      "    getCompleteTreeForCascadeSelection: (id: TId, isChecked: boolean, isRoot: boolean) => Promise<ITree<TItem, TId>>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "getCompleteTreeForCascadeSelection",
      "name": "getCompleteTreeForCascadeSelection",
      "comment": {
       "raw": [
        "Provides a cascade selection functionality.",
        " @param isChecked - checking state of the item.",
        " @param checkedId - ID of the item to be checked. If `undefined` - root is checked.",
        " @param isRoot - marks if cascade selection should be performed on all the items.",
        " @param checked - current state of checked items.",
        " @returns new checked items."
       ]
      },
      "typeValue": {
       "raw": "(id: TId, isChecked: boolean, isRoot: boolean) => Promise<ITree<TItem, TId>>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:CheckboxCoreProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "CheckboxCoreProps",
     "nameFull": "CheckboxCoreProps"
    },
    "src": "uui-core/src/types/components/Checkbox.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "CheckboxCoreProps",
     "print": [
      "interface CheckboxCoreProps extends ICheckable, ICanFocus<HTMLInputElement>, IHasCX, ICanBeInvalid, IHasLabel, ICanBeReadonly, IAnalyticableOnChange<boolean>, IHasRawProps<React.LabelHTMLAttributes<HTMLLabelElement>> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "indeterminate",
      "name": "indeterminate",
      "comment": {
       "raw": [
        "Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICheckable",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "label",
      "name": "label",
      "comment": {
       "raw": [
        "Component label. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in labels."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasLabel",
      "required": false
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean | null, oldValue: boolean | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.LabelHTMLAttributes<HTMLLabelElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ClassValue": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ClassValue",
     "nameFull": "ClassValue"
    },
    "src": "uui-core/src/helpers/cx.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "undefined | null | string | number | boolean | ClassDictionary | ClassArray",
     "print": [
      "/* The ClassValue type is a union type that represents the valid values that can be passed as arguments to the classnames function. It can be one of the following types:",
      "- string: A string representing a class name.",
      "- number: A number representing a class name. This is useful when using CSS modules.",
      "- ClassDictionary: An object whose keys are class names and values are booleans. If the value is true, the corresponding class name will be included in the resulting string, otherwise it will be omitted.",
      "- ClassArray: An array of values of type ClassValue. This allows you to pass multiple class names or class dictionaries as arguments to classnames.",
      "- undefined: If undefined is passed as an argument, it will be ignored.",
      "- null: If null is passed as an argument, it will be ignored.",
      "- boolean: If a boolean value is passed as an argument, it will be ignored if it is false and included if it is true. */",
      "type ClassValue = string | number | ClassDictionary | ClassArray | undefined | null | boolean;"
     ]
    }
   }
  },
  "@epam/uui-core:ColumnsConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ColumnsConfig",
     "nameFull": "ColumnsConfig"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "ColumnsConfig",
     "print": [
      "type ColumnsConfig = {",
      "    /** Config for each column */",
      "    [key: string]: IColumnConfig;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "[key: string]",
      "name": "[key: string]",
      "comment": {
       "raw": [
        "Config for each column"
       ]
      },
      "typeValue": {
       "raw": "IColumnConfig"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:CommonContexts": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "CommonContexts",
     "nameFull": "CommonContexts<TApi, TAppContext>"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "CommonContexts<TApi, TAppContext>",
     "print": [
      "interface CommonContexts<TApi, TAppContext> extends UuiContexts {",
      "    /** Api definitions */",
      "    api: TApi & ApiExtensions<TApi>;",
      "    /** App context, any app global settings. */",
      "    uuiApp: TAppContext;",
      "    /** React router history instance */",
      "    history?: IHistory4;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "api",
      "name": "api",
      "comment": {
       "raw": [
        "Api definitions"
       ]
      },
      "typeValue": {
       "raw": "TApi & ApiExtensions<TApi>"
      },
      "required": true
     },
     {
      "uid": "uuiApp",
      "name": "uuiApp",
      "comment": {
       "raw": [
        "App context, any app global settings."
       ]
      },
      "typeValue": {
       "raw": "TAppContext"
      },
      "required": true
     },
     {
      "uid": "history",
      "name": "history",
      "comment": {
       "raw": [
        "React router history instance"
       ]
      },
      "typeValue": {
       "raw": "IHistory4"
      },
      "required": false
     },
     {
      "uid": "uuiApi",
      "name": "uuiApi",
      "comment": {
       "raw": [
        "Api service allows you to process requests with an error handling.",
        " See more here - https://uui.epam.com/documents?id=apiContext&category=contexts"
       ]
      },
      "typeValue": {
       "raw": "IApiContext"
      },
      "from": "@epam/uui-core:UuiContexts",
      "required": true
     },
     {
      "uid": "uuiRouter",
      "name": "uuiRouter",
      "comment": {
       "raw": [
        "Instance of react-router wrapped by UUI adapter"
       ]
      },
      "typeValue": {
       "raw": "IRouterContext"
      },
      "from": "@epam/uui-core:UuiContexts",
      "required": true
     },
     {
      "uid": "uuiModals",
      "name": "uuiModals",
      "comment": {
       "raw": [
        "Modals service allows you to show modal windows over the main content.",
        " See more here - https://uui.epam.com/documents?id=modalContext&category=contexts"
       ]
      },
      "typeValue": {
       "raw": "IModalContext"
      },
      "from": "@epam/uui-core:UuiContexts",
      "required": true
     },
     {
      "uid": "uuiDnD",
      "name": "uuiDnD",
      "comment": {
       "raw": [
        "Drag and Drop service for dnd operations.",
        " See more here - https://uui.epam.com/documents?id=dragAndDrop"
       ]
      },
      "typeValue": {
       "raw": "IDndContext"
      },
      "from": "@epam/uui-core:UuiContexts",
      "required": true
     },
     {
      "uid": "uuiUserSettings",
      "name": "uuiUserSettings",
      "comment": {
       "raw": [
        "UserSettings service allows you to store user data in localStorage."
       ]
      },
      "typeValue": {
       "raw": "IUserSettingsContext"
      },
      "from": "@epam/uui-core:UuiContexts",
      "required": true
     },
     {
      "uid": "uuiAnalytics",
      "name": "uuiAnalytics",
      "comment": {
       "raw": [
        "Web analytics service allows you to send user interaction events to the analytics systems.",
        " See more here - https://uui.epam.com/documents?id=analyticsContext&category=contexts"
       ]
      },
      "typeValue": {
       "raw": "IAnalyticsContext"
      },
      "from": "@epam/uui-core:UuiContexts",
      "required": true
     },
     {
      "uid": "uuiErrors",
      "name": "uuiErrors",
      "comment": {
       "raw": [
        "Error service allows you to report errors.",
        " See more here - https://uui.epam.com/documents?id=apiContext&category=contexts"
       ]
      },
      "typeValue": {
       "raw": "IErrorContext"
      },
      "from": "@epam/uui-core:UuiContexts",
      "required": true
     },
     {
      "uid": "uuiNotifications",
      "name": "uuiNotifications",
      "comment": {
       "raw": [
        "Notifications service allows you to show notifications over the main content.",
        " See more here - https://uui.epam.com/documents?id=notificationContextDoc&category=contexts"
       ]
      },
      "typeValue": {
       "raw": "INotificationContext"
      },
      "from": "@epam/uui-core:UuiContexts",
      "required": true
     },
     {
      "uid": "uuiLayout",
      "name": "uuiLayout",
      "comment": {
       "raw": [
        "Layout service. Used to manage layout for overlays like modals, dropdowns, etc."
       ]
      },
      "typeValue": {
       "raw": "ILayoutContext"
      },
      "from": "@epam/uui-core:UuiContexts",
      "required": true
     },
     {
      "uid": "uuiLocks",
      "name": "uuiLocks",
      "comment": {
       "raw": [
        "Lock service.",
        " See more here - https://uui.epam.com/documents?id=lockContextDoc&category=contexts"
       ]
      },
      "typeValue": {
       "raw": "ILockContext"
      },
      "from": "@epam/uui-core:UuiContexts",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:CommonDatePickerProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "CommonDatePickerProps",
     "nameFull": "CommonDatePickerProps"
    },
    "src": "uui-core/src/types/components/DatePicker.ts",
    "comment": {
     "raw": [
      "Represents CommonDatePickerProps"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "CommonDatePickerProps",
     "print": [
      "/**",
      " * Represents CommonDatePickerProps",
      "*/",
      "interface CommonDatePickerProps extends IDisableable, ICanBeReadonly {",
      "    /**",
      "     * HTML ID attribute for the toggler input",
      "     */",
      "    id?: string;",
      "    /**",
      "     * Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)",
      "     */",
      "    format?: string;",
      "    /**",
      "     * Filter selectable days. Days, for which this callback returns false - will be disabled",
      "     */",
      "    filter?(day: Dayjs): boolean;",
      "    /**",
      "     * Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach DatePicker to other components, e.g. Buttons",
      "     */",
      "    renderTarget?(props: IDropdownToggler): ReactNode;",
      "    /**",
      "     * Disable clearing date value (e.g. via cross icon)",
      "     */",
      "    disableClear?: boolean;",
      "    /**",
      "     * Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)",
      "     */",
      "    placement?: Placement;",
      "    /**",
      "     * If this function returns true, the day will be highlighted as holiday",
      "     */",
      "    isHoliday?: (day: Dayjs) => boolean;",
      "    /**",
      "     * CSS class(es) to put on datepicker input",
      "     */",
      "    inputCx?: CX;",
      "    /**",
      "     * CSS class(es) to put on datepicker body",
      "     */",
      "    bodyCx?: CX;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID attribute for the toggler input"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "format",
      "name": "format",
      "comment": {
       "raw": [
        "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "comment": {
       "raw": [
        "Filter selectable days. Days, for which this callback returns false - will be disabled"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "renderTarget",
      "name": "renderTarget",
      "comment": {
       "raw": [
        "Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach DatePicker to other components, e.g. Buttons"
       ]
      },
      "typeValue": {
       "raw": "(props: IDropdownToggler) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "disableClear",
      "name": "disableClear",
      "comment": {
       "raw": [
        "Disable clearing date value (e.g. via cross icon)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "placement",
      "name": "placement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'right' | 'left' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "right",
        "left",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "required": false
     },
     {
      "uid": "isHoliday",
      "name": "isHoliday",
      "comment": {
       "raw": [
        "If this function returns true, the day will be highlighted as holiday"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "inputCx",
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on datepicker input"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "required": false
     },
     {
      "uid": "bodyCx",
      "name": "bodyCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on datepicker body"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ContextProviderProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ContextProviderProps",
     "nameFull": "ContextProviderProps<TApi, TAppContext>"
    },
    "src": "uui-core/src/services/ContextProvider.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ContextProviderProps<TApi, TAppContext>",
     "print": [
      "interface ContextProviderProps<TApi, TAppContext> extends UuiServicesProps<TApi>, IHasChildren {",
      "    /** Callback to load the AppContext data. AppContext is used to load global data, before application mount */",
      "    loadAppContext?: (api: TApi) => Promise<TAppContext>;",
      "    /** Called when all contexts were initiated */",
      "    onInitCompleted(svc: CommonContexts<TApi, TAppContext>): void;",
      "    /** Instance of react-router history.",
      "     * Note, that it should be the same object which you passed to the Router.",
      "     * */",
      "    history?: IHistory4;",
      "    /** Code of Google Analytics.",
      "     * If provided, user interactions events will be sent to your GA.",
      "     * */",
      "    gaCode?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "loadAppContext",
      "name": "loadAppContext",
      "comment": {
       "raw": [
        "Callback to load the AppContext data. AppContext is used to load global data, before application mount"
       ]
      },
      "typeValue": {
       "raw": "(api: TApi) => Promise<TAppContext>"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "onInitCompleted",
      "name": "onInitCompleted",
      "comment": {
       "raw": [
        "Called when all contexts were initiated"
       ]
      },
      "typeValue": {
       "raw": "(svc: CommonContexts<TApi, TAppContext>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "history",
      "name": "history",
      "comment": {
       "raw": [
        "Instance of react-router history.",
        " Note, that it should be the same object which you passed to the Router."
       ]
      },
      "typeValue": {
       "raw": "IHistory4"
      },
      "required": false
     },
     {
      "uid": "gaCode",
      "name": "gaCode",
      "comment": {
       "raw": [
        "Code of Google Analytics.",
        " If provided, user interactions events will be sent to your GA."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "apiDefinition",
      "name": "apiDefinition",
      "comment": {
       "raw": [
        "Function to get the api definitions.",
        " Usually, api definitions this is an object which contain object with all api requests of the app.",
        " Then you can call this requests via 'uuiContext.api.myApi(myData)'"
       ]
      },
      "typeValue": {
       "raw": "(processRequest: IProcessRequest) => TApi"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:UuiServicesProps",
      "required": false
     },
     {
      "uid": "apiReloginPath",
      "name": "apiReloginPath",
      "comment": {
       "raw": [
        "Url to the relogin page. Used to open new browser window by this path, in case of auth lost error.",
        " Opened by this path page, should process authentication and then post 'authSuccess' cross-window message to the opener, to recover failed requests.",
        " @default '/auth/login'"
       ],
       "tags": {
        "@default": "/auth/login"
       }
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     },
     {
      "uid": "apiPingPath",
      "name": "apiPingPath",
      "comment": {
       "raw": [
        "Url to the api, which ApiContext will start pinging in case of 'connection lost', until it gets 200 status. Then it will retry failed requests.",
        " @default '/auth/ping'"
       ],
       "tags": {
        "@default": "/auth/ping"
       }
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     },
     {
      "uid": "apiServerUrl",
      "name": "apiServerUrl",
      "comment": {
       "raw": [
        "Url to the server api under which all requests will be processed. Usefully for cases, when all api located by some specific url, which is not much app url.",
        " @default ''"
       ],
       "tags": {
        "@default": ""
       }
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     },
     {
      "uid": "fetch",
      "name": "fetch",
      "comment": {
       "raw": [
        "Allows to replace fetch implementation, for adding auth headers, mocking for testing, etc.",
        " By default, standard fetch will be used."
       ]
      },
      "typeValue": {
       "raw": "typeof fetch"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:CX": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "CX",
     "nameFull": "CX"
    },
    "src": "uui-core/src/types/objects.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "undefined | null | string | number | boolean | ClassDictionary | ClassArray",
     "print": [
      "// CX type is a union type that represents the valid values to pass CSS classes",
      "type CX = ClassValue;"
     ]
    }
   }
  },
  "@epam/uui-core:DataColumnProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataColumnProps",
     "nameFull": "DataColumnProps<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataColumnProps<TItem, TId, TFilter>",
     "print": [
      "interface DataColumnProps<TItem = any, TId = any, TFilter = any> extends ICanBeFixed, IHasCX, IClickable, IHasRawProps<HTMLDivElement>, Attributes {",
      "    /**",
      "     * Unique key to identify the column. Used to reference columns, e.g. in ColumnsConfig.",
      "     * Also, used as React key for cells, header cells, and other components inside tables.",
      "     */",
      "    key: string;",
      "    /** Column caption. Can be a plain text, or any React Component */",
      "    caption?: React.ReactNode;",
      "    /**",
      "     * The width of the column. Usually, columns has exact this width.",
      "     * When all columns fit, and there's spare horizontal space, you can use 'grow' prop to use this space for certain columns.",
      "     * DataTable's columns can't shrink below width - table will add horizontal scrolling instead of shrinking columns",
      "     */",
      "    width: number;",
      "    /** Minimal width to which column can be resized manually */",
      "    minWidth?: number;",
      "    /** The flex grow for the column. Allows column to grow in width if there's spare horizontal space */",
      "    grow?: number;",
      "    /** Aligns cell and header content horizontally */",
      "    textAlign?: 'left' | 'center' | 'right';",
      "    /** Aligns only cell content horizontally */",
      "    justifyContent?: CSS.JustifyContentProperty;",
      "    /** Align cell content vertically */",
      "    alignSelf?: CSS.AlignSelfProperty;",
      "    /**",
      "     * Enables sorting arrows on the column.",
      "     * Sorting state is kept in DataSourceState.sorting",
      "     */",
      "    isSortable?: boolean;",
      "    /** Makes this column locked, which means that you can't hide, unpin or reorder this column. Usually applicable for such column without which table because useless.",
      "     * Note, that isAlwaysVisible column should be always fixed to any side of the table, if you didn't specify `column.fix` prop for such column, 'left' value will be used by default.",
      "     * Also, if you have a few isAlwaysVisible columns, it's necessary to place it together in the start or end(depends on `fix` prop) of columns array.",
      "     * */",
      "    isAlwaysVisible?: boolean;",
      "    /** Makes column hidden by default. User can turn it on later, via ColumnsConfiguration */",
      "    isHiddenByDefault?: boolean;",
      "    /** Info tooltip displayed in the table header */",
      "    info?: React.ReactNode;",
      "    /**",
      "     * Should return true, if current filter affects the column.",
      "     * Usually, this prop is filled automatically by the useTableState hook.",
      "     * If you use the useTableState hook, you don't need to specify it manually.",
      "     */",
      "    isFilterActive?: (filter: TFilter, column: DataColumnProps<TItem, TId, TFilter>) => boolean;",
      "    /** A pure function that defines that column value can be copied to the other column. */",
      "    canCopy?: (cell: DataTableSelectedCellData<TItem, TId, TFilter>) => boolean;",
      "    /** A pure function that defines that column accepts copying other column value into it */",
      "    canAcceptCopy?: (from: DataTableSelectedCellData<TItem, TId, TFilter>, to: DataTableSelectedCellData<TItem, TId, TFilter>) => boolean;",
      "    /** Pass true, to enable column resizing. By default, will be used global 'allowColumnsResizing' value from DataTable component.  */",
      "    allowResizing?: boolean;",
      "    /** Render the cell content. The item props is the value of the whole row (TItem). */",
      "    render?(item: TItem, props: DataRowProps<TItem, TId>): any;",
      "    /** Overrides rendering of the whole cell */",
      "    renderCell?(cellProps: RenderCellProps<TItem, TId>): any;",
      "    /**",
      "     * Overrides rendering of the whole header cell.",
      "     */",
      "    renderHeaderCell?(cellProps: DataTableHeaderCellProps<TItem, TId>): any;",
      "    /**",
      "     *  Render callback for column header dropdown.",
      "     * Usually, this prop is filled automatically by the useTableState hook.",
      "     * If you use the useTableState hook, you don't need to specify it manually.",
      "     */",
      "    renderDropdown?(): React.ReactNode;",
      "    /**",
      "     *  Render callback for column filter.",
      "     * If you use useTableState hook, and you specify filter for the column, default filter will be rendered automatically.",
      "     * You can use this prop to render a custom filter component.",
      "     */",
      "    renderFilter?(lens: ILens<TFilter>, dropdownProps: IDropdownBodyProps): React.ReactNode;",
      "    /** Render callback for column header tooltip.",
      "     * This tooltip will appear on cell hover with 600ms delay.",
      "     *",
      "     * If omitted, default implementation with column.caption + column.info will be rendered.",
      "     * Pass `() => null` to disable tooltip rendering.",
      "     */",
      "    renderTooltip?(column: DataColumnProps<TItem, TId, TFilter>): React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "key",
      "name": "key",
      "comment": {
       "raw": [
        "Unique key to identify the column. Used to reference columns, e.g. in ColumnsConfig.",
        " Also, used as React key for cells, header cells, and other components inside tables."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Column caption. Can be a plain text, or any React Component"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": "width",
      "name": "width",
      "comment": {
       "raw": [
        "The width of the column. Usually, columns has exact this width.",
        " When all columns fit, and there's spare horizontal space, you can use 'grow' prop to use this space for certain columns.",
        " DataTable's columns can't shrink below width - table will add horizontal scrolling instead of shrinking columns"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": "minWidth",
      "name": "minWidth",
      "comment": {
       "raw": [
        "Minimal width to which column can be resized manually"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "grow",
      "name": "grow",
      "comment": {
       "raw": [
        "The flex grow for the column. Allows column to grow in width if there's spare horizontal space"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "textAlign",
      "name": "textAlign",
      "comment": {
       "raw": [
        "Aligns cell and header content horizontally"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left' | 'center'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left",
        "center"
       ]
      },
      "required": false
     },
     {
      "uid": "justifyContent",
      "name": "justifyContent",
      "comment": {
       "raw": [
        "Aligns only cell content horizontally"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "alignSelf",
      "name": "alignSelf",
      "comment": {
       "raw": [
        "Align cell content vertically"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "isSortable",
      "name": "isSortable",
      "comment": {
       "raw": [
        "Enables sorting arrows on the column.",
        " Sorting state is kept in DataSourceState.sorting"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "isAlwaysVisible",
      "name": "isAlwaysVisible",
      "comment": {
       "raw": [
        "Makes this column locked, which means that you can't hide, unpin or reorder this column. Usually applicable for such column without which table because useless.",
        " Note, that isAlwaysVisible column should be always fixed to any side of the table, if you didn't specify `column.fix` prop for such column, 'left' value will be used by default.",
        " Also, if you have a few isAlwaysVisible columns, it's necessary to place it together in the start or end(depends on `fix` prop) of columns array."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "isHiddenByDefault",
      "name": "isHiddenByDefault",
      "comment": {
       "raw": [
        "Makes column hidden by default. User can turn it on later, via ColumnsConfiguration"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "info",
      "name": "info",
      "comment": {
       "raw": [
        "Info tooltip displayed in the table header"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": "isFilterActive",
      "name": "isFilterActive",
      "comment": {
       "raw": [
        "Should return true, if current filter affects the column.",
        " Usually, this prop is filled automatically by the useTableState hook.",
        " If you use the useTableState hook, you don't need to specify it manually."
       ]
      },
      "typeValue": {
       "raw": "(filter: TFilter, column: DataColumnProps<TItem, TId, TFilter>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "canCopy",
      "name": "canCopy",
      "comment": {
       "raw": [
        "A pure function that defines that column value can be copied to the other column."
       ]
      },
      "typeValue": {
       "raw": "(cell: DataTableSelectedCellData<TItem, TId, TFilter>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "canAcceptCopy",
      "name": "canAcceptCopy",
      "comment": {
       "raw": [
        "A pure function that defines that column accepts copying other column value into it"
       ]
      },
      "typeValue": {
       "raw": "(from: DataTableSelectedCellData<TItem, TId, TFilter>, to: DataTableSelectedCellData<TItem, TId, TFilter>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "allowResizing",
      "name": "allowResizing",
      "comment": {
       "raw": [
        "Pass true, to enable column resizing. By default, will be used global 'allowColumnsResizing' value from DataTable component."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "render",
      "name": "render",
      "comment": {
       "raw": [
        "Render the cell content. The item props is the value of the whole row (TItem)."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, props: DataRowProps<TItem, TId>) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "renderCell",
      "name": "renderCell",
      "comment": {
       "raw": [
        "Overrides rendering of the whole cell"
       ]
      },
      "typeValue": {
       "raw": "(cellProps: RenderCellProps<TItem, TId>) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "renderHeaderCell",
      "name": "renderHeaderCell",
      "comment": {
       "raw": [
        "Overrides rendering of the whole header cell."
       ]
      },
      "typeValue": {
       "raw": "(cellProps: DataTableHeaderCellProps<TItem, TId>) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "renderDropdown",
      "name": "renderDropdown",
      "comment": {
       "raw": [
        "Render callback for column header dropdown.",
        " Usually, this prop is filled automatically by the useTableState hook.",
        " If you use the useTableState hook, you don't need to specify it manually."
       ]
      },
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "renderFilter",
      "name": "renderFilter",
      "comment": {
       "raw": [
        "Render callback for column filter.",
        " If you use useTableState hook, and you specify filter for the column, default filter will be rendered automatically.",
        " You can use this prop to render a custom filter component."
       ]
      },
      "typeValue": {
       "raw": "(lens: ILens<TFilter>, dropdownProps: IDropdownBodyProps) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "renderTooltip",
      "name": "renderTooltip",
      "comment": {
       "raw": [
        "Render callback for column header tooltip.",
        " This tooltip will appear on cell hover with 600ms delay.",
        "",
        " If omitted, default implementation with column.caption + column.info will be rendered.",
        " Pass `() => null` to disable tooltip rendering."
       ]
      },
      "typeValue": {
       "raw": "(column: DataColumnProps<TItem, TId, TFilter>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "fix",
      "name": "fix",
      "comment": {
       "raw": [
        "If specified, will make column fixed - it would not scroll horizontally"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left"
       ]
      },
      "from": "@epam/uui-core:ICanBeFixed",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "HTMLDivElement & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataPickerCellProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataPickerCellProps",
     "nameFull": "DataPickerCellProps<TItem, TId>"
    },
    "src": "uui-core/src/types/pickers.ts",
    "comment": {
     "raw": [
      "Props for cells in pickers."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataPickerCellProps<TItem, TId>",
     "print": [
      "/** Props for cells in pickers. */",
      "interface DataPickerCellProps<TItem = any, TId = any> extends IHasCX {",
      "    /** Key to use as component's key. */",
      "    key: string;",
      "    /** DataRowProps object for the picker row where a cell is placed. */",
      "    rowProps: DataRowProps<TItem, TId>;",
      "    /** Render the cell content. The item props is the value of the whole row (TItem). */",
      "    renderItem(item: TItem, rowProps: DataRowProps<TItem, TId>): ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "key",
      "name": "key",
      "comment": {
       "raw": [
        "Key to use as component's key."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": "rowProps",
      "name": "rowProps",
      "comment": {
       "raw": [
        "DataRowProps object for the picker row where a cell is placed."
       ]
      },
      "typeValue": {
       "raw": "DataRowProps<TItem, TId>"
      },
      "typeValueRef": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": "renderItem",
      "name": "renderItem",
      "comment": {
       "raw": [
        "Render the cell content. The item props is the value of the whole row (TItem)."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, rowProps: DataRowProps<TItem, TId>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": true
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataQuery": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataQuery",
     "nameFull": "DataQuery<T>"
    },
    "src": "uui-core/src/types/dataQuery.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataQuery<T>",
     "print": [
      "interface DataQuery<T> extends Pick<LazyDataSourceApiRequest<T>, 'sorting' | 'range' | 'search'> {",
      "    /** The filter object value with predicates, by which data should be filtered. */",
      "    filter?: DataQueryFilter<T>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "filter",
      "name": "filter",
      "comment": {
       "raw": [
        "The filter object value with predicates, by which data should be filtered."
       ]
      },
      "typeValue": {
       "raw": "DataQueryFilter<T>"
      },
      "required": false
     },
     {
      "uid": "sorting",
      "name": "sorting",
      "comment": {
       "raw": [
        "Sorting options, by which data should be sorted."
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>[]"
      },
      "from": "@epam/uui-core:LazyDataSourceApiRequest",
      "required": false
     },
     {
      "uid": "range",
      "name": "range",
      "comment": {
       "raw": [
        "Specifies a range of the rows to be retrieved."
       ]
      },
      "typeValue": {
       "raw": "LazyDataSourceApiRequestRange"
      },
      "from": "@epam/uui-core:LazyDataSourceApiRequest",
      "required": false
     },
     {
      "uid": "search",
      "name": "search",
      "comment": {
       "raw": [
        "The search string, by which data should be searched."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:LazyDataSourceApiRequest",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataQueryFilter": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataQueryFilter",
     "nameFull": "DataQueryFilter<T>"
    },
    "src": "uui-core/src/types/dataQuery.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "DataQueryFilter<T>",
     "print": [
      "type DataQueryFilter<T> = {",
      "    [TPropName in keyof T]?: DataQueryFilterCondition<T[TPropName]>;",
      "};"
     ]
    }
   }
  },
  "@epam/uui-core:DataQueryFilterCondition": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataQueryFilterCondition",
     "nameFull": "DataQueryFilterCondition<TField>"
    },
    "src": "uui-core/src/types/dataQuery.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "TField | FilterPredicate<TField>",
     "print": [
      "type DataQueryFilterCondition<TField> = TField | FilterPredicate<TField>;"
     ]
    }
   }
  },
  "@epam/uui-core:DataRowOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataRowOptions",
     "nameFull": "DataRowOptions<TItem, TId>"
    },
    "src": "uui-core/src/types/dataRows.ts",
    "comment": {
     "raw": [
      "A part of the DataRowProps, which can be configured for each data row via getRowOptions callback.",
      " Other props in DataRowProps are computed when generating rows."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataRowOptions<TItem, TId>",
     "print": [
      "/** A part of the DataRowProps, which can be configured for each data row via getRowOptions callback.",
      " * Other props in DataRowProps are computed when generating rows.",
      " */",
      "interface DataRowOptions<TItem, TId> extends Partial<IEditable<TItem>>, IHasValidationMessage {",
      "    /** If row needs a checkbox, this field should be specified, and it props can be configured here */",
      "    checkbox?: {",
      "        isVisible: boolean;",
      "    } & IDisableable & ICanBeInvalid;",
      "    /** True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop) */",
      "    isSelectable?: boolean;",
      "    /** Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc. */",
      "    dnd?: IDndActor<any, any>;",
      "    /** Row click handler */",
      "    onClick?(rowProps: DataRowProps<TItem, TId>): void;",
      "    /** Can be specified to make row act as a link (plain or SPA) */",
      "    link?: Link;",
      "    /**",
      "     * A pure function that gets pinned state for each row.",
      "     * If row pinned, it means that it will be sticky inside their parent section.",
      "     * */",
      "    pin?(rowProps: DataRowProps<TItem, TId>): boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "checkbox",
      "name": "checkbox",
      "comment": {
       "raw": [
        "If row needs a checkbox, this field should be specified, and it props can be configured here"
       ]
      },
      "typeValue": {
       "raw": "{ isVisible: boolean; } & IDisableable & ICanBeInvalid"
      },
      "required": false
     },
     {
      "uid": "isSelectable",
      "name": "isSelectable",
      "comment": {
       "raw": [
        "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "dnd",
      "name": "dnd",
      "comment": {
       "raw": [
        "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
       ]
      },
      "typeValue": {
       "raw": "IDndActor<any, any>"
      },
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Row click handler"
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Can be specified to make row act as a link (plain or SPA)"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "required": false
     },
     {
      "uid": "pin",
      "name": "pin",
      "comment": {
       "raw": [
        "A pure function that gets pinned state for each row.",
        " If row pinned, it means that it will be sticky inside their parent section."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "validationMessage",
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasValidationMessage",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataRowPathItem": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataRowPathItem",
     "nameFull": "DataRowPathItem<TId, TItem>"
    },
    "src": "uui-core/src/types/dataRows.ts",
    "comment": {
     "raw": [
      "Holds parent info for data rows"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataRowPathItem<TId, TItem>",
     "print": [
      "/** Holds parent info for data rows */",
      "interface DataRowPathItem<TId, TItem> {",
      "    /** Item ID */",
      "    id: TId;",
      "    /** Item value */",
      "    value: TItem;",
      "    /** If true, indicates that this item last child of his parent */",
      "    isLastChild: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "Item ID"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "required": true
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "Item value"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "required": true
     },
     {
      "uid": "isLastChild",
      "name": "isLastChild",
      "comment": {
       "raw": [
        "If true, indicates that this item last child of his parent"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataRowProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataRowProps",
     "nameFull": "DataRowProps<TItem, TId>"
    },
    "src": "uui-core/src/types/dataRows.ts",
    "comment": {
     "raw": [
      "DataRowProps is a base shape of props, passed to items in various lists or trees.",
      "",
      " Despite 'Row' in it's name, it doesn't directly connected to a table.",
      " We use DataRowProps as a base for DataTableRowProps and DataPickerRowProps.",
      " But it can also be used for any user-built list, tree, custom picker rows, or even a grid of cards.",
      "",
      " Array of DataRowProps describes a part of hierarchical list, while still being a flat array (not a tree of some kind).",
      " We use depth, indent, path, and other props to show row's place in the hierarchy.",
      " This is very handy to handle rendering, especially in virtual scrolling scenarios.",
      "",
      " DataSources primary job is to convert various data stores into arrays of DataRowProps."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "DataRowProps<TItem, TId>",
     "print": [
      "/** DataRowProps is a base shape of props, passed to items in various lists or trees.",
      " *",
      " * Despite 'Row' in it's name, it doesn't directly connected to a table.",
      " * We use DataRowProps as a base for DataTableRowProps and DataPickerRowProps.",
      " * But it can also be used for any user-built list, tree, custom picker rows, or even a grid of cards.",
      " *",
      " * Array of DataRowProps describes a part of hierarchical list, while still being a flat array (not a tree of some kind).",
      " * We use depth, indent, path, and other props to show row's place in the hierarchy.",
      " * This is very handy to handle rendering, especially in virtual scrolling scenarios.",
      " *",
      " * DataSources primary job is to convert various data stores into arrays of DataRowProps.",
      " */",
      "type DataRowProps<TItem, TId> = FlexRowProps & DataRowOptions<TItem, TId> & {",
      "    /** ID of the TItem rows displays */",
      "    id: TId;",
      "    /** Key to be used as component's key when rendering. Usually, it's stringified ID */",
      "    rowKey: string;",
      "    /** Index of the row, from the top of the list. This doesn't account any hierarchy. */",
      "    index: number;",
      "    /** The data item (TItem) row displays. Will be undefined if isLoading = true. */",
      "    value: TItem | undefined;",
      "    /** ID of the parent TItem */",
      "    parentId?: TId;",
      "    /** Hierarchical path from the root node to the item (excluding the item itself) */",
      "    path?: DataRowPathItem<TId, TItem>[];",
      "    /* visual */",
      "    /** Depth of the row in tree, 0 for the top-level */",
      "    depth?: number;",
      "    /** Indent of the item, to show hierarchy.",
      "         *  Unlike depth, it contains additional logic, to not add unnecessary indents:",
      "         *  if all children of node has no children, all nodes would get the same indent as parent.",
      "         */",
      "    indent?: number;",
      "    /** True if row is in loading state. 'value' is empty in this case */",
      "    isLoading?: boolean;",
      "    /** True if item doesn't exist in a dataSource */",
      "    isUnknown?: boolean;",
      "    /** True if row be folded or unfolded (usually because it contains children) */",
      "    isFoldable?: boolean;",
      "    /** True if row is currently folded */",
      "    isFolded?: boolean;",
      "    /** True if row is checked with checkbox */",
      "    isChecked?: boolean;",
      "    /** True if row has checkbox and can be checkable */",
      "    isCheckable?: boolean;",
      "    /** True if some of row's children are checked.",
      "         * Used to show 'indefinite' checkbox state, to show user that something inside is checked */",
      "    isChildrenChecked?: boolean;",
      "    /** True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes) */",
      "    isSelected?: boolean;",
      "    /** True if any of row's children is selected. */",
      "    isChildrenSelected?: boolean;",
      "    /** True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row */",
      "    isFocused?: boolean;",
      "    /** True if row is the last child of his parent */",
      "    isLastChild?: boolean;",
      "    /* events */",
      "    /** Handles row folding change.",
      "         * We demand to pass the row as well, to avoid creating closures for each row.",
      "         */",
      "    onFold?(rowProps: DataRowProps<TItem, TId>): void;",
      "    /** Handles row click.",
      "         * We demand to pass the row as well, to avoid creating closures for each row.",
      "         */",
      "    onClick?(rowProps: DataRowProps<TItem, TId>): void;",
      "    /** Handles row checkbox change.",
      "         * We demand to pass the row as well, to avoid creating closures for each row.",
      "         */",
      "    onCheck?(rowProps: DataRowProps<TItem, TId>): void;",
      "    /** Handles row selection.",
      "         * We demand to pass the row as well, to avoid creating closures for each row.",
      "         */",
      "    onSelect?(rowProps: DataRowProps<TItem, TId>): void;",
      "    /** Handles row focusing.",
      "         */",
      "    onFocus?(focusedIndex: number): void;",
      "    /** True if row pinned, it means that it will be sticky inside his nesting level */",
      "    isPinned?: boolean;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "((e?: any) => void) & ((rowProps: DataRowProps<TItem, TId>) => void) & ((rowProps: DataRowProps<TItem, TId>) => void)"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "alignItems",
      "name": "alignItems",
      "comment": {
       "raw": [
        "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)",
        " @default 'center'"
       ],
       "tags": {
        "@default": "center"
       }
      },
      "typeValue": {
       "raw": "'top' | 'bottom' | 'center' | 'stretch'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "bottom",
        "center",
        "stretch"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "justifyContent",
      "name": "justifyContent",
      "comment": {
       "raw": [
        "Flexbox justifyContent property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
       ]
      },
      "typeValue": {
       "raw": "'center' | 'space-around' | 'space-between' | 'space-evenly' | 'end' | 'start'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "center",
        "space-around",
        "space-between",
        "space-evenly",
        "end",
        "start"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "columnGap",
      "name": "columnGap",
      "comment": {
       "raw": [
        "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '24' | '36'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "36"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "rowGap",
      "name": "rowGap",
      "comment": {
       "raw": [
        "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '24' | '36'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "36"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "checkbox",
      "name": "checkbox",
      "comment": {
       "raw": [
        "If row needs a checkbox, this field should be specified, and it props can be configured here"
       ]
      },
      "typeValue": {
       "raw": "{ isVisible: boolean; } & IDisableable & ICanBeInvalid"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "isSelectable",
      "name": "isSelectable",
      "comment": {
       "raw": [
        "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "dnd",
      "name": "dnd",
      "comment": {
       "raw": [
        "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
       ]
      },
      "typeValue": {
       "raw": "IDndActor<any, any>"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Can be specified to make row act as a link (plain or SPA)"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "pin",
      "name": "pin",
      "comment": {
       "raw": [
        "A pure function that gets pinned state for each row.",
        " If row pinned, it means that it will be sticky inside their parent section."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "validationMessage",
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasValidationMessage",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "ID of the TItem rows displays"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "required": true
     },
     {
      "uid": "rowKey",
      "name": "rowKey",
      "comment": {
       "raw": [
        "Key to be used as component's key when rendering. Usually, it's stringified ID"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": "index",
      "name": "index",
      "comment": {
       "raw": [
        "Index of the row, from the top of the list. This doesn't account any hierarchy."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": "parentId",
      "name": "parentId",
      "comment": {
       "raw": [
        "ID of the parent TItem"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "required": false
     },
     {
      "uid": "path",
      "name": "path",
      "comment": {
       "raw": [
        "Hierarchical path from the root node to the item (excluding the item itself)"
       ]
      },
      "typeValue": {
       "raw": "DataRowPathItem<TId, TItem>[]"
      },
      "required": false
     },
     {
      "uid": "depth",
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of the row in tree, 0 for the top-level"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "indent",
      "name": "indent",
      "comment": {
       "raw": [
        "Indent of the item, to show hierarchy.",
        "  Unlike depth, it contains additional logic, to not add unnecessary indents:",
        "  if all children of node has no children, all nodes would get the same indent as parent."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "isLoading",
      "name": "isLoading",
      "comment": {
       "raw": [
        "True if row is in loading state. 'value' is empty in this case"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "isUnknown",
      "name": "isUnknown",
      "comment": {
       "raw": [
        "True if item doesn't exist in a dataSource"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "isFoldable",
      "name": "isFoldable",
      "comment": {
       "raw": [
        "True if row be folded or unfolded (usually because it contains children)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "isFolded",
      "name": "isFolded",
      "comment": {
       "raw": [
        "True if row is currently folded"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "isChecked",
      "name": "isChecked",
      "comment": {
       "raw": [
        "True if row is checked with checkbox"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "isCheckable",
      "name": "isCheckable",
      "comment": {
       "raw": [
        "True if row has checkbox and can be checkable"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "isChildrenChecked",
      "name": "isChildrenChecked",
      "comment": {
       "raw": [
        "True if some of row's children are checked.",
        " Used to show 'indefinite' checkbox state, to show user that something inside is checked"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "isSelected",
      "name": "isSelected",
      "comment": {
       "raw": [
        "True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "isChildrenSelected",
      "name": "isChildrenSelected",
      "comment": {
       "raw": [
        "True if any of row's children is selected."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "isFocused",
      "name": "isFocused",
      "comment": {
       "raw": [
        "True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "isLastChild",
      "name": "isLastChild",
      "comment": {
       "raw": [
        "True if row is the last child of his parent"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "onFold",
      "name": "onFold",
      "comment": {
       "raw": [
        "Handles row folding change.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "onCheck",
      "name": "onCheck",
      "comment": {
       "raw": [
        "Handles row checkbox change.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "onSelect",
      "name": "onSelect",
      "comment": {
       "raw": [
        "Handles row selection.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Handles row focusing."
       ]
      },
      "typeValue": {
       "raw": "(focusedIndex: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "isPinned",
      "name": "isPinned",
      "comment": {
       "raw": [
        "True if row pinned, it means that it will be sticky inside his nesting level"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataSourceListCounts": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataSourceListCounts",
     "nameFull": "DataSourceListCounts"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "DataSourceListCounts",
     "print": [
      "type DataSourceListCounts = {",
      "    /**",
      "     * Count of rows, after applying filter, and folding on tree nodes.",
      "     * Obsolete! Please switch to exactRowsCount / knownRowsCount",
      "     */",
      "    rowsCount?: number;",
      "    /** Count of rows, if all rows loaded. Can be null while initial loading, or if API doesn't return count  */",
      "    exactRowsCount?: number;",
      "    /**",
      "     * There's at least knownRowsCount rows. There can be more if list is lazy loaded.",
      "     * Equals to exactRowsCount if all rows are loaded, or if API returns rows count",
      "     * Otherwise, exactRowsCount will be null, and knownRowsCount will specify number of loaded rows.",
      "     */",
      "    knownRowsCount?: number;",
      "    /** Total count of items, before applying the filter. If there's a tree, it counts all nodes, including folded children  */",
      "    totalCount?: number;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "rowsCount",
      "name": "rowsCount",
      "comment": {
       "raw": [
        "Count of rows, after applying filter, and folding on tree nodes.",
        " Obsolete! Please switch to exactRowsCount / knownRowsCount"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "exactRowsCount",
      "name": "exactRowsCount",
      "comment": {
       "raw": [
        "Count of rows, if all rows loaded. Can be null while initial loading, or if API doesn't return count"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "knownRowsCount",
      "name": "knownRowsCount",
      "comment": {
       "raw": [
        "There's at least knownRowsCount rows. There can be more if list is lazy loaded.",
        " Equals to exactRowsCount if all rows are loaded, or if API returns rows count",
        " Otherwise, exactRowsCount will be null, and knownRowsCount will specify number of loaded rows."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "totalCount",
      "name": "totalCount",
      "comment": {
       "raw": [
        "Total count of items, before applying the filter. If there's a tree, it counts all nodes, including folded children"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataSourceListProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataSourceListProps",
     "nameFull": "DataSourceListProps"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataSourceListProps",
     "print": [
      "interface DataSourceListProps extends DataSourceListCounts {",
      "    /**",
      "     * ICheckable object for Select All behavior.",
      "     * If omitted, Select All action will be absent.",
      "     * */",
      "    selectAll?: ICheckable;",
      "    /** Signals that data is reloading on search/sort/filter/reload. */",
      "    isReloading?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "selectAll",
      "name": "selectAll",
      "comment": {
       "raw": [
        "ICheckable object for Select All behavior.",
        " If omitted, Select All action will be absent."
       ]
      },
      "typeValue": {
       "raw": "ICheckable"
      },
      "required": false
     },
     {
      "uid": "isReloading",
      "name": "isReloading",
      "comment": {
       "raw": [
        "Signals that data is reloading on search/sort/filter/reload."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "rowsCount",
      "name": "rowsCount",
      "comment": {
       "raw": [
        "Count of rows, after applying filter, and folding on tree nodes.",
        " Obsolete! Please switch to exactRowsCount / knownRowsCount"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": "exactRowsCount",
      "name": "exactRowsCount",
      "comment": {
       "raw": [
        "Count of rows, if all rows loaded. Can be null while initial loading, or if API doesn't return count"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": "knownRowsCount",
      "name": "knownRowsCount",
      "comment": {
       "raw": [
        "There's at least knownRowsCount rows. There can be more if list is lazy loaded.",
        " Equals to exactRowsCount if all rows are loaded, or if API returns rows count",
        " Otherwise, exactRowsCount will be null, and knownRowsCount will specify number of loaded rows."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": "totalCount",
      "name": "totalCount",
      "comment": {
       "raw": [
        "Total count of items, before applying the filter. If there's a tree, it counts all nodes, including folded children"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataSourceState": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataSourceState",
     "nameFull": "DataSourceState<TFilter, TId>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "comment": {
     "raw": [
      "Holds state of a components displaying lists - like tables. Holds virtual list position, filter, search, selection, etc."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataSourceState<TFilter, TId>",
     "print": [
      "/** Holds state of a components displaying lists - like tables. Holds virtual list position, filter, search, selection, etc. */",
      "interface DataSourceState<TFilter = Record<string, any>, TId = any> extends VirtualListState {",
      "    /**",
      "     * Search value, used to filter data based on it.",
      "     * Included in the API request object when using a LazyDataSource.",
      "     * For Array and Async data sources, searching is performed internally by the datasource.",
      "     * */",
      "    search?: string;",
      "    /** Array of checked items IDs */",
      "    checked?: TId[];",
      "    /**",
      "     * A map of item IDs to their folding state.",
      "     * If an item ID is present with a `true` value, it's folded; otherwise, it's not folded.",
      "     * */",
      "    folded?: Record<string, boolean>;",
      "    /**",
      "     * Filter value used to filter data based on it.",
      "     * Included in the API request object when using a LazyDataSource.",
      "     * For Array and Async data sources, filtering is performed internally by the datasource.",
      "     * */",
      "    filter?: TFilter;",
      "    /**",
      "     * Sorting value, used to sort data based on it.",
      "     * Included in the API request object when using a LazyDataSource.",
      "     * For Array and Async data sources, sorting is performed internally by the datasource.",
      "     * */",
      "    sorting?: SortingOption[];",
      "    /** ID of selected item. It can be only one selected item at the moment. */",
      "    selectedId?: TId;",
      "    /** Index of currently focused item */",
      "    focusedIndex?: number;",
      "    /** Current page number */",
      "    page?: number;",
      "    /** The amount of items per page */",
      "    pageSize?: number;",
      "    /**",
      "     * Provides default folding of nodes if the opposite value is not present in the folded map.",
      "     * It is used to collapse/expand all nodes.",
      "     */",
      "    foldAll?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "search",
      "name": "search",
      "comment": {
       "raw": [
        "Search value, used to filter data based on it.",
        " Included in the API request object when using a LazyDataSource.",
        " For Array and Async data sources, searching is performed internally by the datasource."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "checked",
      "name": "checked",
      "comment": {
       "raw": [
        "Array of checked items IDs"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "required": false
     },
     {
      "uid": "folded",
      "name": "folded",
      "comment": {
       "raw": [
        "A map of item IDs to their folding state.",
        " If an item ID is present with a `true` value, it's folded; otherwise, it's not folded."
       ]
      },
      "typeValue": {
       "raw": "Record<string, boolean>"
      },
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "comment": {
       "raw": [
        "Filter value used to filter data based on it.",
        " Included in the API request object when using a LazyDataSource.",
        " For Array and Async data sources, filtering is performed internally by the datasource."
       ]
      },
      "typeValue": {
       "raw": "TFilter"
      },
      "required": false
     },
     {
      "uid": "sorting",
      "name": "sorting",
      "comment": {
       "raw": [
        "Sorting value, used to sort data based on it.",
        " Included in the API request object when using a LazyDataSource.",
        " For Array and Async data sources, sorting is performed internally by the datasource."
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>[]"
      },
      "required": false
     },
     {
      "uid": "selectedId",
      "name": "selectedId",
      "comment": {
       "raw": [
        "ID of selected item. It can be only one selected item at the moment."
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "required": false
     },
     {
      "uid": "focusedIndex",
      "name": "focusedIndex",
      "comment": {
       "raw": [
        "Index of currently focused item"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "page",
      "name": "page",
      "comment": {
       "raw": [
        "Current page number"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "pageSize",
      "name": "pageSize",
      "comment": {
       "raw": [
        "The amount of items per page"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "foldAll",
      "name": "foldAll",
      "comment": {
       "raw": [
        "Provides default folding of nodes if the opposite value is not present in the folded map.",
        " It is used to collapse/expand all nodes."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "scrollTo",
      "name": "scrollTo",
      "comment": {
       "raw": [
        "Virtual list ensures that row with this Index is within the visible area, if not Virtual List .",
        " Virtual list updates this value on scroll to null when appear in the visible area.",
        " If this value is updated manually, Virtual List would scroll to the specified items.",
        " It would attempt to put scroll so this item will be at the top of the list."
       ]
      },
      "typeValue": {
       "raw": "ScrollToConfig"
      },
      "from": "@epam/uui-core:VirtualListState",
      "required": false
     },
     {
      "uid": "topIndex",
      "name": "topIndex",
      "comment": {
       "raw": [
        "Index of the topmost item, in rendered batch.",
        " Note - this item might not be visible, as Virtual List maintain some reserve of rows on top / at the bottom of the list"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:VirtualListRange",
      "required": false
     },
     {
      "uid": "visibleCount",
      "name": "visibleCount",
      "comment": {
       "raw": [
        "Number of currently rendered items.",
        " Virtual list updates this value automatically, if it too small.",
        " Note Virtual List renders more items, that actually visible,",
        " as it need maintain some reserve of rows on top / at the bottom of the list."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:VirtualListRange",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataTableCellOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataTableCellOptions",
     "nameFull": "DataTableCellOptions<TItem, TId>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataTableCellOptions<TItem, TId>",
     "print": [
      "interface DataTableCellOptions<TItem = any, TId = any> {",
      "    /** Key to use as component's key */",
      "    key: string;",
      "    /** DataTableRowsProps object for the table row the cell is at */",
      "    rowProps: DataTableRowProps<TItem, TId>;",
      "    /** DataColumnProps object for the column the cell is at */",
      "    column: DataColumnProps<TItem, TId>;",
      "    /** Column index in table  */",
      "    index?: number;",
      "    /** True if the cell is in the first column */",
      "    isFirstColumn: boolean;",
      "    /** True if the cell is in the last column */",
      "    isLastColumn: boolean;",
      "    /** HTML tabIndex attribute to set on the cell */",
      "    tabIndex?: React.HTMLAttributes<HTMLElement>['tabIndex'];",
      "}"
     ]
    },
    "props": [
     {
      "uid": "key",
      "name": "key",
      "comment": {
       "raw": [
        "Key to use as component's key"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": "rowProps",
      "name": "rowProps",
      "comment": {
       "raw": [
        "DataTableRowsProps object for the table row the cell is at"
       ]
      },
      "typeValue": {
       "raw": "DataTableRowProps<TItem, TId>"
      },
      "required": true
     },
     {
      "uid": "column",
      "name": "column",
      "comment": {
       "raw": [
        "DataColumnProps object for the column the cell is at"
       ]
      },
      "typeValue": {
       "raw": "DataColumnProps<TItem, TId, any>"
      },
      "required": true
     },
     {
      "uid": "index",
      "name": "index",
      "comment": {
       "raw": [
        "Column index in table"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "isFirstColumn",
      "name": "isFirstColumn",
      "comment": {
       "raw": [
        "True if the cell is in the first column"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": "isLastColumn",
      "name": "isLastColumn",
      "comment": {
       "raw": [
        "True if the cell is in the last column"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "HTML tabIndex attribute to set on the cell"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataTableCellProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataTableCellProps",
     "nameFull": "DataTableCellProps<TItem, TId, TCellValue>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataTableCellProps<TItem, TId, TCellValue>",
     "print": [
      "interface DataTableCellProps<TItem = any, TId = any, TCellValue = any> extends DataTableCellOptions<TItem, TId>, IHasCX, Partial<IEditable<TCellValue>>, IHasValidationMessage {",
      "    /** Add-on controls to put before the cell content (folding arrow, checkbox, etc.) */",
      "    addons?: React.ReactNode;",
      "    /** Overrides default loading placeholder ('skeleton') rendering.",
      "     * By default: () => <Text> Unknown </Text>",
      "     * */",
      "    renderPlaceholder?(cellProps: DataTableCellProps<TItem, TId, TCellValue>): React.ReactNode;",
      "    /** Overrides default unknown item rendering */",
      "    renderUnknown?(cellProps: DataTableCellProps<TItem, TId, TCellValue>): React.ReactNode;",
      "    /**",
      "     * If passed, the cell is rendered as editable - receives focus, show validation errors.",
      "     * All necessary props for the editor are passed as argument:",
      "     * - props implements IEditable and can be passed directly to suitable component (like TextInput)",
      "     * - ICanFocus props are passed as well. Component should implement it so cell focus highlight works properly",
      "     * - mode='cell' prop is passed to render UUI components in 'cell' mode",
      "     * - rowProps is passed, so you depend on additional info about the row itself",
      "     */",
      "    renderEditor?(props: RenderEditorProps<TItem, TId, TCellValue>): React.ReactNode;",
      "    /** Overrides default tooltip, used to show validation message if the cell is invalid */",
      "    renderTooltip?: (props: ICanBeInvalid & TooltipCoreProps) => React.ReactElement;",
      "    /**",
      "     * Drag'n'drop marker event handlers.",
      "     */",
      "    eventHandlers?: DndEventHandlers;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "addons",
      "name": "addons",
      "comment": {
       "raw": [
        "Add-on controls to put before the cell content (folding arrow, checkbox, etc.)"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": "renderPlaceholder",
      "name": "renderPlaceholder",
      "comment": {
       "raw": [
        "Overrides default loading placeholder ('skeleton') rendering.",
        " By default: () => <Text> Unknown </Text>"
       ]
      },
      "typeValue": {
       "raw": "(cellProps: DataTableCellProps<TItem, TId, TCellValue>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "renderUnknown",
      "name": "renderUnknown",
      "comment": {
       "raw": [
        "Overrides default unknown item rendering"
       ]
      },
      "typeValue": {
       "raw": "(cellProps: DataTableCellProps<TItem, TId, TCellValue>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "renderEditor",
      "name": "renderEditor",
      "comment": {
       "raw": [
        "If passed, the cell is rendered as editable - receives focus, show validation errors.",
        " All necessary props for the editor are passed as argument:",
        " - props implements IEditable and can be passed directly to suitable component (like TextInput)",
        " - ICanFocus props are passed as well. Component should implement it so cell focus highlight works properly",
        " - mode='cell' prop is passed to render UUI components in 'cell' mode",
        " - rowProps is passed, so you depend on additional info about the row itself"
       ]
      },
      "typeValue": {
       "raw": "(props: RenderEditorProps<TItem, TId, TCellValue>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "renderTooltip",
      "name": "renderTooltip",
      "comment": {
       "raw": [
        "Overrides default tooltip, used to show validation message if the cell is invalid"
       ]
      },
      "typeValue": {
       "raw": "(props: ICanBeInvalid & TooltipCoreProps) => React.ReactElement<any, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "eventHandlers",
      "name": "eventHandlers",
      "comment": {
       "raw": [
        "Drag'n'drop marker event handlers."
       ]
      },
      "typeValue": {
       "raw": "DndEventHandlers"
      },
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "comment": {
       "raw": [
        "Key to use as component's key"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": true
     },
     {
      "uid": "rowProps",
      "name": "rowProps",
      "comment": {
       "raw": [
        "DataTableRowsProps object for the table row the cell is at"
       ]
      },
      "typeValue": {
       "raw": "DataTableRowProps<TItem, TId>"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": true
     },
     {
      "uid": "column",
      "name": "column",
      "comment": {
       "raw": [
        "DataColumnProps object for the column the cell is at"
       ]
      },
      "typeValue": {
       "raw": "DataColumnProps<TItem, TId, any>"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": true
     },
     {
      "uid": "index",
      "name": "index",
      "comment": {
       "raw": [
        "Column index in table"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": false
     },
     {
      "uid": "isFirstColumn",
      "name": "isFirstColumn",
      "comment": {
       "raw": [
        "True if the cell is in the first column"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": true
     },
     {
      "uid": "isLastColumn",
      "name": "isLastColumn",
      "comment": {
       "raw": [
        "True if the cell is in the last column"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": true
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "HTML tabIndex attribute to set on the cell"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TCellValue"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TCellValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "validationMessage",
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasValidationMessage",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataTableColumnsConfigOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataTableColumnsConfigOptions",
     "nameFull": "DataTableColumnsConfigOptions"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataTableColumnsConfigOptions",
     "print": [
      "interface DataTableColumnsConfigOptions {",
      "    /** If true, allows user to change columns order",
      "     * @default false",
      "     * */",
      "    allowColumnsReordering?: boolean;",
      "    /** If true, allows user to change columns width",
      "     * @default false",
      "     * */",
      "    allowColumnsResizing?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "allowColumnsReordering",
      "name": "allowColumnsReordering",
      "comment": {
       "raw": [
        "If true, allows user to change columns order",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "allowColumnsResizing",
      "name": "allowColumnsResizing",
      "comment": {
       "raw": [
        "If true, allows user to change columns width",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataTableConfigModalParams": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataTableConfigModalParams",
     "nameFull": "DataTableConfigModalParams"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "DataTableConfigModalParams",
     "print": [
      "type DataTableConfigModalParams = IEditable<DataSourceState> & {",
      "    /** Array of all table columns */",
      "    columns: DataColumnProps[];",
      "};"
     ]
    },
    "props": [
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "DataSourceState<Record<string, any>, any>"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: DataSourceState<Record<string, any>, any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "columns",
      "name": "columns",
      "comment": {
       "raw": [
        "Array of all table columns"
       ]
      },
      "typeValue": {
       "raw": "DataColumnProps<any, any, any>[]"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataTableHeaderCellProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataTableHeaderCellProps",
     "nameFull": "DataTableHeaderCellProps<TItem, TId>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataTableHeaderCellProps<TItem, TId>",
     "print": [
      "interface DataTableHeaderCellProps<TItem = any, TId = any> extends IEditable<DataTableState>, IDropdownToggler, IHasCX, DataTableColumnsConfigOptions {",
      "    key: string;",
      "    column: DataColumnProps<TItem, TId>;",
      "    isFirstColumn: boolean;",
      "    isLastColumn: boolean;",
      "    selectAll?: ICheckable;",
      "    /**",
      "     * Enables collapse/expand all functionality.",
      "     * */",
      "    showFoldAll?: boolean;",
      "    /**",
      "     * Fold all click handler.",
      "     * If `showFoldAll` is not enabled, onFoldAll is not passed.",
      "     * */",
      "    onFoldAll?(): void;",
      "    /**",
      "     * Indicates if all nodes are folded.",
      "     */",
      "    areAllFolded?: boolean;",
      "    isFilterActive?: boolean;",
      "    sortDirection?: SortDirection;",
      "    onSort(dir: SortDirection): void;",
      "    onDrop?(params: DropParams<DataColumnProps<TItem, TId>, DataColumnProps<TItem, TId>>): void;",
      "    renderFilter?: (dropdownProps: IDropdownBodyProps) => React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "key",
      "name": "key",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": "column",
      "name": "column",
      "typeValue": {
       "raw": "DataColumnProps<TItem, TId, any>"
      },
      "required": true
     },
     {
      "uid": "isFirstColumn",
      "name": "isFirstColumn",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": "isLastColumn",
      "name": "isLastColumn",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": "selectAll",
      "name": "selectAll",
      "typeValue": {
       "raw": "ICheckable"
      },
      "required": false
     },
     {
      "uid": "showFoldAll",
      "name": "showFoldAll",
      "comment": {
       "raw": [
        "Enables collapse/expand all functionality."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "onFoldAll",
      "name": "onFoldAll",
      "comment": {
       "raw": [
        "Fold all click handler.",
        " If `showFoldAll` is not enabled, onFoldAll is not passed."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "areAllFolded",
      "name": "areAllFolded",
      "comment": {
       "raw": [
        "Indicates if all nodes are folded."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "isFilterActive",
      "name": "isFilterActive",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "sortDirection",
      "name": "sortDirection",
      "typeValue": {
       "raw": "'asc' | 'desc'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "asc",
        "desc"
       ]
      },
      "required": false
     },
     {
      "uid": "onSort",
      "name": "onSort",
      "typeValue": {
       "raw": "(dir: SortDirection) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "onDrop",
      "name": "onDrop",
      "typeValue": {
       "raw": "(params: DropParams<DataColumnProps<TItem, TId, any>, DataColumnProps<TItem, TId, any>>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "renderFilter",
      "name": "renderFilter",
      "typeValue": {
       "raw": "(dropdownProps: IDropdownBodyProps) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "DataTableState<any, any>"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: DataTableState<any, any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "allowColumnsReordering",
      "name": "allowColumnsReordering",
      "comment": {
       "raw": [
        "If true, allows user to change columns order",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataTableColumnsConfigOptions",
      "required": false
     },
     {
      "uid": "allowColumnsResizing",
      "name": "allowColumnsResizing",
      "comment": {
       "raw": [
        "If true, allows user to change columns width",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataTableColumnsConfigOptions",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataTableHeaderRowProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataTableHeaderRowProps",
     "nameFull": "DataTableHeaderRowProps<TItem, TId>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataTableHeaderRowProps<TItem, TId>",
     "print": [
      "interface DataTableHeaderRowProps<TItem = any, TId = any> extends IEditable<DataTableState>, IHasCX, DataTableColumnsConfigOptions {",
      "    columns: DataColumnProps<TItem, TId>[];",
      "    selectAll?: ICheckable;",
      "    /**",
      "     * Enables collapse/expand all functionality.",
      "     * */",
      "    showFoldAll?: boolean;",
      "    onConfigButtonClick?: (params: DataTableConfigModalParams) => any;",
      "    renderCell?: (props: DataTableHeaderCellProps<TItem, TId>) => React.ReactNode;",
      "    renderConfigButton?: () => React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "columns",
      "name": "columns",
      "typeValue": {
       "raw": "DataColumnProps<TItem, TId, any>[]"
      },
      "required": true
     },
     {
      "uid": "selectAll",
      "name": "selectAll",
      "typeValue": {
       "raw": "ICheckable"
      },
      "required": false
     },
     {
      "uid": "showFoldAll",
      "name": "showFoldAll",
      "comment": {
       "raw": [
        "Enables collapse/expand all functionality."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "onConfigButtonClick",
      "name": "onConfigButtonClick",
      "typeValue": {
       "raw": "(params: DataTableConfigModalParams) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "renderCell",
      "name": "renderCell",
      "typeValue": {
       "raw": "(props: DataTableHeaderCellProps<TItem, TId>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "renderConfigButton",
      "name": "renderConfigButton",
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "DataTableState<any, any>"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: DataTableState<any, any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "allowColumnsReordering",
      "name": "allowColumnsReordering",
      "comment": {
       "raw": [
        "If true, allows user to change columns order",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataTableColumnsConfigOptions",
      "required": false
     },
     {
      "uid": "allowColumnsResizing",
      "name": "allowColumnsResizing",
      "comment": {
       "raw": [
        "If true, allows user to change columns width",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataTableColumnsConfigOptions",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataTableRowProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataTableRowProps",
     "nameFull": "DataTableRowProps<TItem, TId>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataTableRowProps<TItem, TId>",
     "print": [
      "interface DataTableRowProps<TItem = any, TId = any> extends DataRowProps<TItem, TId> {",
      "    /** Array of visible columns */",
      "    columns?: DataColumnProps<TItem, TId>[];",
      "    /**",
      "     * Render callback for each cell at row.",
      "     * If omitted, default cell renderer will be used.",
      "     * */",
      "    renderCell?: (props: DataTableCellProps<TItem, TId, any>) => ReactNode;",
      "    /**",
      "     * Render callback for the drop marker. Rendered only if 'dnd' option was provided via getRowProps.",
      "     * If omitted, default renderer will be used.",
      "     * */",
      "    renderDropMarkers?: (props: DndActorRenderParams) => ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "columns",
      "name": "columns",
      "comment": {
       "raw": [
        "Array of visible columns"
       ]
      },
      "typeValue": {
       "raw": "DataColumnProps<TItem, TId, any>[]"
      },
      "required": false
     },
     {
      "uid": "renderCell",
      "name": "renderCell",
      "comment": {
       "raw": [
        "Render callback for each cell at row.",
        " If omitted, default cell renderer will be used."
       ]
      },
      "typeValue": {
       "raw": "(props: DataTableCellProps<TItem, TId, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "renderDropMarkers",
      "name": "renderDropMarkers",
      "comment": {
       "raw": [
        "Render callback for the drop marker. Rendered only if 'dnd' option was provided via getRowProps.",
        " If omitted, default renderer will be used."
       ]
      },
      "typeValue": {
       "raw": "(props: DndActorRenderParams) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "((e?: any) => void) & ((rowProps: DataRowProps<TItem, TId>) => void) & ((rowProps: DataRowProps<TItem, TId>) => void)"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "alignItems",
      "name": "alignItems",
      "comment": {
       "raw": [
        "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)",
        " @default 'center'"
       ],
       "tags": {
        "@default": "center"
       }
      },
      "typeValue": {
       "raw": "'top' | 'bottom' | 'center' | 'stretch'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "bottom",
        "center",
        "stretch"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "justifyContent",
      "name": "justifyContent",
      "comment": {
       "raw": [
        "Flexbox justifyContent property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
       ]
      },
      "typeValue": {
       "raw": "'center' | 'space-around' | 'space-between' | 'space-evenly' | 'end' | 'start'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "center",
        "space-around",
        "space-between",
        "space-evenly",
        "end",
        "start"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "columnGap",
      "name": "columnGap",
      "comment": {
       "raw": [
        "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '24' | '36'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "36"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "rowGap",
      "name": "rowGap",
      "comment": {
       "raw": [
        "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '24' | '36'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "36"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "checkbox",
      "name": "checkbox",
      "comment": {
       "raw": [
        "If row needs a checkbox, this field should be specified, and it props can be configured here"
       ]
      },
      "typeValue": {
       "raw": "{ isVisible: boolean; } & IDisableable & ICanBeInvalid"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "isSelectable",
      "name": "isSelectable",
      "comment": {
       "raw": [
        "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "dnd",
      "name": "dnd",
      "comment": {
       "raw": [
        "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
       ]
      },
      "typeValue": {
       "raw": "IDndActor<any, any>"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Can be specified to make row act as a link (plain or SPA)"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "pin",
      "name": "pin",
      "comment": {
       "raw": [
        "A pure function that gets pinned state for each row.",
        " If row pinned, it means that it will be sticky inside their parent section."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "validationMessage",
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasValidationMessage",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "ID of the TItem rows displays"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": "rowKey",
      "name": "rowKey",
      "comment": {
       "raw": [
        "Key to be used as component's key when rendering. Usually, it's stringified ID"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": "index",
      "name": "index",
      "comment": {
       "raw": [
        "Index of the row, from the top of the list. This doesn't account any hierarchy."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": "parentId",
      "name": "parentId",
      "comment": {
       "raw": [
        "ID of the parent TItem"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "path",
      "name": "path",
      "comment": {
       "raw": [
        "Hierarchical path from the root node to the item (excluding the item itself)"
       ]
      },
      "typeValue": {
       "raw": "DataRowPathItem<TId, TItem>[]"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "depth",
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of the row in tree, 0 for the top-level"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "indent",
      "name": "indent",
      "comment": {
       "raw": [
        "Indent of the item, to show hierarchy.",
        "  Unlike depth, it contains additional logic, to not add unnecessary indents:",
        "  if all children of node has no children, all nodes would get the same indent as parent."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isLoading",
      "name": "isLoading",
      "comment": {
       "raw": [
        "True if row is in loading state. 'value' is empty in this case"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isUnknown",
      "name": "isUnknown",
      "comment": {
       "raw": [
        "True if item doesn't exist in a dataSource"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isFoldable",
      "name": "isFoldable",
      "comment": {
       "raw": [
        "True if row be folded or unfolded (usually because it contains children)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isFolded",
      "name": "isFolded",
      "comment": {
       "raw": [
        "True if row is currently folded"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isChecked",
      "name": "isChecked",
      "comment": {
       "raw": [
        "True if row is checked with checkbox"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isCheckable",
      "name": "isCheckable",
      "comment": {
       "raw": [
        "True if row has checkbox and can be checkable"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isChildrenChecked",
      "name": "isChildrenChecked",
      "comment": {
       "raw": [
        "True if some of row's children are checked.",
        " Used to show 'indefinite' checkbox state, to show user that something inside is checked"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isSelected",
      "name": "isSelected",
      "comment": {
       "raw": [
        "True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isChildrenSelected",
      "name": "isChildrenSelected",
      "comment": {
       "raw": [
        "True if any of row's children is selected."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isFocused",
      "name": "isFocused",
      "comment": {
       "raw": [
        "True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isLastChild",
      "name": "isLastChild",
      "comment": {
       "raw": [
        "True if row is the last child of his parent"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "onFold",
      "name": "onFold",
      "comment": {
       "raw": [
        "Handles row folding change.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "onCheck",
      "name": "onCheck",
      "comment": {
       "raw": [
        "Handles row checkbox change.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "onSelect",
      "name": "onSelect",
      "comment": {
       "raw": [
        "Handles row selection.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Handles row focusing."
       ]
      },
      "typeValue": {
       "raw": "(focusedIndex: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isPinned",
      "name": "isPinned",
      "comment": {
       "raw": [
        "True if row pinned, it means that it will be sticky inside his nesting level"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataTableSelectedCellData": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataTableSelectedCellData",
     "nameFull": "DataTableSelectedCellData<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataTableSelectedCellData<TItem, TId, TFilter>",
     "print": [
      "interface DataTableSelectedCellData<TItem = any, TId = any, TFilter = any> {",
      "    /** Column props of the selected cell */",
      "    column: DataColumnProps<TItem, TId, TFilter>;",
      "    /** Row props of the selected cell */",
      "    row: DataRowProps<TItem, TId>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "column",
      "name": "column",
      "comment": {
       "raw": [
        "Column props of the selected cell"
       ]
      },
      "typeValue": {
       "raw": "DataColumnProps<TItem, TId, TFilter>"
      },
      "required": true
     },
     {
      "uid": "row",
      "name": "row",
      "comment": {
       "raw": [
        "Row props of the selected cell"
       ]
      },
      "typeValue": {
       "raw": "DataRowProps<TItem, TId>"
      },
      "typeValueRef": "@epam/uui-core:DataRowProps",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DataTableState": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DataTableState",
     "nameFull": "DataTableState<TFilter, TViewState>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataTableState<TFilter, TViewState>",
     "print": [
      "interface DataTableState<TFilter = any, TViewState = any> extends DataSourceState<TFilter> {",
      "    /** Configuration of columns at the DataTable. Used to define column visibility, width and order */",
      "    columnsConfig?: ColumnsConfig;",
      "    /** Configuration of filter at the FilterPanel. Used to define filter visibility and order */",
      "    filtersConfig?: FiltersConfig;",
      "    /** ID of currently selected preset */",
      "    presetId?: number | null;",
      "    /** State which will not trigger data reloading, but will be stored in presets or URL */",
      "    viewState?: TViewState;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "columnsConfig",
      "name": "columnsConfig",
      "comment": {
       "raw": [
        "Configuration of columns at the DataTable. Used to define column visibility, width and order"
       ]
      },
      "typeValue": {
       "raw": "ColumnsConfig"
      },
      "required": false
     },
     {
      "uid": "filtersConfig",
      "name": "filtersConfig",
      "comment": {
       "raw": [
        "Configuration of filter at the FilterPanel. Used to define filter visibility and order"
       ]
      },
      "typeValue": {
       "raw": "FiltersConfig<any>"
      },
      "required": false
     },
     {
      "uid": "presetId",
      "name": "presetId",
      "comment": {
       "raw": [
        "ID of currently selected preset"
       ]
      },
      "typeValue": {
       "raw": "null | number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "viewState",
      "name": "viewState",
      "comment": {
       "raw": [
        "State which will not trigger data reloading, but will be stored in presets or URL"
       ]
      },
      "typeValue": {
       "raw": "TViewState"
      },
      "required": false
     },
     {
      "uid": "search",
      "name": "search",
      "comment": {
       "raw": [
        "Search value, used to filter data based on it.",
        " Included in the API request object when using a LazyDataSource.",
        " For Array and Async data sources, searching is performed internally by the datasource."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:DataSourceState",
      "required": false
     },
     {
      "uid": "checked",
      "name": "checked",
      "comment": {
       "raw": [
        "Array of checked items IDs"
       ]
      },
      "typeValue": {
       "raw": "any[]"
      },
      "from": "@epam/uui-core:DataSourceState",
      "required": false
     },
     {
      "uid": "folded",
      "name": "folded",
      "comment": {
       "raw": [
        "A map of item IDs to their folding state.",
        " If an item ID is present with a `true` value, it's folded; otherwise, it's not folded."
       ]
      },
      "typeValue": {
       "raw": "Record<string, boolean>"
      },
      "from": "@epam/uui-core:DataSourceState",
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "comment": {
       "raw": [
        "Filter value used to filter data based on it.",
        " Included in the API request object when using a LazyDataSource.",
        " For Array and Async data sources, filtering is performed internally by the datasource."
       ]
      },
      "typeValue": {
       "raw": "TFilter"
      },
      "from": "@epam/uui-core:DataSourceState",
      "required": false
     },
     {
      "uid": "sorting",
      "name": "sorting",
      "comment": {
       "raw": [
        "Sorting value, used to sort data based on it.",
        " Included in the API request object when using a LazyDataSource.",
        " For Array and Async data sources, sorting is performed internally by the datasource."
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>[]"
      },
      "from": "@epam/uui-core:DataSourceState",
      "required": false
     },
     {
      "uid": "selectedId",
      "name": "selectedId",
      "comment": {
       "raw": [
        "ID of selected item. It can be only one selected item at the moment."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:DataSourceState",
      "required": false
     },
     {
      "uid": "focusedIndex",
      "name": "focusedIndex",
      "comment": {
       "raw": [
        "Index of currently focused item"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceState",
      "required": false
     },
     {
      "uid": "page",
      "name": "page",
      "comment": {
       "raw": [
        "Current page number"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceState",
      "required": false
     },
     {
      "uid": "pageSize",
      "name": "pageSize",
      "comment": {
       "raw": [
        "The amount of items per page"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceState",
      "required": false
     },
     {
      "uid": "foldAll",
      "name": "foldAll",
      "comment": {
       "raw": [
        "Provides default folding of nodes if the opposite value is not present in the folded map.",
        " It is used to collapse/expand all nodes."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataSourceState",
      "required": false
     },
     {
      "uid": "scrollTo",
      "name": "scrollTo",
      "comment": {
       "raw": [
        "Virtual list ensures that row with this Index is within the visible area, if not Virtual List .",
        " Virtual list updates this value on scroll to null when appear in the visible area.",
        " If this value is updated manually, Virtual List would scroll to the specified items.",
        " It would attempt to put scroll so this item will be at the top of the list."
       ]
      },
      "typeValue": {
       "raw": "ScrollToConfig"
      },
      "from": "@epam/uui-core:VirtualListState",
      "required": false
     },
     {
      "uid": "topIndex",
      "name": "topIndex",
      "comment": {
       "raw": [
        "Index of the topmost item, in rendered batch.",
        " Note - this item might not be visible, as Virtual List maintain some reserve of rows on top / at the bottom of the list"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:VirtualListRange",
      "required": false
     },
     {
      "uid": "visibleCount",
      "name": "visibleCount",
      "comment": {
       "raw": [
        "Number of currently rendered items.",
        " Virtual list updates this value automatically, if it too small.",
        " Note Virtual List renders more items, that actually visible,",
        " as it need maintain some reserve of rows on top / at the bottom of the list."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:VirtualListRange",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DistributiveOmit": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DistributiveOmit",
     "nameFull": "DistributiveOmit<T, K>"
    },
    "src": "uui-core/src/helpers/typeHelpers.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "DistributiveOmit<T, K>",
     "print": [
      "type DistributiveOmit<T, K extends keyof any> = T extends any ? Omit<T, K> : never;"
     ]
    }
   }
  },
  "@epam/uui-core:DndActorProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DndActorProps",
     "nameFull": "DndActorProps<TSrcData, TDstData>"
    },
    "src": "uui-core/src/services/dnd/DndActor.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DndActorProps<TSrcData, TDstData>",
     "print": [
      "interface DndActorProps<TSrcData, TDstData> extends IDndActor<TSrcData, TDstData> {",
      "    /** Render callback for DragActor content */",
      "    render(props: DndActorRenderParams): React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "render",
      "name": "render",
      "comment": {
       "raw": [
        "Render callback for DragActor content"
       ]
      },
      "typeValue": {
       "raw": "(props: DndActorRenderParams) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": true
     },
     {
      "uid": "srcData",
      "name": "srcData",
      "comment": {
       "raw": [
        "Data used when this component acts as a drag source.",
        " If provided, it means this component can be dragged. Can be used in combination with dstData."
       ]
      },
      "typeValue": {
       "raw": "TSrcData"
      },
      "from": "@epam/uui-core:IDndActor",
      "required": false
     },
     {
      "uid": "dstData",
      "name": "dstData",
      "comment": {
       "raw": [
        "Data used when this component acts as a drop destination.",
        " If provided, it means something can be dragged onto this component. Can be used in combination with srcData."
       ]
      },
      "typeValue": {
       "raw": "TDstData"
      },
      "from": "@epam/uui-core:IDndActor",
      "required": false
     },
     {
      "uid": "canAcceptDrop",
      "name": "canAcceptDrop",
      "comment": {
       "raw": [
        "A pure function that gets permitted positions for a drop action"
       ]
      },
      "typeValue": {
       "raw": "(params: AcceptDropParams<TSrcData, TDstData>) => Partial<Record<DropPosition, boolean>> | null"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDndActor",
      "required": false
     },
     {
      "uid": "onDrop",
      "name": "onDrop",
      "comment": {
       "raw": [
        "Called when accepted drop action performed on this actor. Usually used to reorder and update items"
       ]
      },
      "typeValue": {
       "raw": "(data: DropParams<TSrcData, TDstData>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDndActor",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DndActorRenderParams": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DndActorRenderParams",
     "nameFull": "DndActorRenderParams"
    },
    "src": "uui-core/src/types/dnd.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DndActorRenderParams",
     "print": [
      "interface DndActorRenderParams {",
      "    /** True, if the element can be dragged. Doesn't mean that DnD is active. */",
      "    isDraggable: boolean;",
      "    /** True, if the element is dragged out. True for placeholder left when it's element it dragged out. False for Drag Ghost. */",
      "    isDraggedOut: boolean;",
      "    /** True, if the element is rendered as Drag Ghost. All other flags are false for drag ghost. */",
      "    isDragGhost: boolean;",
      "    /** True, if the element is being dragged over, even if drop is not accepted by the element (canAcceptDrop returned false) */",
      "    isDraggedOver: boolean;",
      "    /** True, if the element is being dragged over, and drop on it is accepted - canAcceptDrop returned true */",
      "    isDropAccepted: boolean;",
      "    /** True if any drag and drop operation is in progress, even if the element not being dragged */",
      "    isDndInProgress: boolean;",
      "    /** Drag data associated with the element. Specified always, even if there is no DnD operation happening. */",
      "    dragData?: any;",
      "    /** Drop position. Chosen from accepted drop positions according to pointer coordinates */",
      "    position?: DropPosition;",
      "    /**",
      "     * Event handlers. Component is expected to pass these events to the top element it renders.",
      "     * As onClick event on the element will be overwritten, use DndActorProps.onClick to receive click events on the element",
      "     */",
      "    eventHandlers: DndEventHandlers;",
      "    /**",
      "     * CSS class names to add to the element.",
      "     * Some of these markers are used by the DndActor internally, so they must be added even if no used by component itself to apply styles.",
      "     */",
      "    classNames: string[];",
      "    /** Ref to the DOM element to perform DnD actions */",
      "    ref?: React.Ref<any>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "isDraggable",
      "name": "isDraggable",
      "comment": {
       "raw": [
        "True, if the element can be dragged. Doesn't mean that DnD is active."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": "isDraggedOut",
      "name": "isDraggedOut",
      "comment": {
       "raw": [
        "True, if the element is dragged out. True for placeholder left when it's element it dragged out. False for Drag Ghost."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": "isDragGhost",
      "name": "isDragGhost",
      "comment": {
       "raw": [
        "True, if the element is rendered as Drag Ghost. All other flags are false for drag ghost."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": "isDraggedOver",
      "name": "isDraggedOver",
      "comment": {
       "raw": [
        "True, if the element is being dragged over, even if drop is not accepted by the element (canAcceptDrop returned false)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": "isDropAccepted",
      "name": "isDropAccepted",
      "comment": {
       "raw": [
        "True, if the element is being dragged over, and drop on it is accepted - canAcceptDrop returned true"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": "isDndInProgress",
      "name": "isDndInProgress",
      "comment": {
       "raw": [
        "True if any drag and drop operation is in progress, even if the element not being dragged"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": "dragData",
      "name": "dragData",
      "comment": {
       "raw": [
        "Drag data associated with the element. Specified always, even if there is no DnD operation happening."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "required": false
     },
     {
      "uid": "position",
      "name": "position",
      "comment": {
       "raw": [
        "Drop position. Chosen from accepted drop positions according to pointer coordinates"
       ]
      },
      "typeValue": {
       "raw": "'top' | 'bottom' | 'right' | 'left' | 'inside'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "bottom",
        "right",
        "left",
        "inside"
       ]
      },
      "required": false
     },
     {
      "uid": "eventHandlers",
      "name": "eventHandlers",
      "comment": {
       "raw": [
        "Event handlers. Component is expected to pass these events to the top element it renders.",
        " As onClick event on the element will be overwritten, use DndActorProps.onClick to receive click events on the element"
       ]
      },
      "typeValue": {
       "raw": "DndEventHandlers"
      },
      "required": true
     },
     {
      "uid": "classNames",
      "name": "classNames",
      "comment": {
       "raw": [
        "CSS class names to add to the element.",
        " Some of these markers are used by the DndActor internally, so they must be added even if no used by component itself to apply styles."
       ]
      },
      "typeValue": {
       "raw": "string[]"
      },
      "required": true
     },
     {
      "uid": "ref",
      "name": "ref",
      "comment": {
       "raw": [
        "Ref to the DOM element to perform DnD actions"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DndEventHandlers": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DndEventHandlers",
     "nameFull": "DndEventHandlers"
    },
    "src": "uui-core/src/types/dnd.ts",
    "comment": {
     "raw": [
      "Drag'n'drop handlers."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DndEventHandlers",
     "print": [
      "/**",
      " * Drag'n'drop handlers.",
      " */",
      "interface DndEventHandlers {",
      "    /**",
      "     * Handler of an event which is fired when one or more touch points are placed on the drag marker.",
      "     */",
      "    onTouchStart?(e: React.TouchEvent): void;",
      "    /**",
      "     * Handler of an event which is fired when the device transitions from no buttons pressed to at least one button pressed on the drag marker.",
      "     */",
      "    onPointerDown?(e: React.PointerEvent): void;",
      "    /**",
      "     * Handler of an event which is fired when a pointing device is moved into the hit test boundaries of an element or one of its descendants.",
      "     */",
      "    onPointerEnter?(e: React.PointerEvent<any>): void;",
      "    /**",
      "     * Handler of an event which is fired when a pointer changes coordinates.",
      "     */",
      "    onPointerMove?(e: React.PointerEvent<any>): void;",
      "    /**",
      "     * Handler of an event which is fired when a pointing device is moved out of the hit test boundaries of the drag marker.",
      "     */",
      "    onPointerLeave?(e: React.PointerEvent<any>): void;",
      "    /**",
      "     * Handler of an event which is fired when a pointer is no longer active",
      "     */",
      "    onPointerUp?(e: React.PointerEvent<any>): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "onTouchStart",
      "name": "onTouchStart",
      "comment": {
       "raw": [
        "Handler of an event which is fired when one or more touch points are placed on the drag marker."
       ]
      },
      "typeValue": {
       "raw": "(e: React.TouchEvent<Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "onPointerDown",
      "name": "onPointerDown",
      "comment": {
       "raw": [
        "Handler of an event which is fired when the device transitions from no buttons pressed to at least one button pressed on the drag marker."
       ]
      },
      "typeValue": {
       "raw": "(e: React.PointerEvent<Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "onPointerEnter",
      "name": "onPointerEnter",
      "comment": {
       "raw": [
        "Handler of an event which is fired when a pointing device is moved into the hit test boundaries of an element or one of its descendants."
       ]
      },
      "typeValue": {
       "raw": "(e: React.PointerEvent<any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "onPointerMove",
      "name": "onPointerMove",
      "comment": {
       "raw": [
        "Handler of an event which is fired when a pointer changes coordinates."
       ]
      },
      "typeValue": {
       "raw": "(e: React.PointerEvent<any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "onPointerLeave",
      "name": "onPointerLeave",
      "comment": {
       "raw": [
        "Handler of an event which is fired when a pointing device is moved out of the hit test boundaries of the drag marker."
       ]
      },
      "typeValue": {
       "raw": "(e: React.PointerEvent<any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "onPointerUp",
      "name": "onPointerUp",
      "comment": {
       "raw": [
        "Handler of an event which is fired when a pointer is no longer active"
       ]
      },
      "typeValue": {
       "raw": "(e: React.PointerEvent<any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DragGhostProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DragGhostProps",
     "nameFull": "DragGhostProps"
    },
    "src": "uui-core/src/services/dnd/DragGhost.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DragGhostProps",
     "print": [
      "interface DragGhostProps {",
      "}"
     ]
    }
   }
  },
  "@epam/uui-core:DropdownBodyProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DropdownBodyProps",
     "nameFull": "DropdownBodyProps"
    },
    "src": "uui-core/src/types/components/Dropdown.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DropdownBodyProps",
     "print": [
      "interface DropdownBodyProps extends IDropdownBodyProps {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "onClose",
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the Dropdown body"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "togglerWidth",
      "name": "togglerWidth",
      "comment": {
       "raw": [
        "The width of the toggler, which can be used to adjust the body width to it"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "togglerHeight",
      "name": "togglerHeight",
      "comment": {
       "raw": [
        "The height of the toggler"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "scheduleUpdate",
      "name": "scheduleUpdate",
      "comment": {
       "raw": [
        "Call to force recompute dropdown position"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "Indicates that dropdown is open"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "arrowProps",
      "name": "arrowProps",
      "comment": {
       "raw": [
        "Props that should be provided to the arrow component"
       ]
      },
      "typeValue": {
       "raw": "PopperArrowProps"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "placement",
      "name": "placement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'right' | 'left' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "right",
        "left",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DropdownPlacement": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DropdownPlacement",
     "nameFull": "DropdownPlacement"
    },
    "src": "uui-core/src/types/components/Dropdown.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "Placement",
     "print": [
      "type DropdownPlacement = Placement;"
     ]
    }
   }
  },
  "@epam/uui-core:DropdownProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DropdownProps",
     "nameFull": "DropdownProps"
    },
    "src": "uui-core/src/types/components/Dropdown.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DropdownProps",
     "print": [
      "interface DropdownProps extends Partial<IControlled<boolean>>, IHasForwardedRef<HTMLElement> {",
      "    /**",
      "     * Render callback for the dropdown target.",
      "     * Note, that it's required to pass 'props' parameters to the target component.",
      "     */",
      "    renderTarget: (props: IDropdownTogglerProps) => React.ReactNode;",
      "    /** Render callback for the dropdown body */",
      "    renderBody: (props: DropdownBodyProps) => React.ReactNode;",
      "    /** Called when dropdown was closed */",
      "    onClose?: () => void;",
      "    /** Disable dropdown opening */",
      "    isNotUnfoldable?: boolean;",
      "    /** zIndex for dropdown body",
      "     * By default used value received by LayoutContext",
      "     * */",
      "    zIndex?: number;",
      "    /** Defines dropdown body placement relative to target */",
      "    placement?: DropdownPlacement;",
      "    /** Original popper.js modifiers. See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/} */",
      "    modifiers?: Modifier<any>[];",
      "    /** Defines how much 'ms' user should hold mouse over target to open the dropdown",
      "     * This prop work only with openOnHover={true}",
      "     * @default 0",
      "     * */",
      "    openDelay?: number;",
      "    /** Defines after which delay dropdown will be closed, if user leave mouse from target.",
      "     * This prop work only with openOnHover={true}",
      "     * @default 0",
      "     * */",
      "    closeDelay?: number;",
      "    /** If true, dropdown will be opened by click on toggler.",
      "     * @default true",
      "     * */",
      "    openOnClick?: boolean;",
      "    /** If true, dropdown will be opened by hover on toggler.",
      "     * @default false",
      "     * */",
      "    openOnHover?: boolean;",
      "    /** If true, clicks on target will toggle dropdown open state.",
      "     * If false, click on target will only open dropdown and won't close it.",
      "     * @default true",
      "     * */",
      "    closeOnTargetClick?: boolean;",
      "    /** If true, dropdown will be closed on click outside body or toggler.",
      "     * @default true",
      "     * */",
      "    closeOnClickOutside?: boolean;",
      "    /** Defined when to close dropdown in case of openOnHover={ true }",
      "     * toggler — dropdown will be closed when a mouse leaves the target component",
      "     * boundary — will not to close the dropdown when a mouse is on target or in 30px around target area",
      "     * false — will not close dropdown by mouse move event",
      "     * @default 'toggler'",
      "     * */",
      "    closeOnMouseLeave?: 'toggler' | 'boundary' | false;",
      "    /**",
      "     * Node of portal target, where to render the dropdown body.",
      "     * By default, will be used global portal node.",
      "     * */",
      "    portalTarget?: HTMLElement;",
      "    /**",
      "     * Element relative to which dropdown will calculate position",
      "     * */",
      "    boundaryElement?: Boundary;",
      "    /** Pass false, if you do not want to close the dropdown in case Toggler move out of viewport.",
      "     * @default true",
      "     * */",
      "    closeBodyOnTogglerHidden?: boolean; // default: true;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "renderTarget",
      "name": "renderTarget",
      "comment": {
       "raw": [
        "Render callback for the dropdown target.",
        " Note, that it's required to pass 'props' parameters to the target component."
       ]
      },
      "typeValue": {
       "raw": "(props: IDropdownTogglerProps) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": true
     },
     {
      "uid": "renderBody",
      "name": "renderBody",
      "comment": {
       "raw": [
        "Render callback for the dropdown body"
       ]
      },
      "typeValue": {
       "raw": "(props: DropdownBodyProps) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": true
     },
     {
      "uid": "onClose",
      "name": "onClose",
      "comment": {
       "raw": [
        "Called when dropdown was closed"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "isNotUnfoldable",
      "name": "isNotUnfoldable",
      "comment": {
       "raw": [
        "Disable dropdown opening"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "zIndex",
      "name": "zIndex",
      "comment": {
       "raw": [
        "zIndex for dropdown body",
        " By default used value received by LayoutContext"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "placement",
      "name": "placement",
      "comment": {
       "raw": [
        "Defines dropdown body placement relative to target"
       ]
      },
      "typeValue": {
       "raw": "'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'right' | 'left' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "right",
        "left",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "required": false
     },
     {
      "uid": "modifiers",
      "name": "modifiers",
      "comment": {
       "raw": [
        "Original popper.js modifiers. See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/}"
       ]
      },
      "typeValue": {
       "raw": "(StrictModifier<any> | Partial<Modifier<any, object>>)[]"
      },
      "required": false
     },
     {
      "uid": "openDelay",
      "name": "openDelay",
      "comment": {
       "raw": [
        "Defines how much 'ms' user should hold mouse over target to open the dropdown",
        " This prop work only with openOnHover={true}",
        " @default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "closeDelay",
      "name": "closeDelay",
      "comment": {
       "raw": [
        "Defines after which delay dropdown will be closed, if user leave mouse from target.",
        " This prop work only with openOnHover={true}",
        " @default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "openOnClick",
      "name": "openOnClick",
      "comment": {
       "raw": [
        "If true, dropdown will be opened by click on toggler.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "openOnHover",
      "name": "openOnHover",
      "comment": {
       "raw": [
        "If true, dropdown will be opened by hover on toggler.",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "closeOnTargetClick",
      "name": "closeOnTargetClick",
      "comment": {
       "raw": [
        "If true, clicks on target will toggle dropdown open state.",
        " If false, click on target will only open dropdown and won't close it.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "closeOnClickOutside",
      "name": "closeOnClickOutside",
      "comment": {
       "raw": [
        "If true, dropdown will be closed on click outside body or toggler.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "closeOnMouseLeave",
      "name": "closeOnMouseLeave",
      "comment": {
       "raw": [
        "Defined when to close dropdown in case of openOnHover={ true }",
        " toggler — dropdown will be closed when a mouse leaves the target component",
        " boundary — will not to close the dropdown when a mouse is on target or in 30px around target area",
        " false — will not close dropdown by mouse move event",
        " @default 'toggler'"
       ],
       "tags": {
        "@default": "toggler"
       }
      },
      "typeValue": {
       "raw": "false | 'toggler' | 'boundary'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        "toggler",
        "boundary"
       ]
      },
      "required": false
     },
     {
      "uid": "portalTarget",
      "name": "portalTarget",
      "comment": {
       "raw": [
        "Node of portal target, where to render the dropdown body.",
        " By default, will be used global portal node."
       ]
      },
      "typeValue": {
       "raw": "HTMLElement"
      },
      "required": false
     },
     {
      "uid": "boundaryElement",
      "name": "boundaryElement",
      "comment": {
       "raw": [
        "Element relative to which dropdown will calculate position"
       ]
      },
      "typeValue": {
       "raw": "HTMLElement | HTMLElement[] | 'clippingParents'"
      },
      "required": false
     },
     {
      "uid": "closeBodyOnTogglerHidden",
      "name": "closeBodyOnTogglerHidden",
      "comment": {
       "raw": [
        "Pass false, if you do not want to close the dropdown in case Toggler move out of viewport.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLElement | null) => void | React.MutableRefObject<HTMLElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DropParams": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DropParams",
     "nameFull": "DropParams<TSrcData, TDstData>"
    },
    "src": "uui-core/src/types/dnd.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DropParams<TSrcData, TDstData>",
     "print": [
      "interface DropParams<TSrcData, TDstData> extends AcceptDropParams<TSrcData, TDstData> {",
      "    /** Current drop position, indicates where item will be dropped relative to the destination */",
      "    position: DropPosition;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "position",
      "name": "position",
      "comment": {
       "raw": [
        "Current drop position, indicates where item will be dropped relative to the destination"
       ]
      },
      "typeValue": {
       "raw": "'top' | 'bottom' | 'right' | 'left' | 'inside'"
      },
      "typeValueRef": "@epam/uui-core:DropPosition",
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "bottom",
        "right",
        "left",
        "inside"
       ]
      },
      "required": true
     },
     {
      "uid": "srcData",
      "name": "srcData",
      "comment": {
       "raw": [
        "Source item data. This is the srcData of the actor that is being dropped into."
       ]
      },
      "typeValue": {
       "raw": "TSrcData"
      },
      "from": "@epam/uui-core:AcceptDropParams",
      "required": true
     },
     {
      "uid": "dstData",
      "name": "dstData",
      "comment": {
       "raw": [
        "Destination item data. This is the dstData of the actor into which the drop is performed."
       ]
      },
      "typeValue": {
       "raw": "TDstData"
      },
      "from": "@epam/uui-core:AcceptDropParams",
      "required": false
     },
     {
      "uid": "offsetLeft",
      "name": "offsetLeft",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:AcceptDropParams",
      "required": true
     },
     {
      "uid": "offsetTop",
      "name": "offsetTop",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:AcceptDropParams",
      "required": true
     },
     {
      "uid": "targetWidth",
      "name": "targetWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:AcceptDropParams",
      "required": true
     },
     {
      "uid": "targetHeight",
      "name": "targetHeight",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:AcceptDropParams",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:DropPosition": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DropPosition",
     "nameFull": "DropPosition"
    },
    "src": "uui-core/src/types/dnd.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "'top' | 'bottom' | 'right' | 'left' | 'inside'",
     "print": [
      "type DropPosition = 'top' | 'bottom' | 'left' | 'right' | 'inside';"
     ]
    }
   }
  },
  "@epam/uui-core:DropPositionOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DropPositionOptions",
     "nameFull": "DropPositionOptions<__type>"
    },
    "src": "uui-core/src/types/dnd.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "Partial<Record<DropPosition, boolean>>",
     "print": [
      "type DropPositionOptions = Partial<Record<DropPosition, boolean>>;"
     ]
    }
   }
  },
  "@epam/uui-core:ErrorPageInfo": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ErrorPageInfo",
     "nameFull": "ErrorPageInfo"
    },
    "src": "uui-core/src/services/ErrorContext.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ErrorPageInfo",
     "print": [
      "interface ErrorPageInfo {",
      "    /** Error status code */",
      "    status?: number;",
      "    /** Title of error page */",
      "    title?: React.ReactNode;",
      "    /** Subtitle of error page */",
      "    subtitle?: React.ReactNode;",
      "    /** Url of error image to display on error page */",
      "    imageUrl?: string;",
      "    /** Url of error image to display on error page in case of mobile layout (app width < 720px) */",
      "    mobileImageUrl?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "status",
      "name": "status",
      "comment": {
       "raw": [
        "Error status code"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "title",
      "name": "title",
      "comment": {
       "raw": [
        "Title of error page"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": "subtitle",
      "name": "subtitle",
      "comment": {
       "raw": [
        "Subtitle of error page"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": "imageUrl",
      "name": "imageUrl",
      "comment": {
       "raw": [
        "Url of error image to display on error page"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "mobileImageUrl",
      "name": "mobileImageUrl",
      "comment": {
       "raw": [
        "Url of error image to display on error page in case of mobile layout (app width < 720px)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:FileUploadOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "FileUploadOptions",
     "nameFull": "FileUploadOptions"
    },
    "src": "uui-core/src/services/ApiContext.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "FileUploadOptions",
     "print": [
      "interface FileUploadOptions {",
      "    /** Called during the file uploading, used to track upload progress */",
      "    onProgress?: (progress: number) => any;",
      "    /** Callback to receive the instance of xhr. Can be used to abort the request. */",
      "    getXHR?: (xhr: XMLHttpRequest) => any;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "onProgress",
      "name": "onProgress",
      "comment": {
       "raw": [
        "Called during the file uploading, used to track upload progress"
       ]
      },
      "typeValue": {
       "raw": "(progress: number) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "getXHR",
      "name": "getXHR",
      "comment": {
       "raw": [
        "Callback to receive the instance of xhr. Can be used to abort the request."
       ]
      },
      "typeValue": {
       "raw": "(xhr: XMLHttpRequest) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:FileUploadResponse": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "FileUploadResponse",
     "nameFull": "FileUploadResponse"
    },
    "src": "uui-core/src/services/ApiContext.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "FileUploadResponse",
     "print": [
      "interface FileUploadResponse {",
      "    /** ID of the file */",
      "    id: number;",
      "    /** Name of the file */",
      "    name: string;",
      "    /** File size */",
      "    size: number;",
      "    /** Path to the file source */",
      "    path?: string;",
      "    /** Type of file representation. Used for UUI SlateRTE file displaying. */",
      "    type?: BlockTypes;",
      "    /** Extension of the file */",
      "    extension?: string;",
      "    /** Upload error  */",
      "    error?: {",
      "        /** If true, indicates about error while file uploading */",
      "        isError: boolean;",
      "        /** Error message */",
      "        message?: string;",
      "    };",
      "}"
     ]
    },
    "props": [
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "ID of the file"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": "name",
      "name": "name",
      "comment": {
       "raw": [
        "Name of the file"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "File size"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": "path",
      "name": "path",
      "comment": {
       "raw": [
        "Path to the file source"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "type",
      "name": "type",
      "comment": {
       "raw": [
        "Type of file representation. Used for UUI SlateRTE file displaying."
       ]
      },
      "typeValue": {
       "raw": "'attachment' | 'iframe' | 'image'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "attachment",
        "iframe",
        "image"
       ]
      },
      "required": false
     },
     {
      "uid": "extension",
      "name": "extension",
      "comment": {
       "raw": [
        "Extension of the file"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "error",
      "name": "error",
      "comment": {
       "raw": [
        "Upload error"
       ]
      },
      "typeValue": {
       "raw": "{ isError: boolean; message?: string | undefined; }"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:FilterConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "FilterConfig",
     "nameFull": "FilterConfig<TItem, TFilter>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "FilterConfig<TItem, TFilter>",
     "print": [
      "interface FilterConfig<TItem, TFilter> {",
      "    /**",
      "     * A pure function that returns filter callback to be applied for each item.",
      "     * The callback should return true, if item passed the filter.",
      "     */",
      "    getFilter?(filter: TFilter): (item: TItem) => boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "getFilter",
      "name": "getFilter",
      "comment": {
       "raw": [
        "A pure function that returns filter callback to be applied for each item.",
        " The callback should return true, if item passed the filter."
       ]
      },
      "typeValue": {
       "raw": "(filter: TFilter) => (item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:FilterPredicate": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "FilterPredicate",
     "nameFull": "FilterPredicate<TField>"
    },
    "src": "uui-core/src/types/dataQuery.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "FilterPredicate<TField>",
     "print": [
      "type FilterPredicate<TField> = {",
      "    /** In. Should match some of these values. */",
      "    in?: TField[];",
      "    /** Not In. Should not match some of these values. */",
      "    nin?: TField[];",
      "    /** Should be null */",
      "    isNull?: boolean;",
      "    /** Greater than */",
      "    gt?: TField;",
      "    /** Greater than or equal */",
      "    gte?: TField;",
      "    /** Lower than */",
      "    lt?: TField;",
      "    /** Lower than or equal */",
      "    lte?: TField;",
      "    /** In range. Should be in these range */",
      "    inRange?: RangeValue;",
      "    /** Not in range. Should not be in these range */",
      "    notInRange?: RangeValue;",
      "    /** Equal */",
      "    eq?: TField;",
      "    /** Not equal */",
      "    neq?: TField;",
      "    /** Should not much provide predicates */",
      "    not?: FilterPredicate<TField>;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "in",
      "name": "in",
      "comment": {
       "raw": [
        "In. Should match some of these values."
       ]
      },
      "typeValue": {
       "raw": "TField[]"
      },
      "required": false
     },
     {
      "uid": "nin",
      "name": "nin",
      "comment": {
       "raw": [
        "Not In. Should not match some of these values."
       ]
      },
      "typeValue": {
       "raw": "TField[]"
      },
      "required": false
     },
     {
      "uid": "isNull",
      "name": "isNull",
      "comment": {
       "raw": [
        "Should be null"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "gt",
      "name": "gt",
      "comment": {
       "raw": [
        "Greater than"
       ]
      },
      "typeValue": {
       "raw": "TField"
      },
      "required": false
     },
     {
      "uid": "gte",
      "name": "gte",
      "comment": {
       "raw": [
        "Greater than or equal"
       ]
      },
      "typeValue": {
       "raw": "TField"
      },
      "required": false
     },
     {
      "uid": "lt",
      "name": "lt",
      "comment": {
       "raw": [
        "Lower than"
       ]
      },
      "typeValue": {
       "raw": "TField"
      },
      "required": false
     },
     {
      "uid": "lte",
      "name": "lte",
      "comment": {
       "raw": [
        "Lower than or equal"
       ]
      },
      "typeValue": {
       "raw": "TField"
      },
      "required": false
     },
     {
      "uid": "inRange",
      "name": "inRange",
      "comment": {
       "raw": [
        "In range. Should be in these range"
       ]
      },
      "typeValue": {
       "raw": "RangeValue"
      },
      "required": false
     },
     {
      "uid": "notInRange",
      "name": "notInRange",
      "comment": {
       "raw": [
        "Not in range. Should not be in these range"
       ]
      },
      "typeValue": {
       "raw": "RangeValue"
      },
      "required": false
     },
     {
      "uid": "eq",
      "name": "eq",
      "comment": {
       "raw": [
        "Equal"
       ]
      },
      "typeValue": {
       "raw": "TField"
      },
      "required": false
     },
     {
      "uid": "neq",
      "name": "neq",
      "comment": {
       "raw": [
        "Not equal"
       ]
      },
      "typeValue": {
       "raw": "TField"
      },
      "required": false
     },
     {
      "uid": "not",
      "name": "not",
      "comment": {
       "raw": [
        "Should not much provide predicates"
       ]
      },
      "typeValue": {
       "raw": "FilterPredicate<TField>"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:FilterPredicateName": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "FilterPredicateName",
     "nameFull": "FilterPredicateName"
    },
    "src": "uui-core/src/types/dataQuery.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "'in' | 'nin' | 'isNull' | 'gt' | 'gte' | 'lt' | 'lte' | 'inRange' | 'notInRange' | 'eq' | 'neq' | 'not'",
     "print": [
      "type FilterPredicateName = keyof FilterPredicate<any>;"
     ]
    }
   }
  },
  "@epam/uui-core:FiltersConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "FiltersConfig",
     "nameFull": "FiltersConfig<TFilter>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "FiltersConfig<TFilter>",
     "print": [
      "type FiltersConfig<TFilter = any> = {",
      "    [key in keyof TFilter]: IFilterConfig;",
      "};"
     ]
    }
   }
  },
  "@epam/uui-core:FlattenSearchResultsConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "FlattenSearchResultsConfig",
     "nameFull": "FlattenSearchResultsConfig"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "FlattenSearchResultsConfig",
     "print": [
      "interface FlattenSearchResultsConfig {",
      "    /**",
      "     * Falls back to plain list from tree, if there's search.",
      "     * Default is true.",
      "     *",
      "     * If enabled, and search is active:",
      "     * - API will be called with parentId and parent undefined",
      "     * - getChildCount is ignored, all nodes are assumed to have no children",
      "     *",
      "     * See more here: https://github.com/epam/UUI/issues/8",
      "     */",
      "    flattenSearchResults?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "flattenSearchResults",
      "name": "flattenSearchResults",
      "comment": {
       "raw": [
        "Falls back to plain list from tree, if there's search.",
        " Default is true.",
        "",
        " If enabled, and search is active:",
        " - API will be called with parentId and parent undefined",
        " - getChildCount is ignored, all nodes are assumed to have no children",
        "",
        " See more here: https://github.com/epam/UUI/issues/8"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:FlexCellProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "FlexCellProps",
     "nameFull": "FlexCellProps"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "FlexCellProps",
     "print": [
      "type FlexCellProps = IHasCX & IClickable & IHasRawProps<HTMLAttributes<HTMLDivElement>> & Attributes & IHasChildren & {",
      "    /** CSS width. Set to 'auto' to make FlexCell resize to it's content */",
      "    width?: number | 'auto' | '100%';",
      "    /** CSS min-width */",
      "    minWidth?: number;",
      "    /** Flexbox flex-grow property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-grow) */",
      "    grow?: number;",
      "    /** Flexbox shrink property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-shrink) */",
      "    shrink?: number;",
      "    /** CSS text-align property */",
      "    textAlign?: 'left' | 'center' | 'right';",
      "    /** Flexbox align-self property. Aligns items vertically for horizontal flexbox. [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-align-self) */",
      "    alignSelf?: CSS.AlignSelfProperty;",
      "    /** Standard style attribute. Styles are added to element style, overriding supplied flex styles */",
      "    style?: React.CSSProperties;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "width",
      "name": "width",
      "comment": {
       "raw": [
        "CSS width. Set to 'auto' to make FlexCell resize to it's content"
       ]
      },
      "typeValue": {
       "raw": "number | 'auto' | '100%'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "auto",
        "100%"
       ],
       "scalarTypeOption": "number"
      },
      "required": false
     },
     {
      "uid": "minWidth",
      "name": "minWidth",
      "comment": {
       "raw": [
        "CSS min-width"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "grow",
      "name": "grow",
      "comment": {
       "raw": [
        "Flexbox flex-grow property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-grow)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "shrink",
      "name": "shrink",
      "comment": {
       "raw": [
        "Flexbox shrink property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-shrink)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "textAlign",
      "name": "textAlign",
      "comment": {
       "raw": [
        "CSS text-align property"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left' | 'center'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left",
        "center"
       ]
      },
      "required": false
     },
     {
      "uid": "alignSelf",
      "name": "alignSelf",
      "comment": {
       "raw": [
        "Flexbox align-self property. Aligns items vertically for horizontal flexbox. [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-align-self)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "style",
      "name": "style",
      "comment": {
       "raw": [
        "Standard style attribute. Styles are added to element style, overriding supplied flex styles"
       ]
      },
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:FlexRowProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "FlexRowProps",
     "nameFull": "FlexRowProps"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "FlexRowProps",
     "print": [
      "type FlexRowProps = IHasCX & IClickable & Attributes & IHasChildren & IHasRawProps<HTMLAttributes<HTMLDivElement>> & {",
      "    /** Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)",
      "     * @default 'center'",
      "     * */",
      "    alignItems?: 'top' | 'center' | 'bottom' | 'stretch';",
      "    /** Flexbox justifyContent property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) */",
      "    justifyContent?: 'center' | 'space-between' | 'space-around' | 'space-evenly' | 'start' | 'end';",
      "    /** Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap) */",
      "    columnGap?: number | '6' | '12' | '18' | '24' | '36';",
      "    /** Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap) */",
      "    rowGap?: number | '6' | '12' | '18' | '24' | '36';",
      "};"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "alignItems",
      "name": "alignItems",
      "comment": {
       "raw": [
        "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)",
        " @default 'center'"
       ],
       "tags": {
        "@default": "center"
       }
      },
      "typeValue": {
       "raw": "'top' | 'bottom' | 'center' | 'stretch'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "bottom",
        "center",
        "stretch"
       ]
      },
      "required": false
     },
     {
      "uid": "justifyContent",
      "name": "justifyContent",
      "comment": {
       "raw": [
        "Flexbox justifyContent property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
       ]
      },
      "typeValue": {
       "raw": "'center' | 'space-around' | 'space-between' | 'space-evenly' | 'end' | 'start'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "center",
        "space-around",
        "space-between",
        "space-evenly",
        "end",
        "start"
       ]
      },
      "required": false
     },
     {
      "uid": "columnGap",
      "name": "columnGap",
      "comment": {
       "raw": [
        "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '24' | '36'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "36"
       ],
       "scalarTypeOption": "number"
      },
      "required": false
     },
     {
      "uid": "rowGap",
      "name": "rowGap",
      "comment": {
       "raw": [
        "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '24' | '36'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "36"
       ],
       "scalarTypeOption": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:FormProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "FormProps",
     "nameFull": "FormProps<T>"
    },
    "src": "uui-core/src/data/forms/Form.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "FormProps<T>",
     "print": [
      "interface FormProps<T> {",
      "    /** Current value of the form state */",
      "    value: T;",
      "    /**",
      "     * Render the form body, provided by form state",
      "     * */",
      "    renderForm: (props: IFormApi<T>) => ReactNode;",
      "    /**",
      "     * Returns form metadata - information used to validate the form.",
      "     * @param state Metadata can depend on state, and will be re-computed on updates",
      "     */",
      "    getMetadata?(state: T): Metadata<T>;",
      "    /**",
      "     * Occurs when 'save' function is called on Form.",
      "     * Should save form data (usually with API call to server).",
      "     * Server can also reject form, and provide validation errors in response.",
      "     * @param state Form state to save",
      "     */",
      "    onSave(state: T): Promise<FormSaveResponse<T> | void>;",
      "    /**",
      "     * Called when form is unmounted, but user still have unsaved changes.",
      "     * Accepts a Promise<boolean | 'remain'> to be returned.",
      "     * If promise resolves to true - save procedure is performed.",
      "     * If promise resolves to false - localStorage will be cleaned.",
      "     * If promise resolves to 'remain' - localStorage remain as was and changes in form not saves.",
      "     * The common use-case is to show a modal with \"Save Changes?\" dialog",
      "     * Skins usually implement this as default behavior. To prevent it, you can pass null to this prop to override it.",
      "     */",
      "    beforeLeave?: ((nextLocation: Link, currentLocation: Link) => Promise<boolean | 'remain'>) | null;",
      "    /**",
      "     * Used to restore unsaved user edits from the last session (usually to localstorage, via uuiUserSettings context)",
      "     * If unsaved changes are detected, this callback is called. If it is resolved - the form restores unsaved edits.",
      "     * The common use-case is to show a modal with \"You have unsaved changes, restore them?\" dialog",
      "     * Skins usually implement this as default behavior. To prevent it, you can pass null to this prop to override it.",
      "     */",
      "    loadUnsavedChanges?: () => Promise<void>;",
      "    /**",
      "     * Called after successful save.",
      "     * @param state Saved state",
      "     * @param isSavedBeforeLeave true, if save is triggered via leaving the page, and \"Save Changes?\" dialog",
      "     */",
      "    onSuccess?(state: T, isSavedBeforeLeave?: boolean): any;",
      "    /** Called when save fails */",
      "    onError?(error: any): any;",
      "    /**",
      "     * The key, under which form save unsaved state usually to localstorage, via uuiUserSettings context)",
      "     */",
      "    settingsKey?: string;",
      "    /**",
      "     * Controls when form validation occurs:",
      "     * save (default, recommended) - form is validated on save. If form is invalid - it will be revalidated on every change, until become valid",
      "     * change - form is validated on every user change. Only fields changes in current edit session are validated",
      "     */",
      "    validationOn?: ValidationMode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "Current value of the form state"
       ]
      },
      "typeValue": {
       "raw": "T"
      },
      "required": true
     },
     {
      "uid": "renderForm",
      "name": "renderForm",
      "comment": {
       "raw": [
        "Render the form body, provided by form state"
       ]
      },
      "typeValue": {
       "raw": "(props: IFormApi<T>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": true
     },
     {
      "uid": "getMetadata",
      "name": "getMetadata",
      "comment": {
       "raw": [
        "Returns form metadata - information used to validate the form.",
        " @param state Metadata can depend on state, and will be re-computed on updates"
       ]
      },
      "typeValue": {
       "raw": "(state: T) => Metadata<T>"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "onSave",
      "name": "onSave",
      "comment": {
       "raw": [
        "Occurs when 'save' function is called on Form.",
        " Should save form data (usually with API call to server).",
        " Server can also reject form, and provide validation errors in response.",
        " @param state Form state to save"
       ]
      },
      "typeValue": {
       "raw": "(state: T) => Promise<void | FormSaveResponse<T>>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "beforeLeave",
      "name": "beforeLeave",
      "comment": {
       "raw": [
        "Called when form is unmounted, but user still have unsaved changes.",
        " Accepts a Promise<boolean | 'remain'> to be returned.",
        " If promise resolves to true - save procedure is performed.",
        " If promise resolves to false - localStorage will be cleaned.",
        " If promise resolves to 'remain' - localStorage remain as was and changes in form not saves.",
        " The common use-case is to show a modal with \"Save Changes?\" dialog",
        " Skins usually implement this as default behavior. To prevent it, you can pass null to this prop to override it."
       ]
      },
      "typeValue": {
       "raw": "null | (nextLocation: Link, currentLocation: Link) => Promise<boolean | 'remain'>"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "loadUnsavedChanges",
      "name": "loadUnsavedChanges",
      "comment": {
       "raw": [
        "Used to restore unsaved user edits from the last session (usually to localstorage, via uuiUserSettings context)",
        " If unsaved changes are detected, this callback is called. If it is resolved - the form restores unsaved edits.",
        " The common use-case is to show a modal with \"You have unsaved changes, restore them?\" dialog",
        " Skins usually implement this as default behavior. To prevent it, you can pass null to this prop to override it."
       ]
      },
      "typeValue": {
       "raw": "() => Promise<void>"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "onSuccess",
      "name": "onSuccess",
      "comment": {
       "raw": [
        "Called after successful save.",
        " @param state Saved state",
        " @param isSavedBeforeLeave true, if save is triggered via leaving the page, and \"Save Changes?\" dialog"
       ]
      },
      "typeValue": {
       "raw": "(state: T, isSavedBeforeLeave?: boolean | undefined) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "onError",
      "name": "onError",
      "comment": {
       "raw": [
        "Called when save fails"
       ]
      },
      "typeValue": {
       "raw": "(error: any) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "settingsKey",
      "name": "settingsKey",
      "comment": {
       "raw": [
        "The key, under which form save unsaved state usually to localstorage, via uuiUserSettings context)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "validationOn",
      "name": "validationOn",
      "comment": {
       "raw": [
        "Controls when form validation occurs:",
        " save (default, recommended) - form is validated on save. If form is invalid - it will be revalidated on every change, until become valid",
        " change - form is validated on every user change. Only fields changes in current edit session are validated"
       ]
      },
      "typeValue": {
       "raw": "'change' | 'save'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "change",
        "save"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:FormSaveResponse": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "FormSaveResponse",
     "nameFull": "FormSaveResponse<T>"
    },
    "src": "uui-core/src/data/forms/Form.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "FormSaveResponse<T>",
     "print": [
      "interface FormSaveResponse<T> {",
      "    /** New form value, which will replace previous one */",
      "    form?: T;",
      "    /** Server-side validation state. It's applied in priority over client validation. */",
      "    validation?: ValidationState;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "form",
      "name": "form",
      "comment": {
       "raw": [
        "New form value, which will replace previous one"
       ]
      },
      "typeValue": {
       "raw": "T"
      },
      "required": false
     },
     {
      "uid": "validation",
      "name": "validation",
      "comment": {
       "raw": [
        "Server-side validation state. It's applied in priority over client validation."
       ]
      },
      "typeValue": {
       "raw": "ValidationState"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IAdaptiveItem": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IAdaptiveItem",
     "nameFull": "IAdaptiveItem"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IAdaptiveItem",
     "print": [
      "// TBD: remove when MainMenu old api of items providing will be removed",
      "interface IAdaptiveItem {",
      "    estimatedWidth?: number;",
      "    priority?: number;",
      "    showInBurgerMenu?: boolean;",
      "    collapseToMore?: boolean;",
      "    collapsedContainer?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "estimatedWidth",
      "name": "estimatedWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "priority",
      "name": "priority",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "showInBurgerMenu",
      "name": "showInBurgerMenu",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "collapseToMore",
      "name": "collapseToMore",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "collapsedContainer",
      "name": "collapsedContainer",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IAnalyticableClick": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IAnalyticableClick",
     "nameFull": "IAnalyticableClick"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IAnalyticableClick",
     "print": [
      "interface IAnalyticableClick {",
      "    /**",
      "     * An analytics event to send (via AnalyticsContext) when component is clicked.",
      "     * See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts).",
      "     */",
      "    clickAnalyticsEvent?: AnalyticsEvent;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IAnalyticableOnChange": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IAnalyticableOnChange",
     "nameFull": "IAnalyticableOnChange<T>"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IAnalyticableOnChange<T>",
     "print": [
      "interface IAnalyticableOnChange<T> {",
      "    /**",
      "     * Given a value, returns an analytics event to send when component is edited.",
      "     * See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts).",
      "     */",
      "    getValueChangeAnalyticsEvent?: (newValue: T | null, oldValue: T | null) => AnalyticsEvent;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: T | null, oldValue: T | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IAnalyticsContext": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IAnalyticsContext",
     "nameFull": "IAnalyticsContext"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IAnalyticsContext",
     "print": [
      "interface IAnalyticsContext {",
      "    /** Sends event to the all listeners */",
      "    sendEvent(event?: AnalyticsEvent): void;",
      "    /** Adds analytic event listener */",
      "    addListener(listener: IAnalyticsListener): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "sendEvent",
      "name": "sendEvent",
      "comment": {
       "raw": [
        "Sends event to the all listeners"
       ]
      },
      "typeValue": {
       "raw": "(event?: AnalyticsEvent | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "addListener",
      "name": "addListener",
      "comment": {
       "raw": [
        "Adds analytic event listener"
       ]
      },
      "typeValue": {
       "raw": "(listener: IAnalyticsListener) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IAnalyticsListener": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IAnalyticsListener",
     "nameFull": "IAnalyticsListener"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IAnalyticsListener",
     "print": [
      "interface IAnalyticsListener {",
      "    /** Defines how to send event to the analytics system */",
      "    sendEvent(event: AnalyticsEvent, parameters: Omit<AnalyticsEvent, 'name'>, eventType?: 'event' | 'pageView' | 'apiTiming'): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "sendEvent",
      "name": "sendEvent",
      "comment": {
       "raw": [
        "Defines how to send event to the analytics system"
       ]
      },
      "typeValue": {
       "raw": "(event: AnalyticsEvent, parameters: Omit<AnalyticsEvent, 'name'>, eventType?: 'event' | 'pageView' | 'apiTiming' | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IApiContext": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IApiContext",
     "nameFull": "IApiContext"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IApiContext",
     "print": [
      "interface IApiContext extends IBaseContext {",
      "    /** Current status of api service.",
      "     * idle - service do nothing and ready to process new requests",
      "     * running - service is currently processing requests",
      "     * error - service received an error and stop processing requests, due to this error will be discarded",
      "     * recovery - service trying to restore connection and recover latest requests",
      "     * */",
      "    readonly status: ApiStatus;",
      "    /** Reason of why api trying to recover connection */",
      "    readonly recoveryReason: ApiRecoveryReason | null;",
      "    /** Returns currently processing or failed requests */",
      "    getActiveCalls(status?: ApiCallStatus): ApiCallInfo[];",
      "    /** Resets all errors */",
      "    reset(): void;",
      "    /** Starts fetch call with providing params */",
      "    processRequest: IProcessRequest;",
      "    /** Starts file uploading using FormData */",
      "    uploadFile(url: string, file: File, options?: FileUploadOptions): Promise<FileUploadResponse>;",
      "    /** Url to the relogin page. Used to open new browser window by this path, in case of auth lost error.",
      "     * Opened by this path page, should process authentication and then post 'authSuccess' cross-window message to the opener, to recover failed requests.",
      "     * @default '/auth/login'",
      "     * */",
      "    apiReloginPath: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "status",
      "name": "status",
      "comment": {
       "raw": [
        "Current status of api service.",
        " idle - service do nothing and ready to process new requests",
        " running - service is currently processing requests",
        " error - service received an error and stop processing requests, due to this error will be discarded",
        " recovery - service trying to restore connection and recover latest requests"
       ]
      },
      "typeValue": {
       "raw": "'running' | 'error' | 'idle' | 'recovery'"
      },
      "typeValueRef": "@epam/uui-core:ApiStatus",
      "editor": {
       "type": "oneOf",
       "options": [
        "running",
        "error",
        "idle",
        "recovery"
       ]
      },
      "required": true
     },
     {
      "uid": "recoveryReason",
      "name": "recoveryReason",
      "comment": {
       "raw": [
        "Reason of why api trying to recover connection"
       ]
      },
      "typeValue": {
       "raw": "null | 'auth-lost' | 'connection-lost' | 'server-overload' | 'maintenance'"
      },
      "typeValueRef": "@epam/uui-core:ApiRecoveryReason",
      "editor": {
       "type": "oneOf",
       "options": [
        "auth-lost",
        "connection-lost",
        "server-overload",
        "maintenance",
        null
       ]
      },
      "required": false
     },
     {
      "uid": "getActiveCalls",
      "name": "getActiveCalls",
      "comment": {
       "raw": [
        "Returns currently processing or failed requests"
       ]
      },
      "typeValue": {
       "raw": "(status?: ApiCallStatus | undefined) => ApiCallInfo[]"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "reset",
      "name": "reset",
      "comment": {
       "raw": [
        "Resets all errors"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "processRequest",
      "name": "processRequest",
      "comment": {
       "raw": [
        "Starts fetch call with providing params"
       ]
      },
      "typeValue": {
       "raw": "IProcessRequest"
      },
      "typeValueRef": "@epam/uui-core:IProcessRequest",
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "uploadFile",
      "name": "uploadFile",
      "comment": {
       "raw": [
        "Starts file uploading using FormData"
       ]
      },
      "typeValue": {
       "raw": "(url: string, file: File, options?: FileUploadOptions | undefined) => Promise<FileUploadResponse>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "apiReloginPath",
      "name": "apiReloginPath",
      "comment": {
       "raw": [
        "Url to the relogin page. Used to open new browser window by this path, in case of auth lost error.",
        " Opened by this path page, should process authentication and then post 'authSuccess' cross-window message to the opener, to recover failed requests.",
        " @default '/auth/login'"
       ],
       "tags": {
        "@default": "/auth/login"
       }
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": "subscribe",
      "name": "subscribe",
      "comment": {
       "raw": [
        "Add your handler, which will be called on context updates"
       ]
      },
      "typeValue": {
       "raw": "(handler: (state: {}) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     },
     {
      "uid": "unsubscribe",
      "name": "unsubscribe",
      "comment": {
       "raw": [
        "Unsubscribe from context updates"
       ]
      },
      "typeValue": {
       "raw": "(handler: (state: {}) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     },
     {
      "uid": "destroyContext",
      "name": "destroyContext",
      "comment": {
       "raw": [
        "Manually destroy context and unsubscribe from all listeners"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IBaseContext": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IBaseContext",
     "nameFull": "IBaseContext<TState>"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IBaseContext<TState>",
     "print": [
      "interface IBaseContext<TState = {}> {",
      "    /** Add your handler, which will be called on context updates */",
      "    subscribe(handler: (state: TState) => void): void;",
      "    /** Unsubscribe from context updates */",
      "    unsubscribe(handler: (state: TState) => void): void;",
      "    /** Manually destroy context and unsubscribe from all listeners  */",
      "    destroyContext: () => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "subscribe",
      "name": "subscribe",
      "comment": {
       "raw": [
        "Add your handler, which will be called on context updates"
       ]
      },
      "typeValue": {
       "raw": "(handler: (state: TState) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "unsubscribe",
      "name": "unsubscribe",
      "comment": {
       "raw": [
        "Unsubscribe from context updates"
       ]
      },
      "typeValue": {
       "raw": "(handler: (state: TState) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "destroyContext",
      "name": "destroyContext",
      "comment": {
       "raw": [
        "Manually destroy context and unsubscribe from all listeners"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IBasicPickerToggler": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IBasicPickerToggler",
     "nameFull": "IBasicPickerToggler"
    },
    "src": "uui-core/src/types/pickers.ts",
    "comment": {
     "raw": [
      "Component can be used as Toggler control for pickers.",
      " This interface is enough for basic pickers.",
      " Picker togglers with search or advanced selection display should implement IPickerToggler interface"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IBasicPickerToggler",
     "print": [
      "/**",
      " * Component can be used as Toggler control for pickers.",
      " * This interface is enough for basic pickers.",
      " * Picker togglers with search or advanced selection display should implement IPickerToggler interface",
      " */",
      "interface IBasicPickerToggler extends IDropdownTogglerProps {",
      "    /** Call to clear toggler value */",
      "    onClear?(e?: any): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "onClear",
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "toggleDropdownOpening",
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownTogglerProps",
      "required": false
     },
     {
      "uid": "isInteractedOutside",
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownTogglerProps",
      "required": false
     },
     {
      "uid": "ref",
      "name": "ref",
      "comment": {
       "raw": [
        "Toggler component ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownTogglerProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ICanBeFixed": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ICanBeFixed",
     "nameFull": "ICanBeFixed"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "ICanBeFixed",
     "print": [
      "type ICanBeFixed = {",
      "    /** If specified, will make column fixed - it would not scroll horizontally */",
      "    fix?: 'left' | 'right';",
      "};"
     ]
    },
    "props": [
     {
      "uid": "fix",
      "name": "fix",
      "comment": {
       "raw": [
        "If specified, will make column fixed - it would not scroll horizontally"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ICanBeInvalid": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ICanBeInvalid",
     "nameFull": "ICanBeInvalid"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component value can be invalid"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ICanBeInvalid",
     "print": [
      "/** Component value can be invalid */",
      "interface ICanBeInvalid {",
      "    /** True if component contains invalid input */",
      "    isInvalid?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ICanBeReadonly": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ICanBeReadonly",
     "nameFull": "ICanBeReadonly"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component can be made read-only"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ICanBeReadonly",
     "print": [
      "/** Component can be made read-only */",
      "interface ICanBeReadonly {",
      "    /** Disable editing. Unlike isDisabled, keep component's value readable. */",
      "    isReadonly?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ICanBeRequired": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ICanBeRequired",
     "nameFull": "ICanBeRequired"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ICanBeRequired",
     "print": [
      "interface ICanBeRequired {",
      "    /** Marks that component's value is required and shouldn't be empty */",
      "    isRequired?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ICanFocus": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ICanFocus",
     "nameFull": "ICanFocus<T>"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component can get input focus"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ICanFocus<T>",
     "print": [
      "/** Component can get input focus */",
      "interface ICanFocus<T> {",
      "    /** Called when component gets input focus */",
      "    onFocus?: (e: React.FocusEvent<T>) => void;",
      "    /** Called when component looses input focus */",
      "    onBlur?: (e: React.FocusEvent<T>) => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<T, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<T, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ICanRedirect": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ICanRedirect",
     "nameFull": "ICanRedirect"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component acts as a link, and can redirect"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ICanRedirect",
     "print": [
      "/** Component acts as a link, and can redirect */",
      "interface ICanRedirect {",
      "    /** Link object to redirect to for SPA-redirects */",
      "    link?: Link;",
      "    /** Href (URL) to redirect to, for non-SPA redirects */",
      "    href?: string;",
      "    /** Highlights component to show that link is active (browser is displaying the page to which link is pointing) */",
      "    isLinkActive?: boolean;",
      "    /** Controls where the link should be opened */",
      "    target?: '_blank';",
      "}"
     ]
    },
    "props": [
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ICheckable": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ICheckable",
     "nameFull": "ICheckable"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "ICheckable",
     "print": [
      "type ICheckable = IEditable<boolean> & IDisableable & {",
      "    /** Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values */",
      "    indeterminate?: boolean;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "indeterminate",
      "name": "indeterminate",
      "comment": {
       "raw": [
        "Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IClickable": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IClickable",
     "nameFull": "IClickable"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component supports click action"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IClickable",
     "print": [
      "/** Component supports click action */",
      "interface IClickable {",
      "    /** Called when component is clicked */",
      "    onClick?(e?: any): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IColumnConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IColumnConfig",
     "nameFull": "IColumnConfig"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "IColumnConfig",
     "print": [
      "type IColumnConfig = {",
      "    /** If true, the column will be shown in the FiltersPanel */",
      "    isVisible?: boolean;",
      "    /**",
      "     * Determines the order in which this column should appear in the table.",
      "     * The columns are sorted in ascending alphabetical order.",
      "     */",
      "    order?: string;",
      "    /** The width of the column */",
      "    width?: number;",
      "} & ICanBeFixed;"
     ]
    },
    "props": [
     {
      "uid": "isVisible",
      "name": "isVisible",
      "comment": {
       "raw": [
        "If true, the column will be shown in the FiltersPanel"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "order",
      "name": "order",
      "comment": {
       "raw": [
        "Determines the order in which this column should appear in the table.",
        " The columns are sorted in ascending alphabetical order."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "width",
      "name": "width",
      "comment": {
       "raw": [
        "The width of the column"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "fix",
      "name": "fix",
      "comment": {
       "raw": [
        "If specified, will make column fixed - it would not scroll horizontally"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left"
       ]
      },
      "from": "@epam/uui-core:ICanBeFixed",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:Icon": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "Icon",
     "nameFull": "Icon<any>"
    },
    "src": "uui-core/src/types/objects.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "Icon",
     "print": [
      "type Icon = React.FC<any>;"
     ]
    }
   }
  },
  "@epam/uui-core:IContextProviderSsrProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IContextProviderSsrProps",
     "nameFull": "IContextProviderSsrProps<TApi, TAppContext>"
    },
    "src": "uui-core/src/ssr/useUuiServicesSsr.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IContextProviderSsrProps<TApi, TAppContext>",
     "print": [
      "interface IContextProviderSsrProps<TApi, TAppContext> extends UseUuiServicesProps<TApi, TAppContext> {",
      "    router: any;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "router",
      "name": "router",
      "typeValue": {
       "raw": "any"
      },
      "required": true
     },
     {
      "uid": "appContext",
      "name": "appContext",
      "comment": {
       "raw": [
        "AppContext value"
       ]
      },
      "typeValue": {
       "raw": "TAppContext"
      },
      "from": "@epam/uui-core:UseUuiServicesProps",
      "required": false
     },
     {
      "uid": "apiDefinition",
      "name": "apiDefinition",
      "comment": {
       "raw": [
        "Function to get the api definitions.",
        " Usually, api definitions this is an object which contain object with all api requests of the app.",
        " Then you can call this requests via 'uuiContext.api.myApi(myData)'"
       ]
      },
      "typeValue": {
       "raw": "(processRequest: IProcessRequest) => TApi"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:UuiServicesProps",
      "required": false
     },
     {
      "uid": "apiReloginPath",
      "name": "apiReloginPath",
      "comment": {
       "raw": [
        "Url to the relogin page. Used to open new browser window by this path, in case of auth lost error.",
        " Opened by this path page, should process authentication and then post 'authSuccess' cross-window message to the opener, to recover failed requests.",
        " @default '/auth/login'"
       ],
       "tags": {
        "@default": "/auth/login"
       }
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     },
     {
      "uid": "apiPingPath",
      "name": "apiPingPath",
      "comment": {
       "raw": [
        "Url to the api, which ApiContext will start pinging in case of 'connection lost', until it gets 200 status. Then it will retry failed requests.",
        " @default '/auth/ping'"
       ],
       "tags": {
        "@default": "/auth/ping"
       }
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     },
     {
      "uid": "apiServerUrl",
      "name": "apiServerUrl",
      "comment": {
       "raw": [
        "Url to the server api under which all requests will be processed. Usefully for cases, when all api located by some specific url, which is not much app url.",
        " @default ''"
       ],
       "tags": {
        "@default": ""
       }
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     },
     {
      "uid": "fetch",
      "name": "fetch",
      "comment": {
       "raw": [
        "Allows to replace fetch implementation, for adding auth headers, mocking for testing, etc.",
        " By default, standard fetch will be used."
       ]
      },
      "typeValue": {
       "raw": "typeof fetch"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IControlled": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IControlled",
     "nameFull": "IControlled<T>"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IControlled<T>",
     "print": [
      "interface IControlled<T> {",
      "    /** The current value of component */",
      "    value: T;",
      "    /** Called when value needs to be changed (usually due to user interaction) */",
      "    onValueChange(newValue: T): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "T"
      },
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: T) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IDataSource": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IDataSource",
     "nameFull": "IDataSource<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IDataSource<TItem, TId, TFilter>",
     "print": [
      "interface IDataSource<TItem, TId, TFilter> {",
      "    getId(item: TItem): TId;",
      "    getById(id: TId): TItem | void;",
      "    setItem(item: TItem): void;",
      "    useView(value: DataSourceState<any, TId>, onValueChange: SetDataSourceState<TFilter, TId>, options?: any, deps?: any[]): IDataSourceView<TItem, TId, TFilter>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "getId",
      "name": "getId",
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "getById",
      "name": "getById",
      "typeValue": {
       "raw": "(id: TId) => void | TItem"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "setItem",
      "name": "setItem",
      "typeValue": {
       "raw": "(item: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "useView",
      "name": "useView",
      "typeValue": {
       "raw": "(value: DataSourceState<any, TId>, onValueChange: SetDataSourceState<TFilter, TId>, options?: any, deps?: any[] | undefined) => IDataSourceView<TItem, TId, TFilter>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IDataSourceView": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IDataSourceView",
     "nameFull": "IDataSourceView<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "IDataSourceView<TItem, TId, TFilter>",
     "print": [
      "// eslint-disable-next-line @typescript-eslint/no-unused-vars",
      "type IDataSourceView<TItem, TId, TFilter> = {",
      "    getConfig(): IDataSourceViewConfig;",
      "    getById(id: TId, index: number): DataRowProps<TItem, TId>;",
      "    getListProps(): DataSourceListProps;",
      "    getVisibleRows(): DataRowProps<TItem, TId>[];",
      "    getSelectedRowsCount(): number;",
      "    reload(): void;",
      "    clearAllChecked(): void;",
      "    selectAll?: ICheckable;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "getConfig",
      "name": "getConfig",
      "typeValue": {
       "raw": "() => IDataSourceViewConfig"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "getById",
      "name": "getById",
      "typeValue": {
       "raw": "(id: TId, index: number) => DataRowProps<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "getListProps",
      "name": "getListProps",
      "typeValue": {
       "raw": "() => DataSourceListProps"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "getVisibleRows",
      "name": "getVisibleRows",
      "typeValue": {
       "raw": "() => DataRowProps<TItem, TId>[]"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "getSelectedRowsCount",
      "name": "getSelectedRowsCount",
      "typeValue": {
       "raw": "() => number"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "reload",
      "name": "reload",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "clearAllChecked",
      "name": "clearAllChecked",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "selectAll",
      "name": "selectAll",
      "typeValue": {
       "raw": "ICheckable"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IDataSourceViewConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IDataSourceViewConfig",
     "nameFull": "IDataSourceViewConfig"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "IDataSourceViewConfig",
     "print": [
      "type IDataSourceViewConfig = {",
      "    complexIds?: boolean;",
      "    cascadeSelection?: CascadeSelection;",
      "    selectAll?: true | false;",
      "    backgroundReload?: boolean;",
      "    flattenSearchResults?: boolean;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "complexIds",
      "name": "complexIds",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "cascadeSelection",
      "name": "cascadeSelection",
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "required": false
     },
     {
      "uid": "selectAll",
      "name": "selectAll",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "backgroundReload",
      "name": "backgroundReload",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "flattenSearchResults",
      "name": "flattenSearchResults",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IDisableable": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IDisableable",
     "nameFull": "IDisableable"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component can be disabled"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IDisableable",
     "print": [
      "/** Component can be disabled */",
      "interface IDisableable {",
      "    /** Disable editing, and visually de-emphasize value of the component */",
      "    isDisabled?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IDndActor": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IDndActor",
     "nameFull": "IDndActor<TSrcData, TDstData>"
    },
    "src": "uui-core/src/types/dnd.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IDndActor<TSrcData, TDstData>",
     "print": [
      "interface IDndActor<TSrcData, TDstData> {",
      "    /** Data used when this component acts as a drag source.",
      "     * If provided, it means this component can be dragged. Can be used in combination with dstData.",
      "     */",
      "    srcData?: TSrcData;",
      "    /** Data used when this component acts as a drop destination.",
      "     * If provided, it means something can be dragged onto this component. Can be used in combination with srcData.",
      "     */",
      "    dstData?: TDstData;",
      "    /** A pure function that gets permitted positions for a drop action */",
      "    canAcceptDrop?(params: AcceptDropParams<TSrcData, TDstData>): DropPositionOptions | null;",
      "    /** Called when accepted drop action performed on this actor. Usually used to reorder and update items */",
      "    onDrop?(data: DropParams<TSrcData, TDstData>): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "srcData",
      "name": "srcData",
      "comment": {
       "raw": [
        "Data used when this component acts as a drag source.",
        " If provided, it means this component can be dragged. Can be used in combination with dstData."
       ]
      },
      "typeValue": {
       "raw": "TSrcData"
      },
      "required": false
     },
     {
      "uid": "dstData",
      "name": "dstData",
      "comment": {
       "raw": [
        "Data used when this component acts as a drop destination.",
        " If provided, it means something can be dragged onto this component. Can be used in combination with srcData."
       ]
      },
      "typeValue": {
       "raw": "TDstData"
      },
      "required": false
     },
     {
      "uid": "canAcceptDrop",
      "name": "canAcceptDrop",
      "comment": {
       "raw": [
        "A pure function that gets permitted positions for a drop action"
       ]
      },
      "typeValue": {
       "raw": "(params: AcceptDropParams<TSrcData, TDstData>) => Partial<Record<DropPosition, boolean>> | null"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "onDrop",
      "name": "onDrop",
      "comment": {
       "raw": [
        "Called when accepted drop action performed on this actor. Usually used to reorder and update items"
       ]
      },
      "typeValue": {
       "raw": "(data: DropParams<TSrcData, TDstData>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IDndContext": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IDndContext",
     "nameFull": "IDndContext"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IDndContext",
     "print": [
      "interface IDndContext extends IBaseContext<DndContextState> {",
      "    startDrag(node: Node, data: any, renderGhost: () => React.ReactNode): void;",
      "    endDrag(): void;",
      "    /** Indicates that drag in progress */",
      "    isDragging: boolean;",
      "    dragData?: any;",
      "    getMouseCoords: () => TMouseCoords;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "startDrag",
      "name": "startDrag",
      "typeValue": {
       "raw": "(node: Node, data: any, renderGhost: () => React.ReactNode) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "endDrag",
      "name": "endDrag",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "isDragging",
      "name": "isDragging",
      "comment": {
       "raw": [
        "Indicates that drag in progress"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": "dragData",
      "name": "dragData",
      "typeValue": {
       "raw": "any"
      },
      "required": false
     },
     {
      "uid": "getMouseCoords",
      "name": "getMouseCoords",
      "typeValue": {
       "raw": "() => TMouseCoords"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "subscribe",
      "name": "subscribe",
      "comment": {
       "raw": [
        "Add your handler, which will be called on context updates"
       ]
      },
      "typeValue": {
       "raw": "(handler: (state: DndContextState) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     },
     {
      "uid": "unsubscribe",
      "name": "unsubscribe",
      "comment": {
       "raw": [
        "Unsubscribe from context updates"
       ]
      },
      "typeValue": {
       "raw": "(handler: (state: DndContextState) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     },
     {
      "uid": "destroyContext",
      "name": "destroyContext",
      "comment": {
       "raw": [
        "Manually destroy context and unsubscribe from all listeners"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IDropdownBodyProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IDropdownBodyProps",
     "nameFull": "IDropdownBodyProps"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IDropdownBodyProps",
     "print": [
      "interface IDropdownBodyProps {",
      "    /** Call to close the Dropdown body */",
      "    onClose?: () => void;",
      "    /** The width of the toggler, which can be used to adjust the body width to it */",
      "    togglerWidth?: number;",
      "    /** The height of the toggler */",
      "    togglerHeight?: number;",
      "    /** Call to force recompute dropdown position */",
      "    scheduleUpdate?: () => void;",
      "    /** Indicates that dropdown is open */",
      "    isOpen?: boolean;",
      "    /** Props that should be provided to the arrow component */",
      "    arrowProps?: PopperArrowProps;",
      "    /** Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/) */",
      "    placement?: Placement;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "onClose",
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the Dropdown body"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "togglerWidth",
      "name": "togglerWidth",
      "comment": {
       "raw": [
        "The width of the toggler, which can be used to adjust the body width to it"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "togglerHeight",
      "name": "togglerHeight",
      "comment": {
       "raw": [
        "The height of the toggler"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "scheduleUpdate",
      "name": "scheduleUpdate",
      "comment": {
       "raw": [
        "Call to force recompute dropdown position"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "Indicates that dropdown is open"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "arrowProps",
      "name": "arrowProps",
      "comment": {
       "raw": [
        "Props that should be provided to the arrow component"
       ]
      },
      "typeValue": {
       "raw": "PopperArrowProps"
      },
      "required": false
     },
     {
      "uid": "placement",
      "name": "placement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'right' | 'left' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "right",
        "left",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IDropdownToggler": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IDropdownToggler",
     "nameFull": "IDropdownToggler"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component can be used as Toggler control for dropdown menus"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IDropdownToggler",
     "print": [
      "/** Component can be used as Toggler control for dropdown menus */",
      "interface IDropdownToggler {",
      "    /** When isDropdown=true, indicate that dropdown is open with chevron icon */",
      "    isOpen?: boolean;",
      "    /** Shows chevron icon, enabling component to act as dropdown toggler */",
      "    isDropdown?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IDropdownTogglerProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IDropdownTogglerProps",
     "nameFull": "IDropdownTogglerProps"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IDropdownTogglerProps",
     "print": [
      "interface IDropdownTogglerProps extends IDropdownToggler, IClickable {",
      "    /** Called when associated dropdown should open or close  */",
      "    toggleDropdownOpening?: (value: boolean) => void;",
      "    /** Called when component is interacted outside, to close the dropdown */",
      "    isInteractedOutside?: (event: Event) => boolean;",
      "    /** Toggler component ref */",
      "    ref?: React.Ref<any>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "toggleDropdownOpening",
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "isInteractedOutside",
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "ref",
      "name": "ref",
      "comment": {
       "raw": [
        "Toggler component ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IEditable": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IEditable",
     "nameFull": "IEditable<T>"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component displays an editable value. Text Input is a basic example."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IEditable<T>",
     "print": [
      "/** Component displays an editable value. Text Input is a basic example. */",
      "interface IEditable<T> extends ICanBeInvalid, IDisableable, ICanBeReadonly, ICanBeRequired, IControlled<T> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "T"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: T) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IEditableDebouncerOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IEditableDebouncerOptions",
     "nameFull": "IEditableDebouncerOptions"
    },
    "src": "uui-core/src/helpers/IEditableDebouncer.ts",
    "comment": {
     "raw": [
      "IEditableDebouncer component options."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IEditableDebouncerOptions",
     "print": [
      "/**",
      " * IEditableDebouncer component options.",
      " */",
      "interface IEditableDebouncerOptions {",
      "    /** Pass true to disable debouncing */",
      "    disableDebounce?: boolean;",
      "    /** Debounce delay in ms. Default value is 500ms */",
      "    debounceDelay?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "disableDebounce",
      "name": "disableDebounce",
      "comment": {
       "raw": [
        "Pass true to disable debouncing"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "debounceDelay",
      "name": "debounceDelay",
      "comment": {
       "raw": [
        "Debounce delay in ms. Default value is 500ms"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IEditableDebouncerProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IEditableDebouncerProps",
     "nameFull": "IEditableDebouncerProps<T>"
    },
    "src": "uui-core/src/helpers/IEditableDebouncer.ts",
    "comment": {
     "raw": [
      "IEditableDebouncer component props."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IEditableDebouncerProps<T>",
     "print": [
      "/**",
      " * IEditableDebouncer component props.",
      " */",
      "interface IEditableDebouncerProps<T> extends IEditable<T>, IEditableDebouncerOptions, IAnalyticableOnChange<T> {",
      "    /**",
      "     * Render wrapped component.",
      "     */",
      "    render: (props: IEditable<T>) => React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "render",
      "name": "render",
      "comment": {
       "raw": [
        "Render wrapped component."
       ]
      },
      "typeValue": {
       "raw": "(props: IEditable<T>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": true
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "T"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: T) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "disableDebounce",
      "name": "disableDebounce",
      "comment": {
       "raw": [
        "Pass true to disable debouncing"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IEditableDebouncerOptions",
      "required": false
     },
     {
      "uid": "debounceDelay",
      "name": "debounceDelay",
      "comment": {
       "raw": [
        "Debounce delay in ms. Default value is 500ms"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IEditableDebouncerOptions",
      "required": false
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: T | null, oldValue: T | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IErrorContext": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IErrorContext",
     "nameFull": "IErrorContext"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IErrorContext",
     "print": [
      "interface IErrorContext extends IBaseContext {",
      "    /** Current error */",
      "    currentError?: Error;",
      "    /** Reports error to context */",
      "    reportError(error: Error): void;",
      "    /** Sets an error handler callback */",
      "    onError(callback: Function): void;",
      "    /** Discard current error */",
      "    discardError(): void;",
      "    /** Discard errors and refresh app */",
      "    recover(): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "currentError",
      "name": "currentError",
      "comment": {
       "raw": [
        "Current error"
       ]
      },
      "typeValue": {
       "raw": "Error"
      },
      "required": false
     },
     {
      "uid": "reportError",
      "name": "reportError",
      "comment": {
       "raw": [
        "Reports error to context"
       ]
      },
      "typeValue": {
       "raw": "(error: Error) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "onError",
      "name": "onError",
      "comment": {
       "raw": [
        "Sets an error handler callback"
       ]
      },
      "typeValue": {
       "raw": "(callback: Function) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "discardError",
      "name": "discardError",
      "comment": {
       "raw": [
        "Discard current error"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "recover",
      "name": "recover",
      "comment": {
       "raw": [
        "Discard errors and refresh app"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "subscribe",
      "name": "subscribe",
      "comment": {
       "raw": [
        "Add your handler, which will be called on context updates"
       ]
      },
      "typeValue": {
       "raw": "(handler: (state: {}) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     },
     {
      "uid": "unsubscribe",
      "name": "unsubscribe",
      "comment": {
       "raw": [
        "Unsubscribe from context updates"
       ]
      },
      "typeValue": {
       "raw": "(handler: (state: {}) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     },
     {
      "uid": "destroyContext",
      "name": "destroyContext",
      "comment": {
       "raw": [
        "Manually destroy context and unsubscribe from all listeners"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IFilterConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IFilterConfig",
     "nameFull": "IFilterConfig"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "IFilterConfig",
     "print": [
      "type IFilterConfig = {",
      "    /** If true, the filter will be shown in the FiltersPanel */",
      "    isVisible: boolean;",
      "    /**",
      "     * Determines the order in which this filter should appear in the filters list.",
      "     * The filters are sorted in ascending alphabetical order.",
      "     */",
      "    order?: string;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "isVisible",
      "name": "isVisible",
      "comment": {
       "raw": [
        "If true, the filter will be shown in the FiltersPanel"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": "order",
      "name": "order",
      "comment": {
       "raw": [
        "Determines the order in which this filter should appear in the filters list.",
        " The filters are sorted in ascending alphabetical order."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IFilterItemBodyProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IFilterItemBodyProps",
     "nameFull": "IFilterItemBodyProps<TFilter>"
    },
    "src": "uui-core/src/types/components/filterItemBody.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "FilterConfigBase<TFilter> & Pick<PickerBaseOptions<any, any>, 'dataSource' | 'getName' | 'renderRow'> & { type: 'singlePicker' | 'multiPicker'; showSearch?: boolean | undefined; maxBodyHeight?: number | undefined; highlightSearchMatches?: boolean | undefined; } & IEditable<any> & IDropdownBodyProps & { selectedPredicate?: string | undefined; } | FilterConfigBase<TFilter> & Pick<CommonDatePickerProps, 'filter' | 'format'> & { type: 'datePicker'; } & IEditable<any> & IDropdownBodyProps & { selectedPredicate?: string | undefined; } | FilterConfigBase<TFilter> & { type: 'numeric'; } & IEditable<any> & IDropdownBodyProps & { selectedPredicate?: string | undefined; } | FilterConfigBase<TFilter> & Pick<CommonDatePickerProps, 'filter' | 'format'> & { type: 'rangeDatePicker'; } & IEditable<any> & IDropdownBodyProps & { selectedPredicate?: string | undefined; } | FilterConfigBase<TFilter> & { type: 'custom'; render: (props: IFilterItemBodyProps<any>) => React.ReactElement<any, string | React.JSXElementConstructor<any>>; getTogglerValue: (props: IFilterItemBodyProps<any>) => React.ReactNode; } & IEditable<any> & IDropdownBodyProps & { selectedPredicate?: string | undefined; }",
     "print": [
      "type IFilterItemBodyProps<TFilter> = TableFiltersConfig<TFilter> & IEditable<any> & IDropdownBodyProps & {",
      "    /** Name of currently selected predicate */",
      "    selectedPredicate?: string;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "title",
      "name": "title",
      "comment": {
       "raw": [
        "Title of the filter, displayed in filter toggler and filter body"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": true
     },
     {
      "uid": "field",
      "name": "field",
      "comment": {
       "raw": [
        "Field of filters object, where store the filter value"
       ]
      },
      "typeValue": {
       "raw": "keyof TFilter"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": true
     },
     {
      "uid": "columnKey",
      "name": "columnKey",
      "comment": {
       "raw": [
        "Key of the column to which the filter is attached.",
        " If omitted, filter won't be attached to the column."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": "isAlwaysVisible",
      "name": "isAlwaysVisible",
      "comment": {
       "raw": [
        "Pass true to make filter always visible in FilterPanel. User can't hide it via 'Add filter' dropdown"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": "predicates",
      "name": "predicates",
      "comment": {
       "raw": [
        "Array of available predicates for the filter. This predicated can be chosen by user and applied to the filter value."
       ]
      },
      "typeValue": {
       "raw": "IFilterPredicate[]"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": "maxCount",
      "name": "maxCount",
      "comment": {
       "raw": [
        "Count of words to show in the Filter toggler. By default, 2 item will be shown."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": "togglerWidth",
      "name": "togglerWidth",
      "comment": {
       "raw": [
        "Defines maxWidth of the filter toggler"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": "dataSource",
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<any, any, any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": true
     },
     {
      "uid": "getName",
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: any) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "renderRow",
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<any, any>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "type",
      "name": "type",
      "comment": {
       "raw": [
        "Type of the filter"
       ]
      },
      "typeValue": {
       "raw": "'singlePicker' | 'multiPicker'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "singlePicker",
        "multiPicker"
       ]
      },
      "from": "@epam/uui-core:PickerFilterConfig",
      "required": true
     },
     {
      "uid": "showSearch",
      "name": "showSearch",
      "comment": {
       "raw": [
        "Pass false to hide search in picker body.",
        " If omitted, true value will be used."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PickerFilterConfig",
      "required": false
     },
     {
      "uid": "maxBodyHeight",
      "name": "maxBodyHeight",
      "comment": {
       "raw": [
        "Height of picker items list in px. This height doesn't include height of body toolbars(sorting, predicates)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:PickerFilterConfig",
      "required": false
     },
     {
      "uid": "highlightSearchMatches",
      "name": "highlightSearchMatches",
      "comment": {
       "raw": [
        "Enables highlighting of the items' text with search-matching results."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PickerFilterConfig",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onClose",
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the Dropdown body"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "togglerHeight",
      "name": "togglerHeight",
      "comment": {
       "raw": [
        "The height of the toggler"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "scheduleUpdate",
      "name": "scheduleUpdate",
      "comment": {
       "raw": [
        "Call to force recompute dropdown position"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "Indicates that dropdown is open"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "arrowProps",
      "name": "arrowProps",
      "comment": {
       "raw": [
        "Props that should be provided to the arrow component"
       ]
      },
      "typeValue": {
       "raw": "PopperArrowProps"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "placement",
      "name": "placement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'right' | 'left' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "right",
        "left",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "selectedPredicate",
      "name": "selectedPredicate",
      "comment": {
       "raw": [
        "Name of currently selected predicate"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "comment": {
       "raw": [
        "Filter selectable days. Days, for which this callback returns false - will be disabled"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     },
     {
      "uid": "format",
      "name": "format",
      "comment": {
       "raw": [
        "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     },
     {
      "uid": "type_2",
      "name": "type",
      "comment": {
       "raw": [
        "Type of the filter"
       ]
      },
      "typeValue": {
       "raw": "'datePicker'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "datePicker"
       ]
      },
      "from": "@epam/uui-core:DatePickerFilterConfig",
      "required": true
     },
     {
      "uid": "type_3",
      "name": "type",
      "comment": {
       "raw": [
        "Type of the filter"
       ]
      },
      "typeValue": {
       "raw": "'numeric'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "numeric"
       ]
      },
      "from": "@epam/uui-core:NumericFilterConfig",
      "required": true
     },
     {
      "uid": "type_4",
      "name": "type",
      "comment": {
       "raw": [
        "Type of the filter"
       ]
      },
      "typeValue": {
       "raw": "'rangeDatePicker'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "rangeDatePicker"
       ]
      },
      "from": "@epam/uui-core:RangeDatePickerFilterConfig",
      "required": true
     },
     {
      "uid": "type_5",
      "name": "type",
      "comment": {
       "raw": [
        "Type of the filter"
       ]
      },
      "typeValue": {
       "raw": "'custom'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "custom"
       ]
      },
      "from": "@epam/uui-core:CustomFilterConfig",
      "required": true
     },
     {
      "uid": "render",
      "name": "render",
      "comment": {
       "raw": [
        "Render callback for filter body"
       ]
      },
      "typeValue": {
       "raw": "(props: IFilterItemBodyProps<any>) => React.ReactElement<any, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:CustomFilterConfig",
      "required": true
     },
     {
      "uid": "getTogglerValue",
      "name": "getTogglerValue",
      "comment": {
       "raw": [
        "A pure function that gets value to display in filter toggler"
       ]
      },
      "typeValue": {
       "raw": "(props: IFilterItemBodyProps<any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:CustomFilterConfig",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-core:IFilterPredicate": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IFilterPredicate",
     "nameFull": "IFilterPredicate"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "IFilterPredicate",
     "print": [
      "type IFilterPredicate = {",
      "    /** Name of the predicate, used to display */",
      "    name: string;",
      "    /** Predicate key, which wraps filter value.",
      "     *  E.g. your have 'in' predicate for locationIds filter, the resulted filter object will be:",
      "     *  filter: {",
      "     *      locationIds: {",
      "     *          in: [/selected location ids/]",
      "     *      }",
      "     *  }",
      "     *  */",
      "    predicate: FilterPredicateName;",
      "    /** Pass true to make this predicate selected by default */",
      "    isDefault?: boolean;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "name",
      "name": "name",
      "comment": {
       "raw": [
        "Name of the predicate, used to display"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": "predicate",
      "name": "predicate",
      "comment": {
       "raw": [
        "Predicate key, which wraps filter value.",
        "  E.g. your have 'in' predicate for locationIds filter, the resulted filter object will be:",
        "  filter: {",
        "      locationIds: {",
        "          in: [/selected location ids/]",
        "      }",
        "  }"
       ]
      },
      "typeValue": {
       "raw": "'in' | 'nin' | 'isNull' | 'gt' | 'gte' | 'lt' | 'lte' | 'inRange' | 'notInRange' | 'eq' | 'neq' | 'not'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "in",
        "nin",
        "isNull",
        "gt",
        "gte",
        "lt",
        "lte",
        "inRange",
        "notInRange",
        "eq",
        "neq",
        "not"
       ]
      },
      "required": true
     },
     {
      "uid": "isDefault",
      "name": "isDefault",
      "comment": {
       "raw": [
        "Pass true to make this predicate selected by default"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IFormApi": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IFormApi",
     "nameFull": "IFormApi<T>"
    },
    "src": "uui-core/src/data/forms/Form.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IFormApi<T>",
     "print": [
      "interface IFormApi<T> extends IEditable<T>, ValidationState {",
      "    /**",
      "     * Lens - a helper to split parts of the form state, validation, and setState callbacks, and pass this to components",
      "     */",
      "    lens: ILens<T>;",
      "    /**",
      "     * Sets form value. The signature is the same for setState in React.useState - either new value, or callback to update the value.",
      "     * The change is threated as user input - sets isChanged and creates undo endpoint",
      "     */",
      "    setValue: (s: React.SetStateAction<T>) => void;",
      "    /**",
      "     * Replaces form value. The signature is the same for setState in React.useState - either new value, or callback to update the value.",
      "     * The change is not threated as user input - it replaces last changed state, and doesn't create undo checkpoint.",
      "     */",
      "    replaceValue: (s: React.SetStateAction<T>) => void;",
      "    /**",
      "     * Triggers save procedure - validation, calling props.onSave, and processing results",
      "     */",
      "    save(): void;",
      "    /**",
      "     * Undo to last checkpoint",
      "     */",
      "    undo(): void;",
      "    /**",
      "     * Redo last action",
      "     */",
      "    redo(): void;",
      "    /**",
      "     * Reverts all changes up to the initial or last saved state",
      "     */",
      "    revert(): void;",
      "    /**",
      "     * Try to leave form and ask to save unsaved changes",
      "     */",
      "    close(): Promise<any>;",
      "    /**",
      "     * Forces form to validate value.",
      "     * Validation is usually done automatically, according to validationOn prop.",
      "     * Use this method only in corner cases.",
      "     */",
      "    validate(): ValidationState;",
      "    /** True if there are changes to undo */",
      "    canUndo: boolean;",
      "    /** True if there are changes to redo */",
      "    canRedo: boolean;",
      "    /** True if there are changes to revers */",
      "    canRevert: boolean;",
      "    /** True if form is changed since the initial state, or the last save */",
      "    isChanged: boolean;",
      "    /** True if save is in progress */",
      "    isInProgress: boolean;",
      "    /** Validation state which was returned from `onSave` callback  */",
      "    serverValidationState: ValidationState;",
      "    /** Sets new server validation state from client side */",
      "    setServerValidationState: (s: React.SetStateAction<ValidationState>) => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "lens",
      "name": "lens",
      "comment": {
       "raw": [
        "Lens - a helper to split parts of the form state, validation, and setState callbacks, and pass this to components"
       ]
      },
      "typeValue": {
       "raw": "ILens<T>"
      },
      "required": true
     },
     {
      "uid": "setValue",
      "name": "setValue",
      "comment": {
       "raw": [
        "Sets form value. The signature is the same for setState in React.useState - either new value, or callback to update the value.",
        " The change is threated as user input - sets isChanged and creates undo endpoint"
       ]
      },
      "typeValue": {
       "raw": "(s: React.SetStateAction<T>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "replaceValue",
      "name": "replaceValue",
      "comment": {
       "raw": [
        "Replaces form value. The signature is the same for setState in React.useState - either new value, or callback to update the value.",
        " The change is not threated as user input - it replaces last changed state, and doesn't create undo checkpoint."
       ]
      },
      "typeValue": {
       "raw": "(s: React.SetStateAction<T>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "save",
      "name": "save",
      "comment": {
       "raw": [
        "Triggers save procedure - validation, calling props.onSave, and processing results"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "undo",
      "name": "undo",
      "comment": {
       "raw": [
        "Undo to last checkpoint"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "redo",
      "name": "redo",
      "comment": {
       "raw": [
        "Redo last action"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "revert",
      "name": "revert",
      "comment": {
       "raw": [
        "Reverts all changes up to the initial or last saved state"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "close",
      "name": "close",
      "comment": {
       "raw": [
        "Try to leave form and ask to save unsaved changes"
       ]
      },
      "typeValue": {
       "raw": "() => Promise<any>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "validate",
      "name": "validate",
      "comment": {
       "raw": [
        "Forces form to validate value.",
        " Validation is usually done automatically, according to validationOn prop.",
        " Use this method only in corner cases."
       ]
      },
      "typeValue": {
       "raw": "() => ValidationState"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "canUndo",
      "name": "canUndo",
      "comment": {
       "raw": [
        "True if there are changes to undo"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": "canRedo",
      "name": "canRedo",
      "comment": {
       "raw": [
        "True if there are changes to redo"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": "canRevert",
      "name": "canRevert",
      "comment": {
       "raw": [
        "True if there are changes to revers"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": "isChanged",
      "name": "isChanged",
      "comment": {
       "raw": [
        "True if form is changed since the initial state, or the last save"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": "isInProgress",
      "name": "isInProgress",
      "comment": {
       "raw": [
        "True if save is in progress"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": "serverValidationState",
      "name": "serverValidationState",
      "comment": {
       "raw": [
        "Validation state which was returned from `onSave` callback"
       ]
      },
      "typeValue": {
       "raw": "ValidationState"
      },
      "required": true
     },
     {
      "uid": "setServerValidationState",
      "name": "setServerValidationState",
      "comment": {
       "raw": [
        "Sets new server validation state from client side"
       ]
      },
      "typeValue": {
       "raw": "(s: React.SetStateAction<ValidationState>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "T"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: T) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "validationProps",
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ValidationState; }"
      },
      "from": "@epam/uui-core:ValidationState",
      "required": false
     },
     {
      "uid": "validationMessage",
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasValidationMessage",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IHasCaption": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IHasCaption",
     "nameFull": "IHasCaption"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component has a caption. E.g. Button"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IHasCaption",
     "print": [
      "/** Component has a caption. E.g. Button */",
      "interface IHasCaption {",
      "    /** Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions. */",
      "    caption?: ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IHasChildren": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IHasChildren",
     "nameFull": "IHasChildren"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component can have child components"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IHasChildren",
     "print": [
      "/** Component can have child components */",
      "interface IHasChildren {",
      "    /** Component children */",
      "    children?: ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IHasCX": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IHasCX",
     "nameFull": "IHasCX"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component can accept cx property, allowing to pass classes to put on component.",
      " CX is a shortcut for 'classnames'.",
      " The props accept string, arrays, object, recursively. All falsy values are thrown away. Examples:",
      " - 'red' => 'red'",
      " - ['red', 0, false, 'blue' ] => 'red blue'",
      " - { 'red': true, 'blue': false, ['green', 'white']} => 'red green white'"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IHasCX",
     "print": [
      "/**",
      " * Component can accept cx property, allowing to pass classes to put on component.",
      " * CX is a shortcut for 'classnames'.",
      " * The props accept string, arrays, object, recursively. All falsy values are thrown away. Examples:",
      " * - 'red' => 'red'",
      " * - ['red', 0, false, 'blue' ] => 'red blue'",
      " * - { 'red': true, 'blue': false, ['green', 'white']} => 'red green white'",
      " */",
      "interface IHasCX {",
      "    /** CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details */",
      "    cx?: CX;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IHasDirection": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IHasDirection",
     "nameFull": "IHasDirection"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component has direction of child components."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IHasDirection",
     "print": [
      "/** Component has direction of child components. */",
      "interface IHasDirection {",
      "    /** Direction of child components. */",
      "    direction?: 'vertical' | 'horizontal';",
      "}"
     ]
    },
    "props": [
     {
      "uid": "direction",
      "name": "direction",
      "comment": {
       "raw": [
        "Direction of child components."
       ]
      },
      "typeValue": {
       "raw": "'vertical' | 'horizontal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "vertical",
        "horizontal"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IHasForwardedRef": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IHasForwardedRef",
     "nameFull": "IHasForwardedRef<T>"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IHasForwardedRef<T>",
     "print": [
      "interface IHasForwardedRef<T extends HTMLOrSVGElement> {",
      "    /** this ref is passed to the underlying component */",
      "    forwardedRef?: ForwardedRef<T>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: T | null) => void | React.MutableRefObject<T | null>"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IHasIcon": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IHasIcon",
     "nameFull": "IHasIcon"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "An icon can be added to component"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IHasIcon",
     "print": [
      "/** An icon can be added to component */",
      "interface IHasIcon {",
      "    /** Icon can be a React element (usually an SVG element) */",
      "    icon?: Icon;",
      "    /** Position of the icon (left of right) */",
      "    iconPosition?: 'left' | 'right';",
      "    /** Click handler for the icon */",
      "    onIconClick?(): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left"
       ]
      },
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IHasLabel": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IHasLabel",
     "nameFull": "IHasLabel"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Component has label. E.g. User Name"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IHasLabel",
     "print": [
      "/** Component has label. E.g. User Name */",
      "interface IHasLabel {",
      "    /** Component label. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in labels. */",
      "    label?: ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "label",
      "name": "label",
      "comment": {
       "raw": [
        "Component label. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in labels."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IHasPlaceholder": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IHasPlaceholder",
     "nameFull": "IHasPlaceholder"
    },
    "src": "uui-core/src/types/props.ts",
    "comment": {
     "raw": [
      "Represents placeholder component prop"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IHasPlaceholder",
     "print": [
      "/**",
      " * Represents placeholder component prop",
      " */",
      "interface IHasPlaceholder {",
      "    /** Placeholder to display when empty */",
      "    placeholder?: any;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "placeholder",
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IHasRawProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IHasRawProps",
     "nameFull": "IHasRawProps<T>"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "IHasRawProps<T>",
     "print": [
      "// Component allows to pass raw HTML props to put on the DOM element",
      "type IHasRawProps<T> = {",
      "    /** Any HTML attributes (native or 'data-') to put on the underlying component */",
      "    rawProps?: T & Record<`data-${string}`, string>;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "T & Record<`data-${string}`, string>"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IHasStyleAttrs": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IHasStyleAttrs",
     "nameFull": "IHasStyleAttrs"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IHasStyleAttrs",
     "print": [
      "interface IHasStyleAttrs {",
      "    /** CSS style prop to put on the component */",
      "    style?: React.CSSProperties;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "style",
      "name": "style",
      "comment": {
       "raw": [
        "CSS style prop to put on the component"
       ]
      },
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IHasTabIndex": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IHasTabIndex",
     "nameFull": "IHasTabIndex"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IHasTabIndex",
     "print": [
      "// TBD: merge with ICanFocus?",
      "interface IHasTabIndex {",
      "    /** Controls the order of keyboard navigation between components */",
      "    tabIndex?: React.HTMLAttributes<HTMLElement>['tabIndex'];",
      "}"
     ]
    },
    "props": [
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IHasValidationMessage": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IHasValidationMessage",
     "nameFull": "IHasValidationMessage"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IHasValidationMessage",
     "print": [
      "interface IHasValidationMessage {",
      "    /** Message describing why the value is invalid */",
      "    validationMessage?: ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "validationMessage",
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IHistory4": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IHistory4",
     "nameFull": "IHistory4"
    },
    "src": "uui-core/src/services/routing/HistoryAdaptedRouter.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IHistory4",
     "print": [
      "interface IHistory4 {",
      "    location: Link;",
      "    push(link: Link): void;",
      "    replace(link: Link): void;",
      "    createHref(link: Link): string;",
      "    listen(listener: (location: Link) => void): () => void;",
      "    block(listener: (args: any) => any): () => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "location",
      "name": "location",
      "typeValue": {
       "raw": "Link"
      },
      "required": true
     },
     {
      "uid": "push",
      "name": "push",
      "typeValue": {
       "raw": "(link: Link) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "replace",
      "name": "replace",
      "typeValue": {
       "raw": "(link: Link) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "createHref",
      "name": "createHref",
      "typeValue": {
       "raw": "(link: Link) => string"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "listen",
      "name": "listen",
      "typeValue": {
       "raw": "(listener: (location: Link) => void) => () => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "block",
      "name": "block",
      "typeValue": {
       "raw": "(listener: (args: any) => any) => () => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IImmutableMap": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IImmutableMap",
     "nameFull": "IImmutableMap<TKey, TValue>"
    },
    "src": "uui-core/src/types/objects.ts",
    "comment": {
     "raw": [
      "Immutable map."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IImmutableMap<TKey, TValue>",
     "print": [
      "/**",
      " * Immutable map.",
      " */",
      "interface IImmutableMap<TKey, TValue> {",
      "    /**",
      "     * Must implement multiple constructors:",
      "     * - constructor with empty arguments or initial data (optional);",
      "     * - constructor, which accepts an argument of IMap<TKey, TValue> type and clones its value (mandatory).",
      "     * The example of implementation can be found in 'uui-core/src/data/processing/views/tree/ItemsMap.ts'.",
      "     */",
      "    constructor: Function;",
      "    [Symbol.iterator](): IterableIterator<[",
      "        TKey,",
      "        TValue",
      "    ]>;",
      "    get(key: TKey): TValue | undefined;",
      "    /**",
      "     * Should return cloned map with new value in it. This operation is immutable.",
      "     * @param key - key of a map.",
      "     * @param value - value, to be set into a map, using the key.",
      "     */",
      "    set(key: TKey, value?: TValue): IImmutableMap<TKey, TValue>;",
      "    /**",
      "     * Should return a cloned map, without data, located by the key. This operation is immutable.",
      "     * @param key",
      "     */",
      "    delete(key: TKey): IImmutableMap<TKey, TValue>;",
      "    has(key: TKey): boolean;",
      "    size: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "constructor",
      "name": "constructor",
      "comment": {
       "raw": [
        "Must implement multiple constructors:",
        " - constructor with empty arguments or initial data (optional);",
        " - constructor, which accepts an argument of IMap<TKey, TValue> type and clones its value (mandatory).",
        " The example of implementation can be found in 'uui-core/src/data/processing/views/tree/ItemsMap.ts'."
       ]
      },
      "typeValue": {
       "raw": "Function"
      },
      "required": true
     },
     {
      "uid": "get",
      "name": "get",
      "typeValue": {
       "raw": "(key: TKey) => TValue | undefined"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "set",
      "name": "set",
      "comment": {
       "raw": [
        "Should return cloned map with new value in it. This operation is immutable.",
        " @param key - key of a map.",
        " @param value - value, to be set into a map, using the key."
       ]
      },
      "typeValue": {
       "raw": "(key: TKey, value?: TValue | undefined) => IImmutableMap<TKey, TValue>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "delete",
      "name": "delete",
      "comment": {
       "raw": [
        "Should return a cloned map, without data, located by the key. This operation is immutable.",
        " @param key"
       ]
      },
      "typeValue": {
       "raw": "(key: TKey) => IImmutableMap<TKey, TValue>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "has",
      "name": "has",
      "typeValue": {
       "raw": "(key: TKey) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "size",
      "name": "size",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": "[Symbol.iterator]",
      "name": "[Symbol.iterator]",
      "typeValue": {
       "raw": "() => IterableIterator<[TKey, TValue]>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ILayoutContext": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ILayoutContext",
     "nameFull": "ILayoutContext"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ILayoutContext",
     "print": [
      "interface ILayoutContext {",
      "    /** Returns the new layer. This layer will be higher than previous. */",
      "    getLayer(): LayoutLayer;",
      "    /** Removes provided layer from layers list */",
      "    releaseLayer(layer: LayoutLayer): void;",
      "    /**",
      "     * Returns portal root node.",
      "     * In simple cases it will be node with 'main' or 'root' id or document.body.",
      "     * Or it will return node with portalRootId.",
      "     */",
      "    getPortalRoot(): HTMLElement;",
      "    /**",
      "     * Returns unique id, which can be used as id for portal root.",
      "     * Usually used for cases with shadow DOM, to be able to find this portal root element if it's located under shadow DOM",
      "     */",
      "    getPortalRootId(): string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "getLayer",
      "name": "getLayer",
      "comment": {
       "raw": [
        "Returns the new layer. This layer will be higher than previous."
       ]
      },
      "typeValue": {
       "raw": "() => LayoutLayer"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "releaseLayer",
      "name": "releaseLayer",
      "comment": {
       "raw": [
        "Removes provided layer from layers list"
       ]
      },
      "typeValue": {
       "raw": "(layer: LayoutLayer) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "getPortalRoot",
      "name": "getPortalRoot",
      "comment": {
       "raw": [
        "Returns portal root node.",
        " In simple cases it will be node with 'main' or 'root' id or document.body.",
        " Or it will return node with portalRootId."
       ]
      },
      "typeValue": {
       "raw": "() => HTMLElement"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "getPortalRootId",
      "name": "getPortalRootId",
      "comment": {
       "raw": [
        "Returns unique id, which can be used as id for portal root.",
        " Usually used for cases with shadow DOM, to be able to find this portal root element if it's located under shadow DOM"
       ]
      },
      "typeValue": {
       "raw": "() => string"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ILens": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ILens",
     "nameFull": "ILens<TFocused>"
    },
    "src": "uui-core/src/data/lenses/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ILens<TFocused>",
     "print": [
      "interface ILens<TFocused> {",
      "    /** Get lens value */",
      "    get(): TFocused;",
      "    /** Get lens value of the IMap or IImmutableMap by provided id. */",
      "    key<TId>(id: TId): ILens<NonNullable<IMapElement<TFocused>>>;",
      "    /** Set new lens value */",
      "    set(value: TFocused): void;",
      "    /** Updates lens value with returned value from provided callback.",
      "     *  This callback received current lens value as a param",
      "     *  */",
      "    update(fn: (current: TFocused) => TFocused): void;",
      "    /** Return a new lens on the provided field name */",
      "    prop<K extends keyof TFocused>(name: K): ILens<NonNullable<TFocused[K]>>;",
      "    /** Return a new lens on item of array by provided index */",
      "    index(index: number): ILens<ArrayElement<TFocused>>;",
      "    /** Add to the lens a setter callback, which received old and new value and should return new value for set.",
      "     * This callback will be called on any lens update",
      "     * */",
      "    onChange(fn: (oldValue: TFocused, newValue: TFocused) => TFocused): ILens<TFocused>;",
      "    /** Defines default lens value, which will be return in case of lens have 'null' or 'undefined' value */",
      "    default(value: TFocused): ILens<TFocused>;",
      "    /** Return IEditable interface, which accepted by UUI form components.",
      "     * Usually you just need to spread it to the component, e.g. { ...lens.prop('name').toProps() }  */",
      "    toProps(): IEditable<TFocused> & ValidationState;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "get",
      "name": "get",
      "comment": {
       "raw": [
        "Get lens value"
       ]
      },
      "typeValue": {
       "raw": "() => TFocused"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "key",
      "name": "key",
      "comment": {
       "raw": [
        "Get lens value of the IMap or IImmutableMap by provided id."
       ]
      },
      "typeValue": {
       "raw": "<TId>(id: TId) => ILens<NonNullable<IMapElement<TFocused>>>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "set",
      "name": "set",
      "comment": {
       "raw": [
        "Set new lens value"
       ]
      },
      "typeValue": {
       "raw": "(value: TFocused) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "update",
      "name": "update",
      "comment": {
       "raw": [
        "Updates lens value with returned value from provided callback.",
        "  This callback received current lens value as a param"
       ]
      },
      "typeValue": {
       "raw": "(fn: (current: TFocused) => TFocused) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "prop",
      "name": "prop",
      "comment": {
       "raw": [
        "Return a new lens on the provided field name"
       ]
      },
      "typeValue": {
       "raw": "<K extends keyof TFocused>(name: K) => ILens<NonNullable<TFocused[K]>>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "index",
      "name": "index",
      "comment": {
       "raw": [
        "Return a new lens on item of array by provided index"
       ]
      },
      "typeValue": {
       "raw": "(index: number) => ILens<ArrayElement<TFocused>>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "onChange",
      "name": "onChange",
      "comment": {
       "raw": [
        "Add to the lens a setter callback, which received old and new value and should return new value for set.",
        " This callback will be called on any lens update"
       ]
      },
      "typeValue": {
       "raw": "(fn: (oldValue: TFocused, newValue: TFocused) => TFocused) => ILens<TFocused>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "default",
      "name": "default",
      "comment": {
       "raw": [
        "Defines default lens value, which will be return in case of lens have 'null' or 'undefined' value"
       ]
      },
      "typeValue": {
       "raw": "(value: TFocused) => ILens<TFocused>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "toProps",
      "name": "toProps",
      "comment": {
       "raw": [
        "Return IEditable interface, which accepted by UUI form components.",
        " Usually you just need to spread it to the component, e.g. { ...lens.prop('name').toProps() }"
       ]
      },
      "typeValue": {
       "raw": "() => IEditable<TFocused> & ValidationState"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ILockContext": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ILockContext",
     "nameFull": "ILockContext"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ILockContext",
     "print": [
      "interface ILockContext {",
      "    /**",
      "     * Tries to take a lock, and sets tryRelease callback, which will be invoked when something tries to take control over.",
      "     * If a lock already exists, it tries to release the current lock and then set a new one",
      "     */",
      "    acquire(tryRelease: () => Promise<any>): Promise<object>;",
      "    /** Releases lock without calling tryRelease callback */",
      "    release(lock: object): void;",
      "    /** Tries to acquire a lock for the time while the action is being executed. */",
      "    withLock(action: () => Promise<any>): Promise<object>;",
      "    /** Returns currently active lock */",
      "    getCurrentLock: () => Lock | null;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "acquire",
      "name": "acquire",
      "comment": {
       "raw": [
        "Tries to take a lock, and sets tryRelease callback, which will be invoked when something tries to take control over.",
        " If a lock already exists, it tries to release the current lock and then set a new one"
       ]
      },
      "typeValue": {
       "raw": "(tryRelease: () => Promise<any>) => Promise<object>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "release",
      "name": "release",
      "comment": {
       "raw": [
        "Releases lock without calling tryRelease callback"
       ]
      },
      "typeValue": {
       "raw": "(lock: object) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "withLock",
      "name": "withLock",
      "comment": {
       "raw": [
        "Tries to acquire a lock for the time while the action is being executed."
       ]
      },
      "typeValue": {
       "raw": "(action: () => Promise<any>) => Promise<object>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "getCurrentLock",
      "name": "getCurrentLock",
      "comment": {
       "raw": [
        "Returns currently active lock"
       ]
      },
      "typeValue": {
       "raw": "() => Lock | null"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IMap": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IMap",
     "nameFull": "IMap<TKey, TValue>"
    },
    "src": "uui-core/src/types/objects.ts",
    "comment": {
     "raw": [
      "Mutable map."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IMap<TKey, TValue>",
     "print": [
      "/**",
      " * Mutable map.",
      " */",
      "interface IMap<TKey, TValue> {",
      "    /**",
      "     * Must implement multiple constructors:",
      "     * - constructor with empty arguments or initial data (optional);",
      "     * - constructor, which accepts an argument of IMap<TKey, TValue> type and clones its value (mandatory).",
      "     */",
      "    constructor: Function;",
      "    [Symbol.iterator](): IterableIterator<[",
      "        TKey,",
      "        TValue",
      "    ]>;",
      "    get(key: TKey): TValue | undefined;",
      "    /**",
      "     * Should set data to the existing map. This operation is mutable.",
      "     * @param key - key of a map.",
      "     * @param value - value, to be set into a map, using the key.",
      "     */",
      "    set(key: TKey, value?: TValue): IMap<TKey, TValue>;",
      "    /**",
      "     * Should delete an element, located in a map by key. This operation is mutable.",
      "     * @param key",
      "     */",
      "    delete(key: TKey): boolean;",
      "    has(key: TKey): boolean;",
      "    size: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "constructor",
      "name": "constructor",
      "comment": {
       "raw": [
        "Must implement multiple constructors:",
        " - constructor with empty arguments or initial data (optional);",
        " - constructor, which accepts an argument of IMap<TKey, TValue> type and clones its value (mandatory)."
       ]
      },
      "typeValue": {
       "raw": "Function"
      },
      "required": true
     },
     {
      "uid": "get",
      "name": "get",
      "typeValue": {
       "raw": "(key: TKey) => TValue | undefined"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "set",
      "name": "set",
      "comment": {
       "raw": [
        "Should set data to the existing map. This operation is mutable.",
        " @param key - key of a map.",
        " @param value - value, to be set into a map, using the key."
       ]
      },
      "typeValue": {
       "raw": "(key: TKey, value?: TValue | undefined) => IMap<TKey, TValue>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "delete",
      "name": "delete",
      "comment": {
       "raw": [
        "Should delete an element, located in a map by key. This operation is mutable.",
        " @param key"
       ]
      },
      "typeValue": {
       "raw": "(key: TKey) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "has",
      "name": "has",
      "typeValue": {
       "raw": "(key: TKey) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "size",
      "name": "size",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": "[Symbol.iterator]",
      "name": "[Symbol.iterator]",
      "typeValue": {
       "raw": "() => IterableIterator<[TKey, TValue]>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IMapElement": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IMapElement",
     "nameFull": "IMapElement<MapType>"
    },
    "src": "uui-core/src/data/lenses/types.ts",
    "comment": {
     "raw": [
      "IMap element, supported by ILens."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "IMapElement<MapType>",
     "print": [
      "/**",
      " * IMap element, supported by ILens.",
      " */",
      "type IMapElement<MapType> = MapType extends IMap<any, infer Item> ? Item : MapType extends IImmutableMap<any, infer Item> ? Item : never;"
     ]
    }
   }
  },
  "@epam/uui-core:IModal": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IModal",
     "nameFull": "IModal<TResult, TParameters>"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IModal<TResult, TParameters>",
     "print": [
      "interface IModal<TResult, TParameters = any> {",
      "    /** Indicates whether the modal is currently displayed */",
      "    isActive?: boolean;",
      "    /** Unique key of the modal */",
      "    key: string;",
      "    /** Modal zIndex value. Calculated via LayoutContext. */",
      "    zIndex: number;",
      "    /** Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value. */",
      "    success(result: TResult): void;",
      "    /** Call to close the modal with abort action. It's rejects `modalContext.show()` promise with provided value. */",
      "    abort(result?: any): void;",
      "    /** Parameters that provided via second param of `modalContext.show` method */",
      "    parameters?: TParameters;",
      "    /** Depth of current modal layer */",
      "    depth?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "isActive",
      "name": "isActive",
      "comment": {
       "raw": [
        "Indicates whether the modal is currently displayed"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the modal"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": "zIndex",
      "name": "zIndex",
      "comment": {
       "raw": [
        "Modal zIndex value. Calculated via LayoutContext."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": "success",
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TResult) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "abort",
      "name": "abort",
      "comment": {
       "raw": [
        "Call to close the modal with abort action. It's rejects `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "parameters",
      "name": "parameters",
      "comment": {
       "raw": [
        "Parameters that provided via second param of `modalContext.show` method"
       ]
      },
      "typeValue": {
       "raw": "TParameters"
      },
      "required": false
     },
     {
      "uid": "depth",
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of current modal layer"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IModalContext": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IModalContext",
     "nameFull": "IModalContext"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IModalContext",
     "print": [
      "interface IModalContext extends IBaseContext {",
      "    /** Shows provided modal component with defined params  */",
      "    show<TResult, TParameters = {}>(render: (props: IModal<TResult>) => React.ReactNode, parameters?: TParameters): Promise<TResult>;",
      "    /** Removes all active modals */",
      "    closeAll(): void;",
      "    /** Returns true, if some modal displayed */",
      "    isModalOperationActive(): boolean;",
      "    /** Returns all active modals */",
      "    getOperations(): ModalOperation[];",
      "}"
     ]
    },
    "props": [
     {
      "uid": "show",
      "name": "show",
      "comment": {
       "raw": [
        "Shows provided modal component with defined params"
       ]
      },
      "typeValue": {
       "raw": "<TResult, TParameters = {}>(render: (props: IModal<TResult, any>) => React.ReactNode, parameters?: TParameters | undefined) => Promise<TResult>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "closeAll",
      "name": "closeAll",
      "comment": {
       "raw": [
        "Removes all active modals"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "isModalOperationActive",
      "name": "isModalOperationActive",
      "comment": {
       "raw": [
        "Returns true, if some modal displayed"
       ]
      },
      "typeValue": {
       "raw": "() => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "getOperations",
      "name": "getOperations",
      "comment": {
       "raw": [
        "Returns all active modals"
       ]
      },
      "typeValue": {
       "raw": "() => ModalOperation[]"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "subscribe",
      "name": "subscribe",
      "comment": {
       "raw": [
        "Add your handler, which will be called on context updates"
       ]
      },
      "typeValue": {
       "raw": "(handler: (state: {}) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     },
     {
      "uid": "unsubscribe",
      "name": "unsubscribe",
      "comment": {
       "raw": [
        "Unsubscribe from context updates"
       ]
      },
      "typeValue": {
       "raw": "(handler: (state: {}) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     },
     {
      "uid": "destroyContext",
      "name": "destroyContext",
      "comment": {
       "raw": [
        "Manually destroy context and unsubscribe from all listeners"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:INotification": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "INotification",
     "nameFull": "INotification"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "INotification",
     "print": [
      "interface INotification {",
      "    /** Call to close the notification with abort action. It's rejects `notificationContext.show()` promise. */",
      "    onClose?(): void;",
      "    /** Call to close the notification with success action. It's resolved `notificationContext.show()` promise. */",
      "    onSuccess?(): void;",
      "    /** Cancel notification closing timer */",
      "    clearTimer?(): void;",
      "    /** Reinitialize notification closing timer. It will be set to the provided notification duration.  */",
      "    refreshTimer?(): void;",
      "    /** Unique id of the notification */",
      "    id: number;",
      "    /** Unique key of the notification */",
      "    key: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "onClose",
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the notification with abort action. It's rejects `notificationContext.show()` promise."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "onSuccess",
      "name": "onSuccess",
      "comment": {
       "raw": [
        "Call to close the notification with success action. It's resolved `notificationContext.show()` promise."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "clearTimer",
      "name": "clearTimer",
      "comment": {
       "raw": [
        "Cancel notification closing timer"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "refreshTimer",
      "name": "refreshTimer",
      "comment": {
       "raw": [
        "Reinitialize notification closing timer. It will be set to the provided notification duration."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "Unique id of the notification"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": "key",
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the notification"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:INotificationContext": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "INotificationContext",
     "nameFull": "INotificationContext"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "INotificationContext",
     "print": [
      "interface INotificationContext extends IBaseContext {",
      "    /** Shows provided notification component with defined params  */",
      "    show(render: (props: INotification) => React.ReactNode, notificationParams?: NotificationParams): Promise<void>;",
      "    /** Returns all active notifications */",
      "    getNotifications(): NotificationOperation[];",
      "    /** Removes notification by their id */",
      "    remove(id: number): void;",
      "    /** Removes all active notification */",
      "    clearAll(): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "show",
      "name": "show",
      "comment": {
       "raw": [
        "Shows provided notification component with defined params"
       ]
      },
      "typeValue": {
       "raw": "(render: (props: INotification) => React.ReactNode, notificationParams?: NotificationParams | undefined) => Promise<void>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "getNotifications",
      "name": "getNotifications",
      "comment": {
       "raw": [
        "Returns all active notifications"
       ]
      },
      "typeValue": {
       "raw": "() => NotificationOperation[]"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "remove",
      "name": "remove",
      "comment": {
       "raw": [
        "Removes notification by their id"
       ]
      },
      "typeValue": {
       "raw": "(id: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "clearAll",
      "name": "clearAll",
      "comment": {
       "raw": [
        "Removes all active notification"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "subscribe",
      "name": "subscribe",
      "comment": {
       "raw": [
        "Add your handler, which will be called on context updates"
       ]
      },
      "typeValue": {
       "raw": "(handler: (state: {}) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     },
     {
      "uid": "unsubscribe",
      "name": "unsubscribe",
      "comment": {
       "raw": [
        "Unsubscribe from context updates"
       ]
      },
      "typeValue": {
       "raw": "(handler: (state: {}) => void) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     },
     {
      "uid": "destroyContext",
      "name": "destroyContext",
      "comment": {
       "raw": [
        "Manually destroy context and unsubscribe from all listeners"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBaseContext",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IPickerToggler": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IPickerToggler",
     "nameFull": "IPickerToggler<TItem, TId>"
    },
    "src": "uui-core/src/types/pickers.ts",
    "comment": {
     "raw": [
      "Component can be used as Toggler control for pickers.",
      " Only IDropdownToggler implementation is necessary for the picker to function.",
      " Other props can be implemented for full-featured picker togglers."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IPickerToggler<TItem, TId>",
     "print": [
      "/**",
      " * Component can be used as Toggler control for pickers.",
      " * Only IDropdownToggler implementation is necessary for the picker to function.",
      " * Other props can be implemented for full-featured picker togglers.",
      " */",
      "interface IPickerToggler<TItem = any, TId = any> extends IBasicPickerToggler, Partial<IEditable<string>>, Partial<IHasPlaceholder>, Partial<IDisableable>, Partial<ICanBeInvalid> {",
      "    /** Array of selected rows */",
      "    selection?: DataRowProps<TItem, TId>[];",
      "    /** Amount of selected items */",
      "    selectedRowsCount?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "selection",
      "name": "selection",
      "comment": {
       "raw": [
        "Array of selected rows"
       ]
      },
      "typeValue": {
       "raw": "DataRowProps<TItem, TId>[]"
      },
      "required": false
     },
     {
      "uid": "selectedRowsCount",
      "name": "selectedRowsCount",
      "comment": {
       "raw": [
        "Amount of selected items"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "onClear",
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBasicPickerToggler",
      "required": false
     },
     {
      "uid": "toggleDropdownOpening",
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownTogglerProps",
      "required": false
     },
     {
      "uid": "isInteractedOutside",
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownTogglerProps",
      "required": false
     },
     {
      "uid": "ref",
      "name": "ref",
      "comment": {
       "raw": [
        "Toggler component ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: any) => void | React.RefObject<any>"
      },
      "from": "@epam/uui-core:IDropdownTogglerProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "placeholder",
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IPresetsApi": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IPresetsApi",
     "nameFull": "IPresetsApi<TFilter, TViewState>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IPresetsApi<TFilter, TViewState>",
     "print": [
      "interface IPresetsApi<TFilter = any, TViewState = any> {",
      "    /** ID of selected preset */",
      "    activePresetId: number | null;",
      "    /** Function that selects given preset  */",
      "    choosePreset(preset: ITablePreset<TFilter, TViewState>): void;",
      "    /** Function that gives preset name and create new preset with this name and current table state  */",
      "    createNewPreset(name: string): Promise<number>;",
      "    /** Function that gives preset and return if this preset changed or not  */",
      "    hasPresetChanged(preset: ITablePreset<TFilter, TViewState>): boolean;",
      "    /** Function that gives the preset and creat their duplicate  */",
      "    duplicatePreset(preset: ITablePreset<TFilter, TViewState>): void;",
      "    /** Function that deletes given preset  */",
      "    deletePreset(preset: ITablePreset<TFilter, TViewState>): Promise<void>;",
      "    /** Function that updates given preset  */",
      "    updatePreset(preset: ITablePreset<TFilter, TViewState>): Promise<void>;",
      "    /** Function that gives preset and return URL link on given preset  */",
      "    getPresetLink(preset: ITablePreset<TFilter, TViewState>): string;",
      "    /** Array of presets  */",
      "    presets: ITablePreset<TFilter, TViewState>[];",
      "}"
     ]
    },
    "props": [
     {
      "uid": "activePresetId",
      "name": "activePresetId",
      "comment": {
       "raw": [
        "ID of selected preset"
       ]
      },
      "typeValue": {
       "raw": "null | number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "choosePreset",
      "name": "choosePreset",
      "comment": {
       "raw": [
        "Function that selects given preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "createNewPreset",
      "name": "createNewPreset",
      "comment": {
       "raw": [
        "Function that gives preset name and create new preset with this name and current table state"
       ]
      },
      "typeValue": {
       "raw": "(name: string) => Promise<number>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "hasPresetChanged",
      "name": "hasPresetChanged",
      "comment": {
       "raw": [
        "Function that gives preset and return if this preset changed or not"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "duplicatePreset",
      "name": "duplicatePreset",
      "comment": {
       "raw": [
        "Function that gives the preset and creat their duplicate"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "deletePreset",
      "name": "deletePreset",
      "comment": {
       "raw": [
        "Function that deletes given preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => Promise<void>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "updatePreset",
      "name": "updatePreset",
      "comment": {
       "raw": [
        "Function that updates given preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => Promise<void>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "getPresetLink",
      "name": "getPresetLink",
      "comment": {
       "raw": [
        "Function that gives preset and return URL link on given preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => string"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "presets",
      "name": "presets",
      "comment": {
       "raw": [
        "Array of presets"
       ]
      },
      "typeValue": {
       "raw": "ITablePreset<TFilter, TViewState>[]"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IProcessRequest": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IProcessRequest",
     "nameFull": "IProcessRequest"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "IProcessRequest",
     "print": [
      "type IProcessRequest = <DataResponse = any>(url: string, method: ProcessRequestMethod, data?: any, options?: ApiCallOptions<DataResponse>) => Promise<DataResponse>;"
     ]
    }
   }
  },
  "@epam/uui-core:IRouter6": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IRouter6",
     "nameFull": "IRouter6"
    },
    "src": "uui-core/src/services/routing/interfaces/IRouter6.ts",
    "comment": {
     "raw": [
      "From: react-router version 6.14.0",
      "",
      " The type definition of the IRouter6 is not complete (It's OK as long as we only use a subset of its API)",
      "",
      " NOTE: Complete definitions of the router is located in @remix-run/router:",
      " https://github.com/remix-run/react-router/blob/main/packages/router/router.ts#L57"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "IRouter6",
     "print": [
      "/**",
      " * From: react-router version 6.14.0",
      " *",
      " * The type definition of the IRouter6 is not complete (It's OK as long as we only use a subset of its API)",
      " *",
      " * NOTE: Complete definitions of the router is located in @remix-run/router:",
      " * https://github.com/remix-run/react-router/blob/main/packages/router/router.ts#L57",
      " */",
      "type IRouter6 = {",
      "    state: RouterState;",
      "    navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;",
      "    navigate(to: number): Promise<void>;",
      "    getBlocker: (key: string, fn: BlockerFunction) => unknown;",
      "    subscribe: (fn: (state: RouterState) => void) => () => void;",
      "    deleteBlocker: (key: string) => void;",
      "    createHref(location: Location | URL): string;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "state",
      "name": "state",
      "typeValue": {
       "raw": "RouterState"
      },
      "typeValueRef": "@epam/uui-core:RouterState",
      "required": true
     },
     {
      "uid": "navigate",
      "name": "navigate",
      "typeValue": {
       "raw": "{ (to: To | null, opts?: RouterNavigateOptions | undefined): Promise<void>; (to: number): Promise<void>; }"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "getBlocker",
      "name": "getBlocker",
      "typeValue": {
       "raw": "(key: string, fn: BlockerFunction) => unknown"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "subscribe",
      "name": "subscribe",
      "typeValue": {
       "raw": "(fn: (state: RouterState) => void) => () => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "deleteBlocker",
      "name": "deleteBlocker",
      "typeValue": {
       "raw": "(key: string) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "createHref",
      "name": "createHref",
      "typeValue": {
       "raw": "(location: Location | URL) => string"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IRouterContext": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IRouterContext",
     "nameFull": "IRouterContext"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IRouterContext",
     "print": [
      "interface IRouterContext {",
      "    /** Returns current location link */",
      "    getCurrentLink(): Link;",
      "    /** Makes a SPA redirect to the provided link */",
      "    redirect(link?: Link | string): void;",
      "    /** Makes a SPA redirect to the provided link. Replaces the current entry in the history stack with a new one */",
      "    transfer(link: Link): void;",
      "    /** Returns true, if provided link match current location */",
      "    isActive(link: Link): boolean;",
      "    /** Creates href string based on provided link */",
      "    createHref(link: Link): string;",
      "    /** Subscribes to the router updates */",
      "    listen(listener: (link: Link) => void): () => void;",
      "    /**",
      "     * Blocks router changes. Can be used to show confirmation dialogs before the redirect.",
      "     * If block callback provide, all router changes will be blocked, you need to unblock and to retry them by yourself.",
      "     * */",
      "    block(callback: (link: Link) => void): () => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "getCurrentLink",
      "name": "getCurrentLink",
      "comment": {
       "raw": [
        "Returns current location link"
       ]
      },
      "typeValue": {
       "raw": "() => Link"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "redirect",
      "name": "redirect",
      "comment": {
       "raw": [
        "Makes a SPA redirect to the provided link"
       ]
      },
      "typeValue": {
       "raw": "(link?: string | Link | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "transfer",
      "name": "transfer",
      "comment": {
       "raw": [
        "Makes a SPA redirect to the provided link. Replaces the current entry in the history stack with a new one"
       ]
      },
      "typeValue": {
       "raw": "(link: Link) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "isActive",
      "name": "isActive",
      "comment": {
       "raw": [
        "Returns true, if provided link match current location"
       ]
      },
      "typeValue": {
       "raw": "(link: Link) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "createHref",
      "name": "createHref",
      "comment": {
       "raw": [
        "Creates href string based on provided link"
       ]
      },
      "typeValue": {
       "raw": "(link: Link) => string"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "listen",
      "name": "listen",
      "comment": {
       "raw": [
        "Subscribes to the router updates"
       ]
      },
      "typeValue": {
       "raw": "(listener: (link: Link) => void) => () => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "block",
      "name": "block",
      "comment": {
       "raw": [
        "Blocks router changes. Can be used to show confirmation dialogs before the redirect.",
        " If block callback provide, all router changes will be blocked, you need to unblock and to retry them by yourself."
       ]
      },
      "typeValue": {
       "raw": "(callback: (link: Link) => void) => () => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ITablePreset": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ITablePreset",
     "nameFull": "ITablePreset<TFilter, TViewState>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ITablePreset<TFilter, TViewState>",
     "print": [
      "interface ITablePreset<TFilter = any, TViewState = any> {",
      "    /** Name of the filter */",
      "    name: string;",
      "    /** Unique Id of the filter */",
      "    id: number | null;",
      "    /** If true, this preset can't be deleted or modified */",
      "    isReadonly?: boolean;",
      "    /**",
      "     * Determines the order in which this preset should appear in the presets list.",
      "     * The columns are sorted in ascending alphabetical order.",
      "     */",
      "    order?: string;",
      "    /** Filter value stored in the preset */",
      "    filter?: TFilter;",
      "    /** Columns config value stored in the preset */",
      "    columnsConfig?: ColumnsConfig;",
      "    /** Filters config value stored in the preset */",
      "    filtersConfig?: FiltersConfig;",
      "    /** Sorting value stored in the preset */",
      "    sorting?: SortingOption[];",
      "    /** View state value stored in the preset */",
      "    viewState?: TViewState;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "name",
      "name": "name",
      "comment": {
       "raw": [
        "Name of the filter"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "Unique Id of the filter"
       ]
      },
      "typeValue": {
       "raw": "null | number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "If true, this preset can't be deleted or modified"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "order",
      "name": "order",
      "comment": {
       "raw": [
        "Determines the order in which this preset should appear in the presets list.",
        " The columns are sorted in ascending alphabetical order."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "comment": {
       "raw": [
        "Filter value stored in the preset"
       ]
      },
      "typeValue": {
       "raw": "TFilter"
      },
      "required": false
     },
     {
      "uid": "columnsConfig",
      "name": "columnsConfig",
      "comment": {
       "raw": [
        "Columns config value stored in the preset"
       ]
      },
      "typeValue": {
       "raw": "ColumnsConfig"
      },
      "required": false
     },
     {
      "uid": "filtersConfig",
      "name": "filtersConfig",
      "comment": {
       "raw": [
        "Filters config value stored in the preset"
       ]
      },
      "typeValue": {
       "raw": "FiltersConfig<any>"
      },
      "required": false
     },
     {
      "uid": "sorting",
      "name": "sorting",
      "comment": {
       "raw": [
        "Sorting value stored in the preset"
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>[]"
      },
      "required": false
     },
     {
      "uid": "viewState",
      "name": "viewState",
      "comment": {
       "raw": [
        "View state value stored in the preset"
       ]
      },
      "typeValue": {
       "raw": "TViewState"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ITableState": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ITableState",
     "nameFull": "ITableState<TFilter, TViewState>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ITableState<TFilter, TViewState>",
     "print": [
      "interface ITableState<TFilter = Record<string, any>, TViewState = any> extends IPresetsApi<TFilter, TViewState> {",
      "    /** Table state value */",
      "    tableState: DataTableState<TFilter, TViewState>;",
      "    /** Function that updates table state value */",
      "    setTableState: Dispatch<SetStateAction<DataTableState<TFilter, TViewState>>>;",
      "    /** Function that updates filter value */",
      "    setFilter(filter: TFilter): void;",
      "    /** Function that updates columns config value */",
      "    setColumnsConfig(columnsConfig: ColumnsConfig): void;",
      "    /** Function that updates filters config value */",
      "    setFiltersConfig(filtersConfig: FiltersConfig): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "tableState",
      "name": "tableState",
      "comment": {
       "raw": [
        "Table state value"
       ]
      },
      "typeValue": {
       "raw": "DataTableState<TFilter, TViewState>"
      },
      "required": true
     },
     {
      "uid": "setTableState",
      "name": "setTableState",
      "comment": {
       "raw": [
        "Function that updates table state value"
       ]
      },
      "typeValue": {
       "raw": "React.Dispatch<React.SetStateAction<DataTableState<TFilter, TViewState>>>"
      },
      "typeValueRef": "@types/react:Dispatch",
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "setFilter",
      "name": "setFilter",
      "comment": {
       "raw": [
        "Function that updates filter value"
       ]
      },
      "typeValue": {
       "raw": "(filter: TFilter) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "setColumnsConfig",
      "name": "setColumnsConfig",
      "comment": {
       "raw": [
        "Function that updates columns config value"
       ]
      },
      "typeValue": {
       "raw": "(columnsConfig: ColumnsConfig) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "setFiltersConfig",
      "name": "setFiltersConfig",
      "comment": {
       "raw": [
        "Function that updates filters config value"
       ]
      },
      "typeValue": {
       "raw": "(filtersConfig: FiltersConfig<any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "activePresetId",
      "name": "activePresetId",
      "comment": {
       "raw": [
        "ID of selected preset"
       ]
      },
      "typeValue": {
       "raw": "null | number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": false
     },
     {
      "uid": "choosePreset",
      "name": "choosePreset",
      "comment": {
       "raw": [
        "Function that selects given preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": "createNewPreset",
      "name": "createNewPreset",
      "comment": {
       "raw": [
        "Function that gives preset name and create new preset with this name and current table state"
       ]
      },
      "typeValue": {
       "raw": "(name: string) => Promise<number>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": "hasPresetChanged",
      "name": "hasPresetChanged",
      "comment": {
       "raw": [
        "Function that gives preset and return if this preset changed or not"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": "duplicatePreset",
      "name": "duplicatePreset",
      "comment": {
       "raw": [
        "Function that gives the preset and creat their duplicate"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": "deletePreset",
      "name": "deletePreset",
      "comment": {
       "raw": [
        "Function that deletes given preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => Promise<void>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": "updatePreset",
      "name": "updatePreset",
      "comment": {
       "raw": [
        "Function that updates given preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => Promise<void>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": "getPresetLink",
      "name": "getPresetLink",
      "comment": {
       "raw": [
        "Function that gives preset and return URL link on given preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": "presets",
      "name": "presets",
      "comment": {
       "raw": [
        "Array of presets"
       ]
      },
      "typeValue": {
       "raw": "ITablePreset<TFilter, TViewState>[]"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ItemsMapParams": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ItemsMapParams",
     "nameFull": "ItemsMapParams<TItem, TId>"
    },
    "src": "uui-core/src/data/processing/views/tree/ItemsMap.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ItemsMapParams<TItem, TId>",
     "print": [
      "interface ItemsMapParams<TItem, TId> {",
      "    getId: (item: TItem) => TId;",
      "    complexIds?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "getId",
      "name": "getId",
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "complexIds",
      "name": "complexIds",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ItemsStorageParams": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ItemsStorageParams",
     "nameFull": "ItemsStorageParams<TItem, TId>"
    },
    "src": "uui-core/src/data/processing/views/tree/ItemsStorage.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ItemsStorageParams<TItem, TId>",
     "print": [
      "interface ItemsStorageParams<TItem, TId> {",
      "    items?: TItem[];",
      "    params: ItemsMapParams<TItem, TId>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "items",
      "name": "items",
      "typeValue": {
       "raw": "TItem[]"
      },
      "required": false
     },
     {
      "uid": "params",
      "name": "params",
      "typeValue": {
       "raw": "ItemsMapParams<TItem, TId>"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ITree": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ITree",
     "nameFull": "ITree<TItem, TId>"
    },
    "src": "uui-core/src/data/processing/views/tree/ITree.ts",
    "comment": {
     "raw": [
      "Proxy interface for a tree-like structure.",
      " It is library/data-structure shape agnostic.",
      " It provides a flexible way to represent existing data in a tree-like shape for the UUI internal usage, without repacking data in some specific form."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ITree<TItem, TId>",
     "print": [
      "/**",
      " * Proxy interface for a tree-like structure.",
      " * It is library/data-structure shape agnostic.",
      " * It provides a flexible way to represent existing data in a tree-like shape for the UUI internal usage, without repacking data in some specific form.",
      " */",
      "interface ITree<TItem, TId> {",
      "    /**",
      "     * Provides a tree configuration.",
      "     */",
      "    getParams(): ITreeParams<TItem, TId>;",
      "    /**",
      "     * Provides item's children and count/totalCount/assumedCount/status of its node.",
      "     * @param parentId - id of an item, which children info should be returned.",
      "     */",
      "    getItems(parentId?: TId): ITreeItemsInfo<TId>;",
      "    /**",
      "     * Item getter. Provides access to the item by its ID.",
      "     * @param id - ID of an item to be returned.",
      "     */",
      "    getById(id: TId): TItem | typeof NOT_FOUND_RECORD;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "getParams",
      "name": "getParams",
      "comment": {
       "raw": [
        "Provides a tree configuration."
       ]
      },
      "typeValue": {
       "raw": "() => ITreeParams<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "getItems",
      "name": "getItems",
      "comment": {
       "raw": [
        "Provides item's children and count/totalCount/assumedCount/status of its node.",
        " @param parentId - id of an item, which children info should be returned."
       ]
      },
      "typeValue": {
       "raw": "(parentId?: TId | undefined) => ITreeItemsInfo<TId>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "getById",
      "name": "getById",
      "comment": {
       "raw": [
        "Item getter. Provides access to the item by its ID.",
        " @param id - ID of an item to be returned."
       ]
      },
      "typeValue": {
       "raw": "(id: TId) => TItem | typeof NOT_FOUND_RECORD"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ITreeItemsInfo": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ITreeItemsInfo",
     "nameFull": "ITreeItemsInfo<TId>"
    },
    "src": "uui-core/src/data/processing/views/tree/ITree.ts",
    "comment": {
     "raw": [
      "Items, status and state information, like count/assumedCount/totalCount of the ITree node."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ITreeItemsInfo<TId>",
     "print": [
      "/**",
      " * Items, status and state information, like count/assumedCount/totalCount of the ITree node.",
      " */",
      "interface ITreeItemsInfo<TId> extends ITreeNodeInfo {",
      "    /**",
      "     * Tree node IDs.",
      "     */",
      "    ids: TId[];",
      "    /**",
      "     * ITree node loading/state status.",
      "     */",
      "    status: ITreeNodeStatus;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "ids",
      "name": "ids",
      "comment": {
       "raw": [
        "Tree node IDs."
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "required": true
     },
     {
      "uid": "status",
      "name": "status",
      "comment": {
       "raw": [
        "ITree node loading/state status."
       ]
      },
      "typeValue": {
       "raw": "'FULLY_LOADED' | 'PARTIALLY_LOADED' | 'EMPTY'"
      },
      "typeValueRef": "@epam/uui-core:ITreeNodeStatus",
      "editor": {
       "type": "oneOf",
       "options": [
        "FULLY_LOADED",
        "PARTIALLY_LOADED",
        "EMPTY"
       ]
      },
      "required": true
     },
     {
      "uid": "count",
      "name": "count",
      "comment": {
       "raw": [
        "Count of the records, returned from server or explicitly counted from data.",
        " If undefined, not all data is loaded from server."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:ITreeNodeInfo",
      "required": false
     },
     {
      "uid": "totalCount",
      "name": "totalCount",
      "comment": {
       "raw": [
        "Total count of the records. Usually, is returned from server on a root node fetch."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:ITreeNodeInfo",
      "required": false
     },
     {
      "uid": "assumedCount",
      "name": "assumedCount",
      "comment": {
       "raw": [
        "Assumed count, got from the `getChildCount` result."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:ITreeNodeInfo",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ITreeLoadResult": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ITreeLoadResult",
     "nameFull": "ITreeLoadResult<TItem, TId>"
    },
    "src": "uui-core/src/data/processing/views/tree/Tree.ts",
    "comment": {
     "raw": [
      "Structured result of tree records loading."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ITreeLoadResult<TItem, TId>",
     "print": [
      "/**",
      " * Structured result of tree records loading.",
      " */",
      "interface ITreeLoadResult<TItem, TId> {",
      "    /**",
      "     * Loaded records.",
      "     */",
      "    loadedItems: TItem[];",
      "    /**",
      "     * Loaded records, structured by parents IDs.",
      "     */",
      "    byParentId: IMap<TId, TId[]>;",
      "    /**",
      "     * Loading node info, like count/assumedCount/totalCount, by IDs.",
      "     */",
      "    nodeInfoById: IMap<TId, ITreeNodeInfo>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "loadedItems",
      "name": "loadedItems",
      "comment": {
       "raw": [
        "Loaded records."
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "required": true
     },
     {
      "uid": "byParentId",
      "name": "byParentId",
      "comment": {
       "raw": [
        "Loaded records, structured by parents IDs."
       ]
      },
      "typeValue": {
       "raw": "IMap<TId, TId[]>"
      },
      "required": true
     },
     {
      "uid": "nodeInfoById",
      "name": "nodeInfoById",
      "comment": {
       "raw": [
        "Loading node info, like count/assumedCount/totalCount, by IDs."
       ]
      },
      "typeValue": {
       "raw": "IMap<TId, ITreeNodeInfo>"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ITreeNodeInfo": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ITreeNodeInfo",
     "nameFull": "ITreeNodeInfo"
    },
    "src": "uui-core/src/data/processing/views/tree/treeStructure/types.ts",
    "comment": {
     "raw": [
      "Info of the tree node."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ITreeNodeInfo",
     "print": [
      "/**",
      " * Info of the tree node.",
      " */",
      "interface ITreeNodeInfo {",
      "    /**",
      "     * Count of the records, returned from server or explicitly counted from data.",
      "     * If undefined, not all data is loaded from server.",
      "     */",
      "    count?: number;",
      "    /**",
      "     * Total count of the records. Usually, is returned from server on a root node fetch.",
      "     */",
      "    totalCount?: number;",
      "    /**",
      "     * Assumed count, got from the `getChildCount` result.",
      "     */",
      "    assumedCount?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "count",
      "name": "count",
      "comment": {
       "raw": [
        "Count of the records, returned from server or explicitly counted from data.",
        " If undefined, not all data is loaded from server."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "totalCount",
      "name": "totalCount",
      "comment": {
       "raw": [
        "Total count of the records. Usually, is returned from server on a root node fetch."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "assumedCount",
      "name": "assumedCount",
      "comment": {
       "raw": [
        "Assumed count, got from the `getChildCount` result."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ITreeNodeStatus": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ITreeNodeStatus",
     "nameFull": "ITreeNodeStatus"
    },
    "src": "uui-core/src/data/processing/views/tree/ITree.ts",
    "comment": {
     "raw": [
      "ITree node loading/state status."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "'FULLY_LOADED' | 'PARTIALLY_LOADED' | 'EMPTY'",
     "print": [
      "/**",
      " * ITree node loading/state status.",
      " */",
      "type ITreeNodeStatus = typeof FULLY_LOADED | typeof PARTIALLY_LOADED | typeof EMPTY;"
     ]
    }
   }
  },
  "@epam/uui-core:ITreeParams": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ITreeParams",
     "nameFull": "ITreeParams<TItem, TId>"
    },
    "src": "uui-core/src/data/processing/views/tree/treeStructure/types.ts",
    "comment": {
     "raw": [
      "ITree configuration."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ITreeParams<TItem, TId>",
     "print": [
      "/**",
      " * ITree configuration.",
      " */",
      "interface ITreeParams<TItem, TId> {",
      "    /**",
      "     * Item ID getter.",
      "     */",
      "    getId(item: TItem): TId;",
      "    /**",
      "     * Item parent ID getter.",
      "     */",
      "    getParentId?(item: TItem): TId | undefined;",
      "    /**",
      "     * Item child count getter.",
      "     * @param item - item, which children count should be returned.",
      "     * @returns assumed children count. If unknown, it is better to return 1.",
      "     */",
      "    getChildCount?(item: TItem): number;",
      "    /**",
      "     * Enables support of ids of types Object, Array, etc.",
      "     */",
      "    complexIds?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "getId",
      "name": "getId",
      "comment": {
       "raw": [
        "Item ID getter."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "getParentId",
      "name": "getParentId",
      "comment": {
       "raw": [
        "Item parent ID getter."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId | undefined"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "getChildCount",
      "name": "getChildCount",
      "comment": {
       "raw": [
        "Item child count getter.",
        " @param item - item, which children count should be returned.",
        " @returns assumed children count. If unknown, it is better to return 1."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => number"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "complexIds",
      "name": "complexIds",
      "comment": {
       "raw": [
        "Enables support of ids of types Object, Array, etc."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:IUserSettingsContext": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "IUserSettingsContext",
     "nameFull": "IUserSettingsContext"
    },
    "src": "uui-core/src/types/contexts.ts",
    "comment": {
     "raw": [
      "Save data to the localStorage"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IUserSettingsContext",
     "print": [
      "/** Save data to the localStorage */",
      "interface IUserSettingsContext {",
      "    /** Gets value by key from localStorage */",
      "    get<TValue>(key: any, initial?: TValue): TValue;",
      "    /** Sets value by key from localStorage */",
      "    set<TValue>(key: any, value: TValue): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "get",
      "name": "get",
      "comment": {
       "raw": [
        "Gets value by key from localStorage"
       ]
      },
      "typeValue": {
       "raw": "<TValue>(key: any, initial?: TValue | undefined) => TValue"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "set",
      "name": "set",
      "comment": {
       "raw": [
        "Sets value by key from localStorage"
       ]
      },
      "typeValue": {
       "raw": "<TValue>(key: any, value: TValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:LabeledInputCoreProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "LabeledInputCoreProps",
     "nameFull": "LabeledInputCoreProps"
    },
    "src": "uui-core/src/types/components/LabeledInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "LabeledInputCoreProps",
     "print": [
      "interface LabeledInputCoreProps extends ICanBeInvalid, IHasCX, IHasLabel, IHasChildren, ICanBeRequired, IHasValidationMessage, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    /** Position of the label, relative to the wrapped component (top of left) */",
      "    labelPosition?: 'top' | 'left';",
      "    /** Info hint text to show in tooltip */",
      "    info?: ReactNode;",
      "    /** Marks related field as optional */",
      "    isOptional?: boolean;",
      "    /** HTML 'for' tag to bind the label to a component.",
      "     * Can be used when component can't be wrapped by the LabeledInput, e.g. when form is layed out as table with labels and inputs placed into different columns",
      "     */",
      "    htmlFor?: string;",
      "    /** A value from LabeledInput children */",
      "    value?: any;",
      "    /** Maximum text length, in characters */",
      "    maxLength?: number;",
      "    /** Showing current text length, in characters and maxLength */",
      "    charCounter?: boolean;",
      "    /** Additional info positioned at the bottom of LabeledInput */",
      "    footnote?: ReactNode;",
      "    /** Additional info positioned to the right side of label */",
      "    sidenote?: ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "labelPosition",
      "name": "labelPosition",
      "comment": {
       "raw": [
        "Position of the label, relative to the wrapped component (top of left)"
       ]
      },
      "typeValue": {
       "raw": "'top' | 'left'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "left"
       ]
      },
      "required": false
     },
     {
      "uid": "info",
      "name": "info",
      "comment": {
       "raw": [
        "Info hint text to show in tooltip"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": "isOptional",
      "name": "isOptional",
      "comment": {
       "raw": [
        "Marks related field as optional"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "htmlFor",
      "name": "htmlFor",
      "comment": {
       "raw": [
        "HTML 'for' tag to bind the label to a component.",
        " Can be used when component can't be wrapped by the LabeledInput, e.g. when form is layed out as table with labels and inputs placed into different columns"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "A value from LabeledInput children"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "required": false
     },
     {
      "uid": "maxLength",
      "name": "maxLength",
      "comment": {
       "raw": [
        "Maximum text length, in characters"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "charCounter",
      "name": "charCounter",
      "comment": {
       "raw": [
        "Showing current text length, in characters and maxLength"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "footnote",
      "name": "footnote",
      "comment": {
       "raw": [
        "Additional info positioned at the bottom of LabeledInput"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": "sidenote",
      "name": "sidenote",
      "comment": {
       "raw": [
        "Additional info positioned to the right side of label"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "label",
      "name": "label",
      "comment": {
       "raw": [
        "Component label. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in labels."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasLabel",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "validationMessage",
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasValidationMessage",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:LayoutLayer": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "LayoutLayer",
     "nameFull": "LayoutLayer"
    },
    "src": "uui-core/src/services/LayoutContext.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "LayoutLayer",
     "print": [
      "interface LayoutLayer {",
      "    /** ID of the layer */",
      "    id: number;",
      "    /** Level of the layer depth */",
      "    depth: number;",
      "    /** zIndex of the layer */",
      "    zIndex: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "ID of the layer"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": "depth",
      "name": "depth",
      "comment": {
       "raw": [
        "Level of the layer depth"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": "zIndex",
      "name": "zIndex",
      "comment": {
       "raw": [
        "zIndex of the layer"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:LazyDataSourceApi": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "LazyDataSourceApi",
     "nameFull": "LazyDataSourceApi<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "comment": {
     "raw": [
      "Defines API to retrieve data for DataSources"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "LazyDataSourceApi<TItem, TId, TFilter>",
     "print": [
      "/** Defines API to retrieve data for DataSources */",
      "type LazyDataSourceApi<TItem, TId, TFilter> = (",
      "/** Defines input arguments for Lazy Data Source APIs */",
      "request: LazyDataSourceApiRequest<TItem, TId, TFilter>, ",
      "/** Defines the context of API request. */",
      "context?: LazyDataSourceApiRequestContext<TItem, TId>) => Promise<LazyDataSourceApiResponse<TItem>>;"
     ]
    }
   }
  },
  "@epam/uui-core:LazyDataSourceApiRequest": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "LazyDataSourceApiRequest",
     "nameFull": "LazyDataSourceApiRequest<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "LazyDataSourceApiRequest<TItem, TId, TFilter>",
     "print": [
      "/** Defines input arguments for Lazy Data Source APIs */",
      "// eslint-disable-next-line @typescript-eslint/no-unused-vars",
      "interface LazyDataSourceApiRequest<TItem, TId = any, TFilter = {}> {",
      "    /**",
      "     * The filter object, by which data should be filtered.",
      "     * It is a merged result of filters from DataSourceState and LazyDataSourceProps.",
      "     */",
      "    filter?: TFilter;",
      "    /** Sorting options, by which data should be sorted. */",
      "    sorting?: SortingOption[];",
      "    /** The search string, by which data should be searched. */",
      "    search?: string;",
      "    /** Specifies a range of the rows to be retrieved. */",
      "    range?: LazyDataSourceApiRequestRange;",
      "    /** Page number for which data should be retrieved. */",
      "    page?: number;",
      "    /** Number of items at the page. */",
      "    pageSize?: number;",
      "    /**",
      "     * An array of item IDs to be retrieved from the API.",
      "     * Other request options like filter, search and others should be ignored when IDs are provided.",
      "     * Used for requesting specific items separately from the list.",
      "     */",
      "    ids?: TId[];",
      "}"
     ]
    },
    "props": [
     {
      "uid": "filter",
      "name": "filter",
      "comment": {
       "raw": [
        "The filter object, by which data should be filtered.",
        " It is a merged result of filters from DataSourceState and LazyDataSourceProps."
       ]
      },
      "typeValue": {
       "raw": "TFilter"
      },
      "required": false
     },
     {
      "uid": "sorting",
      "name": "sorting",
      "comment": {
       "raw": [
        "Sorting options, by which data should be sorted."
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>[]"
      },
      "required": false
     },
     {
      "uid": "search",
      "name": "search",
      "comment": {
       "raw": [
        "The search string, by which data should be searched."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "range",
      "name": "range",
      "comment": {
       "raw": [
        "Specifies a range of the rows to be retrieved."
       ]
      },
      "typeValue": {
       "raw": "LazyDataSourceApiRequestRange"
      },
      "required": false
     },
     {
      "uid": "page",
      "name": "page",
      "comment": {
       "raw": [
        "Page number for which data should be retrieved."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "pageSize",
      "name": "pageSize",
      "comment": {
       "raw": [
        "Number of items at the page."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "ids",
      "name": "ids",
      "comment": {
       "raw": [
        "An array of item IDs to be retrieved from the API.",
        " Other request options like filter, search and others should be ignored when IDs are provided.",
        " Used for requesting specific items separately from the list."
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:LazyDataSourceApiRequestContext": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "LazyDataSourceApiRequestContext",
     "nameFull": "LazyDataSourceApiRequestContext<TItem, TId>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "comment": {
     "raw": [
      "Defines the context of API request. E.g. parent if we require to retrieve sub-list of the tree"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "LazyDataSourceApiRequestContext<TItem, TId>",
     "print": [
      "/** Defines the context of API request. E.g. parent if we require to retrieve sub-list of the tree */",
      "interface LazyDataSourceApiRequestContext<TItem, TId> {",
      "    /**",
      "     * The ID of the parent item whose children are being requested.",
      "     * Used for lazy-loading data in tree lists.",
      "     */",
      "    parentId?: TId | null;",
      "    /** The parent entity whose children are being requested */",
      "    parent?: TItem | null;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "parentId",
      "name": "parentId",
      "comment": {
       "raw": [
        "The ID of the parent item whose children are being requested.",
        " Used for lazy-loading data in tree lists."
       ]
      },
      "typeValue": {
       "raw": "null | TId"
      },
      "required": false
     },
     {
      "uid": "parent",
      "name": "parent",
      "comment": {
       "raw": [
        "The parent entity whose children are being requested"
       ]
      },
      "typeValue": {
       "raw": "null | TItem"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:LazyDataSourceApiRequestRange": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "LazyDataSourceApiRequestRange",
     "nameFull": "LazyDataSourceApiRequestRange"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "comment": {
     "raw": [
      "The range (from/count) of required rows for LazyDataSourceApiRequest"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "LazyDataSourceApiRequestRange",
     "print": [
      "// Lazy Data Source API",
      "/** The range (from/count) of required rows for LazyDataSourceApiRequest */",
      "interface LazyDataSourceApiRequestRange {",
      "    /** Element index to fetch from. */",
      "    from: number;",
      "    /** Count of elements to be retrieved. */",
      "    count?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "from",
      "name": "from",
      "comment": {
       "raw": [
        "Element index to fetch from."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": "count",
      "name": "count",
      "comment": {
       "raw": [
        "Count of elements to be retrieved."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:LazyDataSourceApiResponse": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "LazyDataSourceApiResponse",
     "nameFull": "LazyDataSourceApiResponse<TItem>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "comment": {
     "raw": [
      "Defines Lazy Data Source APIs response shape"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "LazyDataSourceApiResponse<TItem>",
     "print": [
      "/** Defines Lazy Data Source APIs response shape */",
      "interface LazyDataSourceApiResponse<TItem> {",
      "    /** List of items which was requested via API */",
      "    items: TItem[];",
      "    /**",
      "     * API can set 'from' field if it wants to return more items than what was requested in request.range.",
      "     * This can be used to return all items at once (with from:0, count: totalCount), or align response to pages.",
      "     */",
      "    from?: number;",
      "    /**",
      "     * Total count of items which match current filter and pagination.",
      "     * If not specified, total count will be detected only when user scrolls to the end of the list.",
      "     */",
      "    count?: number;",
      "    /**",
      "     * Total count of items which match current filter.",
      "     */",
      "    totalCount?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "items",
      "name": "items",
      "comment": {
       "raw": [
        "List of items which was requested via API"
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "required": true
     },
     {
      "uid": "from",
      "name": "from",
      "comment": {
       "raw": [
        "API can set 'from' field if it wants to return more items than what was requested in request.range.",
        " This can be used to return all items at once (with from:0, count: totalCount), or align response to pages."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "count",
      "name": "count",
      "comment": {
       "raw": [
        "Total count of items which match current filter and pagination.",
        " If not specified, total count will be detected only when user scrolls to the end of the list."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "totalCount",
      "name": "totalCount",
      "comment": {
       "raw": [
        "Total count of items which match current filter."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:LazyDataSourceProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "LazyDataSourceProps",
     "nameFull": "LazyDataSourceProps<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/LazyDataSource.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "LazyDataSourceProps<TItem, TId, TFilter>",
     "print": [
      "interface LazyDataSourceProps<TItem, TId, TFilter> extends LazyListViewProps<TItem, TId, TFilter> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "getId",
      "name": "getId",
      "comment": {
       "raw": [
        "Should return unique ID of the TItem",
        " If omitted, we assume that every TItem has and unique id in its 'id' field.",
        " @param item - record, which id should be returned.",
        " @returns item id."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "complexIds",
      "name": "complexIds",
      "comment": {
       "raw": [
        "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
        " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "getParentId",
      "name": "getParentId",
      "comment": {
       "raw": [
        "Should return ID of the Item's parent. Usually it's i => i.parentId.",
        " If specified, Data Source will build items hierarchy.",
        "",
        " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
        " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
        "   to highlight parents with selected children",
        " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
        "   We need to load parents with a separate call (if backend doesn't pre-fetch them)",
        "",
        " @param item - record, which paretnId should be returned.",
        " @returns item parentId."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId | undefined"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "rowOptions",
      "name": "rowOptions",
      "comment": {
       "raw": [
        "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
        " See DataRowOptions for more details.",
        " If options depends on the item itself, use getRowOptions.",
        " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "DataRowOptions<TItem, TId>"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "getRowOptions",
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
        " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
        " See DataRowOptions for more details.",
        " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item - record, configuration should be returned for.",
        " @param index - index of a row. It is optional and should not be expected, that it is provided on every call."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index?: number | undefined) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "isFoldedByDefault",
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "Can be specified to unfold all or some items at start.",
        " If not specified, all rows would be folded.",
        " @param item - record, folding value should be returned for.",
        " @param dataSourceState - dataSource state with current `foldAll` value. It provides the possibility to respect foldAll change, if `isFoldedByDefault` is implemented."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, state: DataSourceState<TFilter, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "cascadeSelection",
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "selectAll",
      "name": "selectAll",
      "comment": {
       "raw": [
        "Enables/disables selectAll functionality. If disabled explicitly, `selectAll`, returned from a view is null.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "showSelectedOnly",
      "name": "showSelectedOnly",
      "comment": {
       "raw": [
        "Enables returning only selected rows and loading missing selected/checked rows, if it is required/possible.",
        " If enabled, `useView` returns only selected rows from `IDataSourceView.getVisibleRows`."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "patch",
      "name": "patch",
      "comment": {
       "raw": [
        "Items, which should be added/updated/deleted from the tree."
       ]
      },
      "typeValue": {
       "raw": "IMap<TId, TItem> | IImmutableMap<TId, TItem>"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "isDeleted",
      "name": "isDeleted",
      "comment": {
       "raw": [
        "To enable deleting of the items, it is required to specify getter for deleted state."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "getNewItemPosition",
      "name": "getNewItemPosition",
      "comment": {
       "raw": [
        "Provides information about the relative position of the new item.",
        " @param item - new item, position should be got for.",
        " @returns relative position in the list of items.",
        " @default PatchOrdering.TOP"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => symbol"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "getItemTemporaryOrder",
      "name": "getItemTemporaryOrder",
      "comment": {
       "raw": [
        "Provides information about the temporary order of the new item.",
        " @param item - new item, temporary order should be got for.",
        " @returns temporary order",
        "",
        " @experimental The API of this feature can be changed in the future releases."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "fixItemBetweenSortings",
      "name": "fixItemBetweenSortings",
      "comment": {
       "raw": [
        "If enabled, items position is fixed between sorting.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "sortBy",
      "name": "sortBy",
      "comment": {
       "raw": [
        "A pure function that gets sorting value for current sorting value"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:SortConfig",
      "required": false
     },
     {
      "uid": "api",
      "name": "api",
      "comment": {
       "raw": [
        "A function to retrieve the data, asynchronously.",
        " This function usually performs a REST API call.",
        " API is used to retrieve lists of items.",
        " It is expected to:",
        " - be able to handle paging (via from/count params)",
        " - be able to retrieve specific items by the list of their ids",
        " - be able to retrieve children by parents (when getChildCount is specified, and ctx.parentId is passed)"
       ]
      },
      "typeValue": {
       "raw": "LazyDataSourceApi<TItem, TId, TFilter>"
      },
      "typeValueRef": "@epam/uui-core:LazyDataSourceApi",
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:LazyDataSourceConfig",
      "required": true
     },
     {
      "uid": "getChildCount",
      "name": "getChildCount",
      "comment": {
       "raw": [
        "Should return number of children of the item.",
        " If it returns > 0, the item is assumed to have children and to be foldable.",
        " Usually, this value should be returned from API, as a field of a parent, e.g. { id: 1, name: 'London', childCount: 12 }.",
        " In this case, you can implement getChildCount as (i) => i.childCount.",
        "",
        " If you can't get number of children via API, you can return a guess value (avg number of children for this type of entity).",
        " Note, that this can lead to more API calls, and increased load times in the 'parallel' fetch mode."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => number"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:LazyDataSourceConfig",
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "comment": {
       "raw": [
        "A filter to pass to API.",
        " Note, that the DataSourceState also has a filter fields. These two filters are merged before API calls.",
        " Use this prop if you need to apply some filter in any case.",
        " Prefer to use filter in the DataSourceState for end-user editable filters."
       ]
      },
      "typeValue": {
       "raw": "TFilter"
      },
      "from": "@epam/uui-core:LazyDataSourceConfig",
      "required": false
     },
     {
      "uid": "fetchStrategy",
      "name": "fetchStrategy",
      "comment": {
       "raw": [
        "Defines how to fetch children:",
        " sequential (default) - fetch children for each parent one-by-one. Makes minimal over-querying, at cost of some speed.",
        " parallel - fetch children for several parents simultaneously. Can make a lot of over-querying for deep trees.",
        " Recommended for 2 level trees (grouping), as it makes no over-querying in this case, and is faster than sequential strategy."
       ]
      },
      "typeValue": {
       "raw": "'sequential' | 'parallel'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sequential",
        "parallel"
       ]
      },
      "from": "@epam/uui-core:LazyDataSourceConfig",
      "required": false
     },
     {
      "uid": "backgroundReload",
      "name": "backgroundReload",
      "comment": {
       "raw": [
        "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
        " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
        " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
        " It is required to add blockers/spinners to the components, built on your own.",
        " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:LazyDataSourceConfig",
      "required": false
     },
     {
      "uid": "flattenSearchResults",
      "name": "flattenSearchResults",
      "comment": {
       "raw": [
        "Falls back to plain list from tree, if there's search.",
        " Default is true.",
        "",
        " If enabled, and search is active:",
        " - API will be called with parentId and parent undefined",
        " - getChildCount is ignored, all nodes are assumed to have no children",
        "",
        " See more here: https://github.com/epam/UUI/issues/8"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:FlattenSearchResultsConfig",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:LazyListViewProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "LazyListViewProps",
     "nameFull": "LazyListViewProps<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/views/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "LazyListViewProps<TItem, TId, TFilter>",
     "print": [
      "interface LazyListViewProps<TItem, TId, TFilter> extends BaseListViewProps<TItem, TId, TFilter>, LazyDataSourceConfig<TItem, TId, TFilter> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "getId",
      "name": "getId",
      "comment": {
       "raw": [
        "Should return unique ID of the TItem",
        " If omitted, we assume that every TItem has and unique id in its 'id' field.",
        " @param item - record, which id should be returned.",
        " @returns item id."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "complexIds",
      "name": "complexIds",
      "comment": {
       "raw": [
        "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
        " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "getParentId",
      "name": "getParentId",
      "comment": {
       "raw": [
        "Should return ID of the Item's parent. Usually it's i => i.parentId.",
        " If specified, Data Source will build items hierarchy.",
        "",
        " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
        " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
        "   to highlight parents with selected children",
        " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
        "   We need to load parents with a separate call (if backend doesn't pre-fetch them)",
        "",
        " @param item - record, which paretnId should be returned.",
        " @returns item parentId."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId | undefined"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "rowOptions",
      "name": "rowOptions",
      "comment": {
       "raw": [
        "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
        " See DataRowOptions for more details.",
        " If options depends on the item itself, use getRowOptions.",
        " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "DataRowOptions<TItem, TId>"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "getRowOptions",
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
        " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
        " See DataRowOptions for more details.",
        " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item - record, configuration should be returned for.",
        " @param index - index of a row. It is optional and should not be expected, that it is provided on every call."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index?: number | undefined) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "isFoldedByDefault",
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "Can be specified to unfold all or some items at start.",
        " If not specified, all rows would be folded.",
        " @param item - record, folding value should be returned for.",
        " @param dataSourceState - dataSource state with current `foldAll` value. It provides the possibility to respect foldAll change, if `isFoldedByDefault` is implemented."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, state: DataSourceState<TFilter, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "cascadeSelection",
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "selectAll",
      "name": "selectAll",
      "comment": {
       "raw": [
        "Enables/disables selectAll functionality. If disabled explicitly, `selectAll`, returned from a view is null.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "showSelectedOnly",
      "name": "showSelectedOnly",
      "comment": {
       "raw": [
        "Enables returning only selected rows and loading missing selected/checked rows, if it is required/possible.",
        " If enabled, `useView` returns only selected rows from `IDataSourceView.getVisibleRows`."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "patch",
      "name": "patch",
      "comment": {
       "raw": [
        "Items, which should be added/updated/deleted from the tree."
       ]
      },
      "typeValue": {
       "raw": "IMap<TId, TItem> | IImmutableMap<TId, TItem>"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "isDeleted",
      "name": "isDeleted",
      "comment": {
       "raw": [
        "To enable deleting of the items, it is required to specify getter for deleted state."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "getNewItemPosition",
      "name": "getNewItemPosition",
      "comment": {
       "raw": [
        "Provides information about the relative position of the new item.",
        " @param item - new item, position should be got for.",
        " @returns relative position in the list of items.",
        " @default PatchOrdering.TOP"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => symbol"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "getItemTemporaryOrder",
      "name": "getItemTemporaryOrder",
      "comment": {
       "raw": [
        "Provides information about the temporary order of the new item.",
        " @param item - new item, temporary order should be got for.",
        " @returns temporary order",
        "",
        " @experimental The API of this feature can be changed in the future releases."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "fixItemBetweenSortings",
      "name": "fixItemBetweenSortings",
      "comment": {
       "raw": [
        "If enabled, items position is fixed between sorting.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "sortBy",
      "name": "sortBy",
      "comment": {
       "raw": [
        "A pure function that gets sorting value for current sorting value"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:SortConfig",
      "required": false
     },
     {
      "uid": "api",
      "name": "api",
      "comment": {
       "raw": [
        "A function to retrieve the data, asynchronously.",
        " This function usually performs a REST API call.",
        " API is used to retrieve lists of items.",
        " It is expected to:",
        " - be able to handle paging (via from/count params)",
        " - be able to retrieve specific items by the list of their ids",
        " - be able to retrieve children by parents (when getChildCount is specified, and ctx.parentId is passed)"
       ]
      },
      "typeValue": {
       "raw": "LazyDataSourceApi<TItem, TId, TFilter>"
      },
      "typeValueRef": "@epam/uui-core:LazyDataSourceApi",
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:LazyDataSourceConfig",
      "required": true
     },
     {
      "uid": "getChildCount",
      "name": "getChildCount",
      "comment": {
       "raw": [
        "Should return number of children of the item.",
        " If it returns > 0, the item is assumed to have children and to be foldable.",
        " Usually, this value should be returned from API, as a field of a parent, e.g. { id: 1, name: 'London', childCount: 12 }.",
        " In this case, you can implement getChildCount as (i) => i.childCount.",
        "",
        " If you can't get number of children via API, you can return a guess value (avg number of children for this type of entity).",
        " Note, that this can lead to more API calls, and increased load times in the 'parallel' fetch mode."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => number"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:LazyDataSourceConfig",
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "comment": {
       "raw": [
        "A filter to pass to API.",
        " Note, that the DataSourceState also has a filter fields. These two filters are merged before API calls.",
        " Use this prop if you need to apply some filter in any case.",
        " Prefer to use filter in the DataSourceState for end-user editable filters."
       ]
      },
      "typeValue": {
       "raw": "TFilter"
      },
      "from": "@epam/uui-core:LazyDataSourceConfig",
      "required": false
     },
     {
      "uid": "fetchStrategy",
      "name": "fetchStrategy",
      "comment": {
       "raw": [
        "Defines how to fetch children:",
        " sequential (default) - fetch children for each parent one-by-one. Makes minimal over-querying, at cost of some speed.",
        " parallel - fetch children for several parents simultaneously. Can make a lot of over-querying for deep trees.",
        " Recommended for 2 level trees (grouping), as it makes no over-querying in this case, and is faster than sequential strategy."
       ]
      },
      "typeValue": {
       "raw": "'sequential' | 'parallel'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sequential",
        "parallel"
       ]
      },
      "from": "@epam/uui-core:LazyDataSourceConfig",
      "required": false
     },
     {
      "uid": "backgroundReload",
      "name": "backgroundReload",
      "comment": {
       "raw": [
        "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
        " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
        " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
        " It is required to add blockers/spinners to the components, built on your own.",
        " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:LazyDataSourceConfig",
      "required": false
     },
     {
      "uid": "flattenSearchResults",
      "name": "flattenSearchResults",
      "comment": {
       "raw": [
        "Falls back to plain list from tree, if there's search.",
        " Default is true.",
        "",
        " If enabled, and search is active:",
        " - API will be called with parentId and parent undefined",
        " - getChildCount is ignored, all nodes are assumed to have no children",
        "",
        " See more here: https://github.com/epam/UUI/issues/8"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:FlattenSearchResultsConfig",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:Link": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "Link",
     "nameFull": "Link"
    },
    "src": "uui-core/src/types/objects.ts",
    "comment": {
     "raw": [
      "Defines location within SPA application"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "Link",
     "print": [
      "/** Defines location within SPA application */",
      "interface Link {",
      "    /** A URL pathname, beginning with a '/' */",
      "    pathname: string;",
      "    /** Object that will be parsed to the URL search params */",
      "    query?: any;",
      "    /** A URL search string, beginning with a '?' */",
      "    search?: string;",
      "    /** A unique string associated with this location. May be used to safely store",
      "     * and retrieve data in some other storage API, like `localStorage`.",
      "     *",
      "     * Note: This value is always \"default\" on the initial location.",
      "     */",
      "    key?: string;",
      "    /** A URL fragment identifier, beginning with a '#' */",
      "    hash?: string;",
      "    /** A value of arbitrary data associated with this location */",
      "    state?: any;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "pathname",
      "name": "pathname",
      "comment": {
       "raw": [
        "A URL pathname, beginning with a '/'"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": "query",
      "name": "query",
      "comment": {
       "raw": [
        "Object that will be parsed to the URL search params"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "required": false
     },
     {
      "uid": "search",
      "name": "search",
      "comment": {
       "raw": [
        "A URL search string, beginning with a '?'"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "comment": {
       "raw": [
        "A unique string associated with this location. May be used to safely store",
        " and retrieve data in some other storage API, like `localStorage`.",
        "",
        " Note: This value is always \"default\" on the initial location."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "hash",
      "name": "hash",
      "comment": {
       "raw": [
        "A URL fragment identifier, beginning with a '#'"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "state",
      "name": "state",
      "comment": {
       "raw": [
        "A value of arbitrary data associated with this location"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:Metadata": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "Metadata",
     "nameFull": "Metadata<T>"
    },
    "src": "uui-core/src/types/validation.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "Metadata<T>",
     "print": [
      "interface Metadata<T> extends IDisableable, ICanBeReadonly, ICanBeRequired {",
      "    /** Metadata for the nested fields */",
      "    props?: {",
      "        [P in keyof T]?: Metadata<T[P]>;",
      "    };",
      "    /**",
      "     * Metadata for all fields of current level of object.",
      "     * Usually used for consistent validation of arrays.",
      "     */",
      "    all?: Metadata<ElementType<T>>;",
      "    /** Defines minimal value to pass the validation */",
      "    minValue?: number;",
      "    /** Defines maximal value to pass the validation */",
      "    maxValue?: number;",
      "    /** Defines maximal length of the string to pass the validation */",
      "    maxLength?: number;",
      "    /** Array of your custom validators.",
      "     * Validator is a pure function that accept value and should return error message if this field is invalid.",
      "     * If validators provided, all other metadata options(e.g. isRequired, maxLength) will be ignored.",
      "     * */",
      "    validators?: CustomValidator<T>[];",
      "}"
     ]
    },
    "props": [
     {
      "uid": "props",
      "name": "props",
      "comment": {
       "raw": [
        "Metadata for the nested fields"
       ]
      },
      "typeValue": {
       "raw": "{ [P in keyof T]?: Metadata<T[P]> | undefined; }"
      },
      "required": false
     },
     {
      "uid": "all",
      "name": "all",
      "comment": {
       "raw": [
        "Metadata for all fields of current level of object.",
        " Usually used for consistent validation of arrays."
       ]
      },
      "typeValue": {
       "raw": "Metadata<ElementType<T>>"
      },
      "required": false
     },
     {
      "uid": "minValue",
      "name": "minValue",
      "comment": {
       "raw": [
        "Defines minimal value to pass the validation"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "maxValue",
      "name": "maxValue",
      "comment": {
       "raw": [
        "Defines maximal value to pass the validation"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "maxLength",
      "name": "maxLength",
      "comment": {
       "raw": [
        "Defines maximal length of the string to pass the validation"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "validators",
      "name": "validators",
      "comment": {
       "raw": [
        "Array of your custom validators.",
        " Validator is a pure function that accept value and should return error message if this field is invalid.",
        " If validators provided, all other metadata options(e.g. isRequired, maxLength) will be ignored."
       ]
      },
      "typeValue": {
       "raw": "CustomValidator<T>[]"
      },
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ModalBlockerProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ModalBlockerProps",
     "nameFull": "ModalBlockerProps"
    },
    "src": "uui-core/src/types/components/Modals.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ModalBlockerProps",
     "print": [
      "interface ModalBlockerProps extends IModal<any>, IHasCX, IHasChildren, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    /** Pass true to disabled locking focus inside modal.",
      "     * If omitted, first clickable element of modal will receive focus on mount and focus will be looped inside modal.",
      "     * */",
      "    disableFocusLock?: boolean;",
      "    /** Pass true to disabled modal closing by 'esc' key */",
      "    disableCloseByEsc?: boolean;",
      "    /** Pass true to disabled modal closing by click outside modal window */",
      "    disallowClickOutside?: boolean;",
      "    /**",
      "     * Pass true to disable modal close by router change.",
      "     * If omitted, modal window will be closed on any router change.",
      "     */",
      "    disableCloseOnRouterChange?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "disableFocusLock",
      "name": "disableFocusLock",
      "comment": {
       "raw": [
        "Pass true to disabled locking focus inside modal.",
        " If omitted, first clickable element of modal will receive focus on mount and focus will be looped inside modal."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "disableCloseByEsc",
      "name": "disableCloseByEsc",
      "comment": {
       "raw": [
        "Pass true to disabled modal closing by 'esc' key"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "disallowClickOutside",
      "name": "disallowClickOutside",
      "comment": {
       "raw": [
        "Pass true to disabled modal closing by click outside modal window"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "disableCloseOnRouterChange",
      "name": "disableCloseOnRouterChange",
      "comment": {
       "raw": [
        "Pass true to disable modal close by router change.",
        " If omitted, modal window will be closed on any router change."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "isActive",
      "name": "isActive",
      "comment": {
       "raw": [
        "Indicates whether the modal is currently displayed"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the modal"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "zIndex",
      "name": "zIndex",
      "comment": {
       "raw": [
        "Modal zIndex value. Calculated via LayoutContext."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "success",
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "abort",
      "name": "abort",
      "comment": {
       "raw": [
        "Call to close the modal with abort action. It's rejects `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "parameters",
      "name": "parameters",
      "comment": {
       "raw": [
        "Parameters that provided via second param of `modalContext.show` method"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": "depth",
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of current modal layer"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ModalFooterCoreProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ModalFooterCoreProps",
     "nameFull": "ModalFooterCoreProps"
    },
    "src": "uui-core/src/types/components/Modals.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ModalFooterCoreProps",
     "print": [
      "interface ModalFooterCoreProps extends IHasChildren, IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    /** Pass true to enable the top border of ModalFooter */",
      "    borderTop?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "borderTop",
      "name": "borderTop",
      "comment": {
       "raw": [
        "Pass true to enable the top border of ModalFooter"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ModalHeaderCoreProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ModalHeaderCoreProps",
     "nameFull": "ModalHeaderCoreProps"
    },
    "src": "uui-core/src/types/components/Modals.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ModalHeaderCoreProps",
     "print": [
      "interface ModalHeaderCoreProps extends IHasChildren, IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    /** Called when cross icon in ModalHeader is clicked */",
      "    onClose?: () => any;",
      "    /** Modal title to display in header */",
      "    title?: React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "onClose",
      "name": "onClose",
      "comment": {
       "raw": [
        "Called when cross icon in ModalHeader is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "title",
      "name": "title",
      "comment": {
       "raw": [
        "Modal title to display in header"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ModalOperation": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ModalOperation",
     "nameFull": "ModalOperation"
    },
    "src": "uui-core/src/services/ModalContext.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ModalOperation",
     "print": [
      "interface ModalOperation {",
      "    /** Modal component that should be rendered */",
      "    component?: React.ComponentType<any>;",
      "    /** Modal component props */",
      "    props: IModal<any>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "component",
      "name": "component",
      "comment": {
       "raw": [
        "Modal component that should be rendered"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<any, any> | React.FunctionComponent<any>"
      },
      "required": false
     },
     {
      "uid": "props",
      "name": "props",
      "comment": {
       "raw": [
        "Modal component props"
       ]
      },
      "typeValue": {
       "raw": "IModal<any, any>"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ModalWindowProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ModalWindowProps",
     "nameFull": "ModalWindowProps"
    },
    "src": "uui-core/src/types/components/Modals.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ModalWindowProps",
     "print": [
      "interface ModalWindowProps extends VPanelProps, IHasForwardedRef<HTMLDivElement> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "style",
      "name": "style",
      "comment": {
       "raw": [
        "Native style attributes"
       ]
      },
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-core:VPanelProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ModificationOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ModificationOptions",
     "nameFull": "ModificationOptions"
    },
    "src": "uui-core/src/data/processing/views/tree/ItemsStorage.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ModificationOptions",
     "print": [
      "interface ModificationOptions {",
      "    reset?: boolean;",
      "    on?: 'load' | 'patch';",
      "}"
     ]
    },
    "props": [
     {
      "uid": "reset",
      "name": "reset",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "on",
      "name": "on",
      "typeValue": {
       "raw": "'load' | 'patch'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "load",
        "patch"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:NotificationOperation": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "NotificationOperation",
     "nameFull": "NotificationOperation"
    },
    "src": "uui-core/src/services/NotificationContext.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "NotificationOperation",
     "print": [
      "interface NotificationOperation {",
      "    /** Notification component that should be rendered */",
      "    component: React.ComponentType<any>;",
      "    /** Notification component props */",
      "    props: INotification;",
      "    /** Notification config */",
      "    config: NotificationParams;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "component",
      "name": "component",
      "comment": {
       "raw": [
        "Notification component that should be rendered"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentType<any>"
      },
      "typeValueRef": "@types/react:ComponentType",
      "required": true
     },
     {
      "uid": "props",
      "name": "props",
      "comment": {
       "raw": [
        "Notification component props"
       ]
      },
      "typeValue": {
       "raw": "INotification"
      },
      "required": true
     },
     {
      "uid": "config",
      "name": "config",
      "comment": {
       "raw": [
        "Notification config"
       ]
      },
      "typeValue": {
       "raw": "NotificationParams"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:NotificationParams": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "NotificationParams",
     "nameFull": "NotificationParams"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "NotificationParams",
     "print": [
      "interface NotificationParams {",
      "    /** Notification visibility duration in ms",
      "     * If 'forever' value provided, notification required manual action for closing.",
      "     */",
      "    duration?: number | 'forever';",
      "    /** Position of notification depends on screen corners */",
      "    position?: 'bot-left' | 'bot-right' | 'top-left' | 'top-right' | 'top-center' | 'bot-center';",
      "}"
     ]
    },
    "props": [
     {
      "uid": "duration",
      "name": "duration",
      "comment": {
       "raw": [
        "Notification visibility duration in ms",
        " If 'forever' value provided, notification required manual action for closing."
       ]
      },
      "typeValue": {
       "raw": "number | 'forever'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "forever"
       ],
       "scalarTypeOption": "number"
      },
      "required": false
     },
     {
      "uid": "position",
      "name": "position",
      "comment": {
       "raw": [
        "Position of notification depends on screen corners"
       ]
      },
      "typeValue": {
       "raw": "'bot-left' | 'bot-right' | 'top-left' | 'top-right' | 'top-center' | 'bot-center'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "bot-left",
        "bot-right",
        "top-left",
        "top-right",
        "top-center",
        "bot-center"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:OnUpdate": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "OnUpdate",
     "nameFull": "OnUpdate<TId, TItem>"
    },
    "src": "uui-core/src/data/processing/views/tree/ItemsStorage.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "OnUpdate<TId, TItem>",
     "print": [
      "type OnUpdate<TId, TItem> = (newItemsMap: ItemsMap<TId, TItem>) => void;"
     ]
    }
   }
  },
  "@epam/uui-core:Overwrite": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "Overwrite",
     "nameFull": "Overwrite<T, U>"
    },
    "src": "uui-core/src/helpers/typeHelpers.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "Overwrite<T, U>",
     "print": [
      "type Overwrite<T, U> = DistributiveOmit<T, keyof U> & U;"
     ]
    }
   }
  },
  "@epam/uui-core:PatchOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "PatchOptions",
     "nameFull": "PatchOptions<TItem, TId>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "comment": {
     "raw": [
      "Patch tree configuration."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PatchOptions<TItem, TId>",
     "print": [
      "/**",
      " * Patch tree configuration.",
      " */",
      "interface PatchOptions<TItem, TId> extends SortConfig<TItem> {",
      "    /**",
      "     * Items, which should be added/updated/deleted from the tree.",
      "     */",
      "    patch?: IMap<TId, TItem> | IImmutableMap<TId, TItem>;",
      "    /**",
      "     * To enable deleting of the items, it is required to specify getter for deleted state.",
      "     */",
      "    isDeleted?(item: TItem): boolean;",
      "    /**",
      "     * Provides information about the relative position of the new item.",
      "     * @param item - new item, position should be got for.",
      "     * @returns relative position in the list of items.",
      "     * @default PatchOrdering.TOP",
      "     */",
      "    getNewItemPosition?: (item: TItem) => PatchOrderingType;",
      "    /**",
      "     *",
      "     * Provides information about the temporary order of the new item.",
      "     * @param item - new item, temporary order should be got for.",
      "     * @returns temporary order",
      "     *",
      "     * @experimental The API of this feature can be changed in the future releases.",
      "     */",
      "    getItemTemporaryOrder?: (item: TItem) => string;",
      "    /**",
      "     * If enabled, items position is fixed between sorting.",
      "     * @default true",
      "     */",
      "    fixItemBetweenSortings?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "patch",
      "name": "patch",
      "comment": {
       "raw": [
        "Items, which should be added/updated/deleted from the tree."
       ]
      },
      "typeValue": {
       "raw": "IMap<TId, TItem> | IImmutableMap<TId, TItem>"
      },
      "required": false
     },
     {
      "uid": "isDeleted",
      "name": "isDeleted",
      "comment": {
       "raw": [
        "To enable deleting of the items, it is required to specify getter for deleted state."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "getNewItemPosition",
      "name": "getNewItemPosition",
      "comment": {
       "raw": [
        "Provides information about the relative position of the new item.",
        " @param item - new item, position should be got for.",
        " @returns relative position in the list of items.",
        " @default PatchOrdering.TOP"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => symbol"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "getItemTemporaryOrder",
      "name": "getItemTemporaryOrder",
      "comment": {
       "raw": [
        "Provides information about the temporary order of the new item.",
        " @param item - new item, temporary order should be got for.",
        " @returns temporary order",
        "",
        " @experimental The API of this feature can be changed in the future releases."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "fixItemBetweenSortings",
      "name": "fixItemBetweenSortings",
      "comment": {
       "raw": [
        "If enabled, items position is fixed between sorting.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "sortBy",
      "name": "sortBy",
      "comment": {
       "raw": [
        "A pure function that gets sorting value for current sorting value"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:SortConfig",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:PatchOrderingType": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "PatchOrderingType",
     "nameFull": "PatchOrderingType"
    },
    "src": "uui-core/src/data/processing/views/tree/types.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "symbol",
     "print": [
      "type PatchOrderingType = typeof PatchOrdering.TOP | typeof PatchOrdering.BOTTOM;"
     ]
    }
   }
  },
  "@epam/uui-core:PickerBaseOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "PickerBaseOptions",
     "nameFull": "PickerBaseOptions<TItem, TId>"
    },
    "src": "uui-core/src/types/pickers.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "PickerBaseOptions<TItem, TId>",
     "print": [
      "type PickerBaseOptions<TItem, TId> = {",
      "    /** Name of the entity being selected. Affects wording like \"Please select [entity]\" */",
      "    entityName?: string;",
      "    /** Plural name of the entity being selected. Affects wording like \"X [entities] selected\" */",
      "    entityPluralName?: string;",
      "    /** Datasource to get data for the picker */",
      "    dataSource: IDataSource<TItem, TId, any>;",
      "    /** A pure function that gets entity name from entity object.",
      "     Default: (item) => item.name.",
      "     */",
      "    getName?: (item: TItem) => string;",
      "    /** Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc. */",
      "    renderRow?: (props: DataRowProps<TItem, TId>, dataSourceState: DataSourceState) => ReactNode;",
      "    /** Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks. */",
      "    getRowOptions?: (item: TItem, index: number) => DataRowOptions<TItem, TId>;",
      "    /** Overrides the default 'no records found' banner.",
      "     * The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything.  */",
      "    renderNotFound?: (props: {",
      "        search: string;",
      "        onClose: () => void;",
      "    }) => ReactNode;",
      "    /** Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers */",
      "    emptyValue?: undefined | null | [",
      "    ];",
      "    /** Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource */",
      "    sortBy?(item: TItem, sorting: SortingOption): any;",
      "    /** Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario. */",
      "    filter?: any;",
      "    /** Defines sorting to pass to the DataSource */",
      "    sorting?: SortingOption;",
      "    /**",
      "     * Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
      "     * - false: All nodes are selected independently (default).",
      "     * - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
      "     * - 'implicit': Selecting a parent node means that all children are considered checked.",
      "     *   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
      "     *   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
      "     *   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
      "     *   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked.",
      "     */",
      "    cascadeSelection?: CascadeSelection;",
      "    /** You can return true for all, or some items to fold them. */",
      "    isFoldedByDefault?(item: TItem): boolean;",
      "    /** Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field. */",
      "    getSearchFields?(item: TItem): string[];",
      "    /** Component ref */",
      "    ref?: React.Ref<PickerInputElement>;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "entityName",
      "name": "entityName",
      "comment": {
       "raw": [
        "Name of the entity being selected. Affects wording like \"Please select [entity]\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "entityPluralName",
      "name": "entityPluralName",
      "comment": {
       "raw": [
        "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "dataSource",
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<TItem, TId, any>"
      },
      "required": true
     },
     {
      "uid": "getName",
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "renderRow",
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<TItem, TId>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "getRowOptions",
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "renderNotFound",
      "name": "renderNotFound",
      "comment": {
       "raw": [
        "Overrides the default 'no records found' banner.",
        " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
       ]
      },
      "typeValue": {
       "raw": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "emptyValue",
      "name": "emptyValue",
      "comment": {
       "raw": [
        "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
       ]
      },
      "typeValue": {
       "raw": "null | []"
      },
      "required": false
     },
     {
      "uid": "sortBy",
      "name": "sortBy",
      "comment": {
       "raw": [
        "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "comment": {
       "raw": [
        "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "required": false
     },
     {
      "uid": "sorting",
      "name": "sorting",
      "comment": {
       "raw": [
        "Defines sorting to pass to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>"
      },
      "required": false
     },
     {
      "uid": "cascadeSelection",
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "required": false
     },
     {
      "uid": "isFoldedByDefault",
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "You can return true for all, or some items to fold them."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "getSearchFields",
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "ref",
      "name": "ref",
      "comment": {
       "raw": [
        "Component ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: PickerInputElement | null) => void | React.RefObject<PickerInputElement>"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:PickerBaseProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "PickerBaseProps",
     "nameFull": "PickerBaseProps<TItem, TId>"
    },
    "src": "uui-core/src/types/pickers.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType?: 'id' | undefined; } & IEditable<TId> & IAnalyticableOnChange<any> & PickerShowSelectedOnly | PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType: 'entity'; } & IEditable<TItem> & IAnalyticableOnChange<any> & PickerShowSelectedOnly | PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType?: 'id' | undefined; emptyValue?: [] | null | undefined; } & IEditable<TId[]> & IAnalyticableOnChange<any> & PickerShowSelectedOnly | PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]> & IAnalyticableOnChange<any> & PickerShowSelectedOnly",
     "print": [
      "type PickerBaseProps<TItem, TId> = PickerBaseOptions<TItem, TId> & PickerBindingProps<TItem, TId> & IAnalyticableOnChange<any> & PickerShowSelectedOnly;"
     ]
    },
    "props": [
     {
      "uid": "entityName",
      "name": "entityName",
      "comment": {
       "raw": [
        "Name of the entity being selected. Affects wording like \"Please select [entity]\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "entityPluralName",
      "name": "entityPluralName",
      "comment": {
       "raw": [
        "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "dataSource",
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<TItem, TId, any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": true
     },
     {
      "uid": "getName",
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "renderRow",
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<TItem, TId>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "getRowOptions",
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "renderNotFound",
      "name": "renderNotFound",
      "comment": {
       "raw": [
        "Overrides the default 'no records found' banner.",
        " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
       ]
      },
      "typeValue": {
       "raw": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "emptyValue",
      "name": "emptyValue",
      "comment": {
       "raw": [
        "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
       ]
      },
      "typeValue": {
       "raw": "null | []"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "sortBy",
      "name": "sortBy",
      "comment": {
       "raw": [
        "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "comment": {
       "raw": [
        "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "sorting",
      "name": "sorting",
      "comment": {
       "raw": [
        "Defines sorting to pass to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "cascadeSelection",
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "isFoldedByDefault",
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "You can return true for all, or some items to fold them."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "getSearchFields",
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "ref",
      "name": "ref",
      "comment": {
       "raw": [
        "Component ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: PickerInputElement | null) => void | React.RefObject<PickerInputElement>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "selectionMode",
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": "valueType",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: any, oldValue: any) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "showSelectedOnly",
      "name": "showSelectedOnly",
      "comment": {
       "raw": [
        "Enables/disables selected rows only in Picker."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PickerShowSelectedOnly",
      "required": false
     },
     {
      "uid": "valueType_2",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": "value_2",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_2",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "selectionMode_3",
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": "valueType_3",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": false
     },
     {
      "uid": "value_3",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_3",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "valueType_4",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": "value_4",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_4",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-core:PickerBindingProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "PickerBindingProps",
     "nameFull": "PickerBindingProps<TItem, TId>"
    },
    "src": "uui-core/src/types/pickers.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "{ selectionMode: 'single'; valueType?: 'id' | undefined; } & IEditable<TId> | { selectionMode: 'single'; valueType: 'entity'; } & IEditable<TItem> | { selectionMode: 'multi'; valueType?: 'id' | undefined; emptyValue?: [] | null | undefined; } & IEditable<TId[]> | { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]>",
     "print": [
      "type PickerBindingProps<TItem, TId> = SinglePickerProps<TId, TItem> | ArrayPickerProps<TId, TItem>;"
     ]
    },
    "props": [
     {
      "uid": "selectionMode",
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": "valueType",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "valueType_2",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": "value_2",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_2",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "selectionMode_3",
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": "valueType_3",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": false
     },
     {
      "uid": "emptyValue",
      "name": "emptyValue",
      "comment": {
       "raw": [
        "Defines what to use as an empty value. If other value provided, it will be assumed as selection"
       ]
      },
      "typeValue": {
       "raw": "null | []"
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": false
     },
     {
      "uid": "value_3",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_3",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "valueType_4",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": "value_4",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_4",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-core:PickerBindingValueType": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "PickerBindingValueType",
     "nameFull": "PickerBindingValueType"
    },
    "src": "uui-core/src/types/pickers.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "'scalar' | 'array'",
     "print": [
      "type PickerBindingValueType = 'scalar' | 'array';"
     ]
    }
   }
  },
  "@epam/uui-core:PickerFilterConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "PickerFilterConfig",
     "nameFull": "PickerFilterConfig<TFilter>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "PickerFilterConfig<TFilter>",
     "print": [
      "type PickerFilterConfig<TFilter> = FilterConfigBase<TFilter> & Pick<PickerBaseOptions<any, any>, 'dataSource' | 'getName' | 'renderRow'> & {",
      "    /** Type of the filter */",
      "    type: 'singlePicker' | 'multiPicker';",
      "    /**",
      "     * Pass false to hide search in picker body.",
      "     * If omitted, true value will be used.",
      "     */",
      "    showSearch?: boolean;",
      "    /** Height of picker items list in px. This height doesn't include height of body toolbars(sorting, predicates) */",
      "    maxBodyHeight?: number;",
      "    /**",
      "     * Enables highlighting of the items' text with search-matching results.",
      "     */",
      "    highlightSearchMatches?: boolean;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "title",
      "name": "title",
      "comment": {
       "raw": [
        "Title of the filter, displayed in filter toggler and filter body"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": true
     },
     {
      "uid": "field",
      "name": "field",
      "comment": {
       "raw": [
        "Field of filters object, where store the filter value"
       ]
      },
      "typeValue": {
       "raw": "keyof TFilter"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": true
     },
     {
      "uid": "columnKey",
      "name": "columnKey",
      "comment": {
       "raw": [
        "Key of the column to which the filter is attached.",
        " If omitted, filter won't be attached to the column."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": "isAlwaysVisible",
      "name": "isAlwaysVisible",
      "comment": {
       "raw": [
        "Pass true to make filter always visible in FilterPanel. User can't hide it via 'Add filter' dropdown"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": "predicates",
      "name": "predicates",
      "comment": {
       "raw": [
        "Array of available predicates for the filter. This predicated can be chosen by user and applied to the filter value."
       ]
      },
      "typeValue": {
       "raw": "IFilterPredicate[]"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": "maxCount",
      "name": "maxCount",
      "comment": {
       "raw": [
        "Count of words to show in the Filter toggler. By default, 2 item will be shown."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": "togglerWidth",
      "name": "togglerWidth",
      "comment": {
       "raw": [
        "Defines maxWidth of the filter toggler"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": "dataSource",
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<any, any, any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": true
     },
     {
      "uid": "getName",
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: any) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "renderRow",
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<any, any>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "type",
      "name": "type",
      "comment": {
       "raw": [
        "Type of the filter"
       ]
      },
      "typeValue": {
       "raw": "'singlePicker' | 'multiPicker'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "singlePicker",
        "multiPicker"
       ]
      },
      "required": true
     },
     {
      "uid": "showSearch",
      "name": "showSearch",
      "comment": {
       "raw": [
        "Pass false to hide search in picker body.",
        " If omitted, true value will be used."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "maxBodyHeight",
      "name": "maxBodyHeight",
      "comment": {
       "raw": [
        "Height of picker items list in px. This height doesn't include height of body toolbars(sorting, predicates)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "highlightSearchMatches",
      "name": "highlightSearchMatches",
      "comment": {
       "raw": [
        "Enables highlighting of the items' text with search-matching results."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:PickerFooterProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "PickerFooterProps",
     "nameFull": "PickerFooterProps<TItem, TId>"
    },
    "src": "uui-core/src/types/pickers.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "PickerFooterProps<TItem, TId>",
     "print": [
      "type PickerFooterProps<TItem, TId> = {",
      "    /** Instance of picker DataSource view */",
      "    view: IDataSourceView<TItem, TId, any>;",
      "    /** IEditable interface for the 'Show only selected' toggler */",
      "    showSelected: IEditable<boolean>;",
      "    /** Call to clear picker selection */",
      "    clearSelection: () => void;",
      "    /** If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected */",
      "    selectionMode: 'single' | 'multi';",
      "    /** If true, 'Clear' button will be disabled */",
      "    disableClear?: boolean;",
      "    /** Current selected items */",
      "    selection: PickerBindingProps<TItem, TId>['value'];",
      "    /** Defines a search value */",
      "    search: string;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "view",
      "name": "view",
      "comment": {
       "raw": [
        "Instance of picker DataSource view"
       ]
      },
      "typeValue": {
       "raw": "IDataSourceView<TItem, TId, any>"
      },
      "typeValueRef": "@epam/uui-core:IDataSourceView",
      "required": true
     },
     {
      "uid": "showSelected",
      "name": "showSelected",
      "comment": {
       "raw": [
        "IEditable interface for the 'Show only selected' toggler"
       ]
      },
      "typeValue": {
       "raw": "IEditable<boolean>"
      },
      "required": true
     },
     {
      "uid": "clearSelection",
      "name": "clearSelection",
      "comment": {
       "raw": [
        "Call to clear picker selection"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "selectionMode",
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'multi' | 'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi",
        "single"
       ]
      },
      "required": true
     },
     {
      "uid": "disableClear",
      "name": "disableClear",
      "comment": {
       "raw": [
        "If true, 'Clear' button will be disabled"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "selection",
      "name": "selection",
      "comment": {
       "raw": [
        "Current selected items"
       ]
      },
      "typeValue": {
       "raw": "TItem | TId | TId[] | TItem[]"
      },
      "required": true
     },
     {
      "uid": "search",
      "name": "search",
      "comment": {
       "raw": [
        "Defines a search value"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:PickerInputElement": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "PickerInputElement",
     "nameFull": "PickerInputElement"
    },
    "src": "uui-core/src/types/pickers.ts",
    "comment": {
     "raw": [
      "PickerInput element API. Is used to describe ref to the PickerInput component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerInputElement",
     "print": [
      "/**",
      " * PickerInput element API. Is used to describe ref to the PickerInput component.",
      " */",
      "interface PickerInputElement extends HTMLElement {",
      "    /**",
      "     * Closes PickerInput body.",
      "     */",
      "    closePickerBody?: () => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "closePickerBody",
      "name": "closePickerBody",
      "comment": {
       "raw": [
        "Closes PickerInput body."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "accessKey",
      "name": "accessKey",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/accessKey)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": true
     },
     {
      "uid": "accessKeyLabel",
      "name": "accessKeyLabel",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/accessKeyLabel)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": true
     },
     {
      "uid": "autocapitalize",
      "name": "autocapitalize",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": true
     },
     {
      "uid": "dir",
      "name": "dir",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dir)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": true
     },
     {
      "uid": "draggable",
      "name": "draggable",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/draggable)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": true
     },
     {
      "uid": "hidden",
      "name": "hidden",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/hidden)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": true
     },
     {
      "uid": "inert",
      "name": "inert",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/inert)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": true
     },
     {
      "uid": "innerText",
      "name": "innerText",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/innerText)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": true
     },
     {
      "uid": "lang",
      "name": "lang",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/lang)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": true
     },
     {
      "uid": "offsetHeight",
      "name": "offsetHeight",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetHeight)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": true
     },
     {
      "uid": "offsetLeft",
      "name": "offsetLeft",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetLeft)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": true
     },
     {
      "uid": "offsetParent",
      "name": "offsetParent",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetParent)"
       ]
      },
      "typeValue": {
       "raw": "null | Element"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": false
     },
     {
      "uid": "offsetTop",
      "name": "offsetTop",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetTop)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": true
     },
     {
      "uid": "offsetWidth",
      "name": "offsetWidth",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetWidth)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": true
     },
     {
      "uid": "outerText",
      "name": "outerText",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/outerText)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": true
     },
     {
      "uid": "popover",
      "name": "popover",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/popover)"
       ]
      },
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": false
     },
     {
      "uid": "spellcheck",
      "name": "spellcheck",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/spellcheck)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": true
     },
     {
      "uid": "title",
      "name": "title",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/title)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": true
     },
     {
      "uid": "translate",
      "name": "translate",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": true
     },
     {
      "uid": "attachInternals",
      "name": "attachInternals",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/attachInternals)"
       ]
      },
      "typeValue": {
       "raw": "() => ElementInternals"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": true
     },
     {
      "uid": "click",
      "name": "click",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/click)"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": true
     },
     {
      "uid": "hidePopover",
      "name": "hidePopover",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/hidePopover)"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": true
     },
     {
      "uid": "showPopover",
      "name": "showPopover",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/showPopover)"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": true
     },
     {
      "uid": "togglePopover",
      "name": "togglePopover",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/togglePopover)"
       ]
      },
      "typeValue": {
       "raw": "(force?: boolean | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": true
     },
     {
      "uid": "addEventListener",
      "name": "addEventListener",
      "typeValue": {
       "raw": "{ <K>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void; }"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": true
     },
     {
      "uid": "removeEventListener",
      "name": "removeEventListener",
      "typeValue": {
       "raw": "{ <K>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions | undefined): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void; }"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement",
      "required": true
     },
     {
      "uid": "attributes",
      "name": "attributes",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/attributes)"
       ]
      },
      "typeValue": {
       "raw": "NamedNodeMap"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "classList",
      "name": "classList",
      "comment": {
       "raw": [
        "Allows for manipulation of element's class content attribute as a set of whitespace-separated tokens through a DOMTokenList object.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/classList)"
       ]
      },
      "typeValue": {
       "raw": "DOMTokenList"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "className",
      "name": "className",
      "comment": {
       "raw": [
        "Returns the value of element's class content attribute. Can be set to change it.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/className)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "clientHeight",
      "name": "clientHeight",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/clientHeight)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "clientLeft",
      "name": "clientLeft",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/clientLeft)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "clientTop",
      "name": "clientTop",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/clientTop)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "clientWidth",
      "name": "clientWidth",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/clientWidth)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "Returns the value of element's id content attribute. Can be set to change it.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/id)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "localName",
      "name": "localName",
      "comment": {
       "raw": [
        "Returns the local name.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/localName)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "namespaceURI",
      "name": "namespaceURI",
      "comment": {
       "raw": [
        "Returns the namespace.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/namespaceURI)"
       ]
      },
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": false
     },
     {
      "uid": "onfullscreenchange",
      "name": "onfullscreenchange",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/fullscreenchange_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: Element, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": false
     },
     {
      "uid": "onfullscreenerror",
      "name": "onfullscreenerror",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/fullscreenerror_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: Element, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": false
     },
     {
      "uid": "outerHTML",
      "name": "outerHTML",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/outerHTML)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "ownerDocument",
      "name": "ownerDocument",
      "typeValue": {
       "raw": "Document"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "part",
      "name": "part",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/part)"
       ]
      },
      "typeValue": {
       "raw": "DOMTokenList"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "prefix",
      "name": "prefix",
      "comment": {
       "raw": [
        "Returns the namespace prefix.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/prefix)"
       ]
      },
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": false
     },
     {
      "uid": "scrollHeight",
      "name": "scrollHeight",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollHeight)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "scrollLeft",
      "name": "scrollLeft",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollLeft)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "scrollTop",
      "name": "scrollTop",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollTop)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "scrollWidth",
      "name": "scrollWidth",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollWidth)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "shadowRoot",
      "name": "shadowRoot",
      "comment": {
       "raw": [
        "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/shadowRoot)"
       ]
      },
      "typeValue": {
       "raw": "null | ShadowRoot"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": false
     },
     {
      "uid": "slot",
      "name": "slot",
      "comment": {
       "raw": [
        "Returns the value of element's slot content attribute. Can be set to change it.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/slot)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "tagName",
      "name": "tagName",
      "comment": {
       "raw": [
        "Returns the HTML-uppercased qualified name.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/tagName)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "attachShadow",
      "name": "attachShadow",
      "comment": {
       "raw": [
        "Creates a shadow root for element and returns it.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/attachShadow)"
       ]
      },
      "typeValue": {
       "raw": "(init: ShadowRootInit) => ShadowRoot"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "checkVisibility",
      "name": "checkVisibility",
      "typeValue": {
       "raw": "(options?: CheckVisibilityOptions | undefined) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "closest",
      "name": "closest",
      "comment": {
       "raw": [
        "Returns the first (starting at element) inclusive ancestor that matches selectors, and null otherwise.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/closest)"
       ]
      },
      "typeValue": {
       "raw": "{ <K>(selector: K): HTMLElementTagNameMap[K] | null; <K>(selector: K): SVGElementTagNameMap[K] | null; <K>(selector: K): MathMLElementTagNameMap[K] | null; <E>(selectors: string): E | null; }"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "computedStyleMap",
      "name": "computedStyleMap",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/computedStyleMap)"
       ]
      },
      "typeValue": {
       "raw": "() => StylePropertyMapReadOnly"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "getAttribute",
      "name": "getAttribute",
      "comment": {
       "raw": [
        "Returns element's first attribute whose qualified name is qualifiedName, and null if there is no such attribute otherwise.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getAttribute)"
       ]
      },
      "typeValue": {
       "raw": "(qualifiedName: string) => string | null"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "getAttributeNS",
      "name": "getAttributeNS",
      "comment": {
       "raw": [
        "Returns element's attribute whose namespace is namespace and local name is localName, and null if there is no such attribute otherwise.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getAttributeNS)"
       ]
      },
      "typeValue": {
       "raw": "(namespace: string | null, localName: string) => string | null"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "getAttributeNames",
      "name": "getAttributeNames",
      "comment": {
       "raw": [
        "Returns the qualified names of all element's attributes. Can contain duplicates.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getAttributeNames)"
       ]
      },
      "typeValue": {
       "raw": "() => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "getAttributeNode",
      "name": "getAttributeNode",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getAttributeNode)"
       ]
      },
      "typeValue": {
       "raw": "(qualifiedName: string) => Attr | null"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "getAttributeNodeNS",
      "name": "getAttributeNodeNS",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getAttributeNodeNS)"
       ]
      },
      "typeValue": {
       "raw": "(namespace: string | null, localName: string) => Attr | null"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "getBoundingClientRect",
      "name": "getBoundingClientRect",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getBoundingClientRect)"
       ]
      },
      "typeValue": {
       "raw": "() => DOMRect"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "getClientRects",
      "name": "getClientRects",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getClientRects)"
       ]
      },
      "typeValue": {
       "raw": "() => DOMRectList"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "getElementsByClassName",
      "name": "getElementsByClassName",
      "comment": {
       "raw": [
        "Returns a HTMLCollection of the elements in the object on which the method was invoked (a document or an element) that have all the classes given by classNames. The classNames argument is interpreted as a space-separated list of classes.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getElementsByClassName)"
       ]
      },
      "typeValue": {
       "raw": "(classNames: string) => HTMLCollectionOf<Element>"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "getElementsByTagName",
      "name": "getElementsByTagName",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getElementsByTagName)"
       ]
      },
      "typeValue": {
       "raw": "{ <K>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>; <K>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>; <K>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>; <K>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>; (qualifiedName: string): HTMLCollectionOf<Element>; }"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "getElementsByTagNameNS",
      "name": "getElementsByTagNameNS",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getElementsByTagNameNS)"
       ]
      },
      "typeValue": {
       "raw": "{ (namespaceURI: 'http://www.w3.org/1999/xhtml', localName: string): HTMLCollectionOf<HTMLElement>; (namespaceURI: 'http://www.w3.org/2000/svg', localName: string): HTMLCollectionOf<SVGElement>; (namespaceURI: 'http://www.w3.org/1998/Math/MathML', localName: string): HTMLCollectionOf<MathMLElement>; (namespace: string | null, localName: string): HTMLCollectionOf<Element>; }"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "hasAttribute",
      "name": "hasAttribute",
      "comment": {
       "raw": [
        "Returns true if element has an attribute whose qualified name is qualifiedName, and false otherwise.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/hasAttribute)"
       ]
      },
      "typeValue": {
       "raw": "(qualifiedName: string) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "hasAttributeNS",
      "name": "hasAttributeNS",
      "comment": {
       "raw": [
        "Returns true if element has an attribute whose namespace is namespace and local name is localName.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/hasAttributeNS)"
       ]
      },
      "typeValue": {
       "raw": "(namespace: string | null, localName: string) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "hasAttributes",
      "name": "hasAttributes",
      "comment": {
       "raw": [
        "Returns true if element has attributes, and false otherwise.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/hasAttributes)"
       ]
      },
      "typeValue": {
       "raw": "() => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "hasPointerCapture",
      "name": "hasPointerCapture",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/hasPointerCapture)"
       ]
      },
      "typeValue": {
       "raw": "(pointerId: number) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "insertAdjacentElement",
      "name": "insertAdjacentElement",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/insertAdjacentElement)"
       ]
      },
      "typeValue": {
       "raw": "(where: InsertPosition, element: Element) => Element | null"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "insertAdjacentHTML",
      "name": "insertAdjacentHTML",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/insertAdjacentHTML)"
       ]
      },
      "typeValue": {
       "raw": "(position: InsertPosition, text: string) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "insertAdjacentText",
      "name": "insertAdjacentText",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/insertAdjacentText)"
       ]
      },
      "typeValue": {
       "raw": "(where: InsertPosition, data: string) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "matches",
      "name": "matches",
      "comment": {
       "raw": [
        "Returns true if matching selectors against element's root yields element, and false otherwise.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/matches)"
       ]
      },
      "typeValue": {
       "raw": "(selectors: string) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "releasePointerCapture",
      "name": "releasePointerCapture",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/releasePointerCapture)"
       ]
      },
      "typeValue": {
       "raw": "(pointerId: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "removeAttribute",
      "name": "removeAttribute",
      "comment": {
       "raw": [
        "Removes element's first attribute whose qualified name is qualifiedName.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/removeAttribute)"
       ]
      },
      "typeValue": {
       "raw": "(qualifiedName: string) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "removeAttributeNS",
      "name": "removeAttributeNS",
      "comment": {
       "raw": [
        "Removes element's attribute whose namespace is namespace and local name is localName.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/removeAttributeNS)"
       ]
      },
      "typeValue": {
       "raw": "(namespace: string | null, localName: string) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "removeAttributeNode",
      "name": "removeAttributeNode",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/removeAttributeNode)"
       ]
      },
      "typeValue": {
       "raw": "(attr: Attr) => Attr"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "requestFullscreen",
      "name": "requestFullscreen",
      "comment": {
       "raw": [
        "Displays element fullscreen and resolves promise when done.",
        "",
        " When supplied, options's navigationUI member indicates whether showing navigation UI while in fullscreen is preferred or not. If set to \"show\", navigation simplicity is preferred over screen space, and if set to \"hide\", more screen space is preferred. User agents are always free to honor user preference over the application's. The default value \"auto\" indicates no application preference.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/requestFullscreen)"
       ]
      },
      "typeValue": {
       "raw": "(options?: FullscreenOptions | undefined) => Promise<void>"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "requestPointerLock",
      "name": "requestPointerLock",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/requestPointerLock)"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "scroll",
      "name": "scroll",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scroll)"
       ]
      },
      "typeValue": {
       "raw": "{ (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "scrollBy",
      "name": "scrollBy",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollBy)"
       ]
      },
      "typeValue": {
       "raw": "{ (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "scrollIntoView",
      "name": "scrollIntoView",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollIntoView)"
       ]
      },
      "typeValue": {
       "raw": "(arg?: boolean | ScrollIntoViewOptions | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "scrollTo",
      "name": "scrollTo",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollTo)"
       ]
      },
      "typeValue": {
       "raw": "{ (options?: ScrollToOptions | undefined): void; (x: number, y: number): void; }"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "setAttribute",
      "name": "setAttribute",
      "comment": {
       "raw": [
        "Sets the value of element's first attribute whose qualified name is qualifiedName to value.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/setAttribute)"
       ]
      },
      "typeValue": {
       "raw": "(qualifiedName: string, value: string) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "setAttributeNS",
      "name": "setAttributeNS",
      "comment": {
       "raw": [
        "Sets the value of element's attribute whose namespace is namespace and local name is localName to value.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/setAttributeNS)"
       ]
      },
      "typeValue": {
       "raw": "(namespace: string | null, qualifiedName: string, value: string) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "setAttributeNode",
      "name": "setAttributeNode",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/setAttributeNode)"
       ]
      },
      "typeValue": {
       "raw": "(attr: Attr) => Attr | null"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "setAttributeNodeNS",
      "name": "setAttributeNodeNS",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/setAttributeNodeNS)"
       ]
      },
      "typeValue": {
       "raw": "(attr: Attr) => Attr | null"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "setPointerCapture",
      "name": "setPointerCapture",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/setPointerCapture)"
       ]
      },
      "typeValue": {
       "raw": "(pointerId: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "toggleAttribute",
      "name": "toggleAttribute",
      "comment": {
       "raw": [
        "If force is not given, \"toggles\" qualifiedName, removing it if it is present and adding it if it is not present. If force is true, adds qualifiedName. If force is false, removes qualifiedName.",
        "",
        " Returns true if qualifiedName is now present, and false otherwise.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/toggleAttribute)"
       ]
      },
      "typeValue": {
       "raw": "(qualifiedName: string, force?: boolean | undefined) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "webkitMatchesSelector",
      "name": "webkitMatchesSelector",
      "comment": {
       "raw": [
        "@deprecated This is a legacy alias of `matches`.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/matches)"
       ],
       "tags": {
        "@deprecated": "This is a legacy alias of"
       }
      },
      "typeValue": {
       "raw": "(selectors: string) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Element",
      "required": true
     },
     {
      "uid": "baseURI",
      "name": "baseURI",
      "comment": {
       "raw": [
        "Returns node's node document's document base URL.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/baseURI)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "childNodes",
      "name": "childNodes",
      "comment": {
       "raw": [
        "Returns the children.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/childNodes)"
       ]
      },
      "typeValue": {
       "raw": "NodeListOf<ChildNode>"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "firstChild",
      "name": "firstChild",
      "comment": {
       "raw": [
        "Returns the first child.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/firstChild)"
       ]
      },
      "typeValue": {
       "raw": "null | ChildNode"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": false
     },
     {
      "uid": "isConnected",
      "name": "isConnected",
      "comment": {
       "raw": [
        "Returns true if node is connected and false otherwise.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/isConnected)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "lastChild",
      "name": "lastChild",
      "comment": {
       "raw": [
        "Returns the last child.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/lastChild)"
       ]
      },
      "typeValue": {
       "raw": "null | ChildNode"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": false
     },
     {
      "uid": "nextSibling",
      "name": "nextSibling",
      "comment": {
       "raw": [
        "Returns the next sibling.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/nextSibling)"
       ]
      },
      "typeValue": {
       "raw": "null | ChildNode"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": false
     },
     {
      "uid": "nodeName",
      "name": "nodeName",
      "comment": {
       "raw": [
        "Returns a string appropriate for the type of node.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/nodeName)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "nodeType",
      "name": "nodeType",
      "comment": {
       "raw": [
        "Returns the type of node.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/nodeType)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "nodeValue",
      "name": "nodeValue",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/nodeValue)"
       ]
      },
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": false
     },
     {
      "uid": "parentElement",
      "name": "parentElement",
      "comment": {
       "raw": [
        "Returns the parent element.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/parentElement)"
       ]
      },
      "typeValue": {
       "raw": "null | HTMLElement"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": false
     },
     {
      "uid": "parentNode",
      "name": "parentNode",
      "comment": {
       "raw": [
        "Returns the parent.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/parentNode)"
       ]
      },
      "typeValue": {
       "raw": "null | ParentNode"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": false
     },
     {
      "uid": "previousSibling",
      "name": "previousSibling",
      "comment": {
       "raw": [
        "Returns the previous sibling.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/previousSibling)"
       ]
      },
      "typeValue": {
       "raw": "null | ChildNode"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": false
     },
     {
      "uid": "textContent",
      "name": "textContent",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/textContent)"
       ]
      },
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": false
     },
     {
      "uid": "appendChild",
      "name": "appendChild",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/appendChild)"
       ]
      },
      "typeValue": {
       "raw": "<T extends Node>(node: T) => T"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "cloneNode",
      "name": "cloneNode",
      "comment": {
       "raw": [
        "Returns a copy of node. If deep is true, the copy also includes the node's descendants.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/cloneNode)"
       ]
      },
      "typeValue": {
       "raw": "(deep?: boolean | undefined) => Node"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "compareDocumentPosition",
      "name": "compareDocumentPosition",
      "comment": {
       "raw": [
        "Returns a bitmask indicating the position of other relative to node.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/compareDocumentPosition)"
       ]
      },
      "typeValue": {
       "raw": "(other: Node) => number"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "contains",
      "name": "contains",
      "comment": {
       "raw": [
        "Returns true if other is an inclusive descendant of node, and false otherwise.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/contains)"
       ]
      },
      "typeValue": {
       "raw": "(other: Node | null) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "getRootNode",
      "name": "getRootNode",
      "comment": {
       "raw": [
        "Returns node's root.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/getRootNode)"
       ]
      },
      "typeValue": {
       "raw": "(options?: GetRootNodeOptions | undefined) => Node"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "hasChildNodes",
      "name": "hasChildNodes",
      "comment": {
       "raw": [
        "Returns whether node has children.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/hasChildNodes)"
       ]
      },
      "typeValue": {
       "raw": "() => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "insertBefore",
      "name": "insertBefore",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/insertBefore)"
       ]
      },
      "typeValue": {
       "raw": "<T>(node: T, child: Node | null) => T"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "isDefaultNamespace",
      "name": "isDefaultNamespace",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/isDefaultNamespace)"
       ]
      },
      "typeValue": {
       "raw": "(namespace: string | null) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "isEqualNode",
      "name": "isEqualNode",
      "comment": {
       "raw": [
        "Returns whether node and otherNode have the same properties.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/isEqualNode)"
       ]
      },
      "typeValue": {
       "raw": "(otherNode: Node | null) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "isSameNode",
      "name": "isSameNode",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/isSameNode)"
       ]
      },
      "typeValue": {
       "raw": "(otherNode: Node | null) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "lookupNamespaceURI",
      "name": "lookupNamespaceURI",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/lookupNamespaceURI)"
       ]
      },
      "typeValue": {
       "raw": "(prefix: string | null) => string | null"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "lookupPrefix",
      "name": "lookupPrefix",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/lookupPrefix)"
       ]
      },
      "typeValue": {
       "raw": "(namespace: string | null) => string | null"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "normalize",
      "name": "normalize",
      "comment": {
       "raw": [
        "Removes empty exclusive Text nodes and concatenates the data of remaining contiguous exclusive Text nodes into the first of their nodes.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/normalize)"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "removeChild",
      "name": "removeChild",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/removeChild)"
       ]
      },
      "typeValue": {
       "raw": "<T extends Node>(child: T) => T"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "replaceChild",
      "name": "replaceChild",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/replaceChild)"
       ]
      },
      "typeValue": {
       "raw": "<T extends Node>(node: Node, child: T) => T"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "ELEMENT_NODE",
      "name": "ELEMENT_NODE",
      "comment": {
       "raw": [
        "node is an element."
       ]
      },
      "typeValue": {
       "raw": "1"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        1
       ]
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "ATTRIBUTE_NODE",
      "name": "ATTRIBUTE_NODE",
      "typeValue": {
       "raw": "2"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        2
       ]
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "TEXT_NODE",
      "name": "TEXT_NODE",
      "comment": {
       "raw": [
        "node is a Text node."
       ]
      },
      "typeValue": {
       "raw": "3"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        3
       ]
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "CDATA_SECTION_NODE",
      "name": "CDATA_SECTION_NODE",
      "comment": {
       "raw": [
        "node is a CDATASection node."
       ]
      },
      "typeValue": {
       "raw": "4"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        4
       ]
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "ENTITY_REFERENCE_NODE",
      "name": "ENTITY_REFERENCE_NODE",
      "typeValue": {
       "raw": "5"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        5
       ]
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "ENTITY_NODE",
      "name": "ENTITY_NODE",
      "typeValue": {
       "raw": "6"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        6
       ]
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "PROCESSING_INSTRUCTION_NODE",
      "name": "PROCESSING_INSTRUCTION_NODE",
      "comment": {
       "raw": [
        "node is a ProcessingInstruction node."
       ]
      },
      "typeValue": {
       "raw": "7"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        7
       ]
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "COMMENT_NODE",
      "name": "COMMENT_NODE",
      "comment": {
       "raw": [
        "node is a Comment node."
       ]
      },
      "typeValue": {
       "raw": "8"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        8
       ]
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "DOCUMENT_NODE",
      "name": "DOCUMENT_NODE",
      "comment": {
       "raw": [
        "node is a document."
       ]
      },
      "typeValue": {
       "raw": "9"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        9
       ]
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "DOCUMENT_TYPE_NODE",
      "name": "DOCUMENT_TYPE_NODE",
      "comment": {
       "raw": [
        "node is a doctype."
       ]
      },
      "typeValue": {
       "raw": "10"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        10
       ]
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "DOCUMENT_FRAGMENT_NODE",
      "name": "DOCUMENT_FRAGMENT_NODE",
      "comment": {
       "raw": [
        "node is a DocumentFragment node."
       ]
      },
      "typeValue": {
       "raw": "11"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        11
       ]
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "NOTATION_NODE",
      "name": "NOTATION_NODE",
      "typeValue": {
       "raw": "12"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        12
       ]
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "DOCUMENT_POSITION_DISCONNECTED",
      "name": "DOCUMENT_POSITION_DISCONNECTED",
      "comment": {
       "raw": [
        "Set when node and other are not in the same tree."
       ]
      },
      "typeValue": {
       "raw": "1"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        1
       ]
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "DOCUMENT_POSITION_PRECEDING",
      "name": "DOCUMENT_POSITION_PRECEDING",
      "comment": {
       "raw": [
        "Set when other is preceding node."
       ]
      },
      "typeValue": {
       "raw": "2"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        2
       ]
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "DOCUMENT_POSITION_FOLLOWING",
      "name": "DOCUMENT_POSITION_FOLLOWING",
      "comment": {
       "raw": [
        "Set when other is following node."
       ]
      },
      "typeValue": {
       "raw": "4"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        4
       ]
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "DOCUMENT_POSITION_CONTAINS",
      "name": "DOCUMENT_POSITION_CONTAINS",
      "comment": {
       "raw": [
        "Set when other is an ancestor of node."
       ]
      },
      "typeValue": {
       "raw": "8"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        8
       ]
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "DOCUMENT_POSITION_CONTAINED_BY",
      "name": "DOCUMENT_POSITION_CONTAINED_BY",
      "comment": {
       "raw": [
        "Set when other is a descendant of node."
       ]
      },
      "typeValue": {
       "raw": "16"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        16
       ]
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
      "name": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
      "typeValue": {
       "raw": "32"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        32
       ]
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Node",
      "required": true
     },
     {
      "uid": "dispatchEvent",
      "name": "dispatchEvent",
      "comment": {
       "raw": [
        "Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/dispatchEvent)"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:EventTarget",
      "required": true
     },
     {
      "uid": "ariaAtomic",
      "name": "ariaAtomic",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaAutoComplete",
      "name": "ariaAutoComplete",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaBusy",
      "name": "ariaBusy",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaChecked",
      "name": "ariaChecked",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaColCount",
      "name": "ariaColCount",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaColIndex",
      "name": "ariaColIndex",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaColSpan",
      "name": "ariaColSpan",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaCurrent",
      "name": "ariaCurrent",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaDisabled",
      "name": "ariaDisabled",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaExpanded",
      "name": "ariaExpanded",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaHasPopup",
      "name": "ariaHasPopup",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaHidden",
      "name": "ariaHidden",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaInvalid",
      "name": "ariaInvalid",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaKeyShortcuts",
      "name": "ariaKeyShortcuts",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaLabel",
      "name": "ariaLabel",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaLevel",
      "name": "ariaLevel",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaLive",
      "name": "ariaLive",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaModal",
      "name": "ariaModal",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaMultiLine",
      "name": "ariaMultiLine",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaMultiSelectable",
      "name": "ariaMultiSelectable",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaOrientation",
      "name": "ariaOrientation",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaPlaceholder",
      "name": "ariaPlaceholder",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaPosInSet",
      "name": "ariaPosInSet",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaPressed",
      "name": "ariaPressed",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaReadOnly",
      "name": "ariaReadOnly",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaRequired",
      "name": "ariaRequired",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaRoleDescription",
      "name": "ariaRoleDescription",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaRowCount",
      "name": "ariaRowCount",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaRowIndex",
      "name": "ariaRowIndex",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaRowSpan",
      "name": "ariaRowSpan",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaSelected",
      "name": "ariaSelected",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaSetSize",
      "name": "ariaSetSize",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaSort",
      "name": "ariaSort",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaValueMax",
      "name": "ariaValueMax",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaValueMin",
      "name": "ariaValueMin",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaValueNow",
      "name": "ariaValueNow",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "ariaValueText",
      "name": "ariaValueText",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "role",
      "name": "role",
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin",
      "required": false
     },
     {
      "uid": "animate",
      "name": "animate",
      "typeValue": {
       "raw": "(keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeAnimationOptions | undefined) => Animation"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Animatable",
      "required": true
     },
     {
      "uid": "getAnimations",
      "name": "getAnimations",
      "typeValue": {
       "raw": "(options?: GetAnimationsOptions | undefined) => Animation[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Animatable",
      "required": true
     },
     {
      "uid": "after",
      "name": "after",
      "typeValue": {
       "raw": "(...nodes: (string | Node)[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ChildNode",
      "required": true
     },
     {
      "uid": "before",
      "name": "before",
      "typeValue": {
       "raw": "(...nodes: (string | Node)[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ChildNode",
      "required": true
     },
     {
      "uid": "remove",
      "name": "remove",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ChildNode",
      "required": true
     },
     {
      "uid": "replaceWith",
      "name": "replaceWith",
      "typeValue": {
       "raw": "(...nodes: (string | Node)[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ChildNode",
      "required": true
     },
     {
      "uid": "innerHTML",
      "name": "innerHTML",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/innerHTML)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:InnerHTML",
      "required": true
     },
     {
      "uid": "nextElementSibling",
      "name": "nextElementSibling",
      "comment": {
       "raw": [
        "Returns the first following sibling that is an element, and null otherwise.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/nextElementSibling)"
       ]
      },
      "typeValue": {
       "raw": "null | Element"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:NonDocumentTypeChildNode",
      "required": false
     },
     {
      "uid": "previousElementSibling",
      "name": "previousElementSibling",
      "comment": {
       "raw": [
        "Returns the first preceding sibling that is an element, and null otherwise.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/previousElementSibling)"
       ]
      },
      "typeValue": {
       "raw": "null | Element"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:NonDocumentTypeChildNode",
      "required": false
     },
     {
      "uid": "childElementCount",
      "name": "childElementCount",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/childElementCount)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ParentNode",
      "required": true
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Returns the child elements.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/children)"
       ]
      },
      "typeValue": {
       "raw": "HTMLCollection"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ParentNode",
      "required": true
     },
     {
      "uid": "firstElementChild",
      "name": "firstElementChild",
      "comment": {
       "raw": [
        "Returns the first child that is an element, and null otherwise.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/firstElementChild)"
       ]
      },
      "typeValue": {
       "raw": "null | Element"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ParentNode",
      "required": false
     },
     {
      "uid": "lastElementChild",
      "name": "lastElementChild",
      "comment": {
       "raw": [
        "Returns the last child that is an element, and null otherwise.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/lastElementChild)"
       ]
      },
      "typeValue": {
       "raw": "null | Element"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ParentNode",
      "required": false
     },
     {
      "uid": "append",
      "name": "append",
      "comment": {
       "raw": [
        "Inserts nodes after the last child of node, while replacing strings in nodes with equivalent Text nodes.",
        "",
        " Throws a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/append)"
       ]
      },
      "typeValue": {
       "raw": "(...nodes: (string | Node)[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ParentNode",
      "required": true
     },
     {
      "uid": "prepend",
      "name": "prepend",
      "comment": {
       "raw": [
        "Inserts nodes before the first child of node, while replacing strings in nodes with equivalent Text nodes.",
        "",
        " Throws a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/prepend)"
       ]
      },
      "typeValue": {
       "raw": "(...nodes: (string | Node)[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ParentNode",
      "required": true
     },
     {
      "uid": "querySelector",
      "name": "querySelector",
      "comment": {
       "raw": [
        "Returns the first element that is a descendant of node that matches selectors.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)"
       ]
      },
      "typeValue": {
       "raw": "{ <K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null; <K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K] | null; <K extends keyof MathMLElementTagNameMap>(selectors: K): MathMLElementTagNameMap[K] | null; <K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): HTMLElementDeprecatedTagNameMap[K] | null; <E extends Element = Element>(selectors: string): E | null; }"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ParentNode",
      "required": true
     },
     {
      "uid": "querySelectorAll",
      "name": "querySelectorAll",
      "comment": {
       "raw": [
        "Returns all element descendants of node that match selectors.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)"
       ]
      },
      "typeValue": {
       "raw": "{ <K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>; <K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<SVGElementTagNameMap[K]>; <K extends keyof MathMLElementTagNameMap>(selectors: K): NodeListOf<MathMLElementTagNameMap[K]>; <K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): NodeListOf<HTMLElementDeprecatedTagNameMap[K]>; <E extends Element = Element>(selectors: string): NodeListOf<E>; }"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ParentNode",
      "required": true
     },
     {
      "uid": "replaceChildren",
      "name": "replaceChildren",
      "comment": {
       "raw": [
        "Replace all children of node with nodes, while replacing strings in nodes with equivalent Text nodes.",
        "",
        " Throws a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/replaceChildren)"
       ]
      },
      "typeValue": {
       "raw": "(...nodes: (string | Node)[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ParentNode",
      "required": true
     },
     {
      "uid": "assignedSlot",
      "name": "assignedSlot",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/assignedSlot)"
       ]
      },
      "typeValue": {
       "raw": "null | HTMLSlotElement"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Slottable",
      "required": false
     },
     {
      "uid": "attributeStyleMap",
      "name": "attributeStyleMap",
      "typeValue": {
       "raw": "StylePropertyMap"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ElementCSSInlineStyle",
      "required": true
     },
     {
      "uid": "style",
      "name": "style",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/style)"
       ]
      },
      "typeValue": {
       "raw": "CSSStyleDeclaration"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ElementCSSInlineStyle",
      "required": true
     },
     {
      "uid": "contentEditable",
      "name": "contentEditable",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/contentEditable)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ElementContentEditable",
      "required": true
     },
     {
      "uid": "enterKeyHint",
      "name": "enterKeyHint",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/enterKeyHint)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ElementContentEditable",
      "required": true
     },
     {
      "uid": "inputMode",
      "name": "inputMode",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/inputMode)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ElementContentEditable",
      "required": true
     },
     {
      "uid": "isContentEditable",
      "name": "isContentEditable",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/isContentEditable)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:ElementContentEditable",
      "required": true
     },
     {
      "uid": "onabort",
      "name": "onabort",
      "comment": {
       "raw": [
        "Fires when the user aborts the download.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/abort_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: UIEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onanimationcancel",
      "name": "onanimationcancel",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationcancel_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: AnimationEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onanimationend",
      "name": "onanimationend",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationend_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: AnimationEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onanimationiteration",
      "name": "onanimationiteration",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: AnimationEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onanimationstart",
      "name": "onanimationstart",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: AnimationEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onauxclick",
      "name": "onauxclick",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/auxclick_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: MouseEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onbeforeinput",
      "name": "onbeforeinput",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/beforeinput_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: InputEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onblur",
      "name": "onblur",
      "comment": {
       "raw": [
        "Fires when the object loses the input focus.",
        " @param ev The focus event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/blur_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: FocusEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "oncancel",
      "name": "oncancel",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/cancel_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "oncanplay",
      "name": "oncanplay",
      "comment": {
       "raw": [
        "Occurs when playback is possible, but would require further buffering.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplay_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "oncanplaythrough",
      "name": "oncanplaythrough",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplaythrough_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onchange",
      "name": "onchange",
      "comment": {
       "raw": [
        "Fires when the contents of the object or selection have changed.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/change_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onclick",
      "name": "onclick",
      "comment": {
       "raw": [
        "Fires when the user clicks the left mouse button on the object",
        " @param ev The mouse event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/click_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: MouseEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onclose",
      "name": "onclose",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/close_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "oncontextmenu",
      "name": "oncontextmenu",
      "comment": {
       "raw": [
        "Fires when the user clicks the right mouse button in the client area, opening the context menu.",
        " @param ev The mouse event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/contextmenu_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: MouseEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "oncopy",
      "name": "oncopy",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/copy_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: ClipboardEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "oncuechange",
      "name": "oncuechange",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/cuechange_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "oncut",
      "name": "oncut",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/cut_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: ClipboardEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "ondblclick",
      "name": "ondblclick",
      "comment": {
       "raw": [
        "Fires when the user double-clicks the object.",
        " @param ev The mouse event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/dblclick_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: MouseEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "ondrag",
      "name": "ondrag",
      "comment": {
       "raw": [
        "Fires on the source object continuously during a drag operation.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/drag_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: DragEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "ondragend",
      "name": "ondragend",
      "comment": {
       "raw": [
        "Fires on the source object when the user releases the mouse at the close of a drag operation.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragend_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: DragEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "ondragenter",
      "name": "ondragenter",
      "comment": {
       "raw": [
        "Fires on the target element when the user drags the object to a valid drop target.",
        " @param ev The drag event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragenter_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: DragEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "ondragleave",
      "name": "ondragleave",
      "comment": {
       "raw": [
        "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.",
        " @param ev The drag event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragleave_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: DragEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "ondragover",
      "name": "ondragover",
      "comment": {
       "raw": [
        "Fires on the target element continuously while the user drags the object over a valid drop target.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragover_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: DragEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "ondragstart",
      "name": "ondragstart",
      "comment": {
       "raw": [
        "Fires on the source object when the user starts to drag a text selection or selected object.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragstart_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: DragEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "ondrop",
      "name": "ondrop",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/drop_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: DragEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "ondurationchange",
      "name": "ondurationchange",
      "comment": {
       "raw": [
        "Occurs when the duration attribute is updated.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/durationchange_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onemptied",
      "name": "onemptied",
      "comment": {
       "raw": [
        "Occurs when the media element is reset to its initial state.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/emptied_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onended",
      "name": "onended",
      "comment": {
       "raw": [
        "Occurs when the end of playback is reached.",
        " @param ev The event",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ended_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onerror",
      "name": "onerror",
      "comment": {
       "raw": [
        "Fires when an error occurs during object loading.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/error_event)"
       ]
      },
      "typeValue": {
       "raw": "OnErrorEventHandler"
      },
      "typeValueRef": "node_modules/typescript/lib/lib.dom.d.ts:OnErrorEventHandler",
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onfocus",
      "name": "onfocus",
      "comment": {
       "raw": [
        "Fires when the object receives focus.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/focus_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: FocusEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onformdata",
      "name": "onformdata",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/formdata_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: FormDataEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "ongotpointercapture",
      "name": "ongotpointercapture",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/gotpointercapture_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: PointerEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "oninput",
      "name": "oninput",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/input_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "oninvalid",
      "name": "oninvalid",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/invalid_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onkeydown",
      "name": "onkeydown",
      "comment": {
       "raw": [
        "Fires when the user presses a key.",
        " @param ev The keyboard event",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keydown_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: KeyboardEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onkeypress",
      "name": "onkeypress",
      "comment": {
       "raw": [
        "Fires when the user presses an alphanumeric key.",
        " @param ev The event.",
        " @deprecated",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keypress_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: KeyboardEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onkeyup",
      "name": "onkeyup",
      "comment": {
       "raw": [
        "Fires when the user releases a key.",
        " @param ev The keyboard event",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keyup_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: KeyboardEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onload",
      "name": "onload",
      "comment": {
       "raw": [
        "Fires immediately after the browser loads the object.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGElement/load_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onloadeddata",
      "name": "onloadeddata",
      "comment": {
       "raw": [
        "Occurs when media data is loaded at the current playback position.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadeddata_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onloadedmetadata",
      "name": "onloadedmetadata",
      "comment": {
       "raw": [
        "Occurs when the duration and dimensions of the media have been determined.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadedmetadata_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onloadstart",
      "name": "onloadstart",
      "comment": {
       "raw": [
        "Occurs when Internet Explorer begins looking for media data.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadstart_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onlostpointercapture",
      "name": "onlostpointercapture",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/lostpointercapture_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: PointerEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onmousedown",
      "name": "onmousedown",
      "comment": {
       "raw": [
        "Fires when the user clicks the object with either mouse button.",
        " @param ev The mouse event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mousedown_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: MouseEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onmouseenter",
      "name": "onmouseenter",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseenter_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: MouseEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onmouseleave",
      "name": "onmouseleave",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseleave_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: MouseEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onmousemove",
      "name": "onmousemove",
      "comment": {
       "raw": [
        "Fires when the user moves the mouse over the object.",
        " @param ev The mouse event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mousemove_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: MouseEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onmouseout",
      "name": "onmouseout",
      "comment": {
       "raw": [
        "Fires when the user moves the mouse pointer outside the boundaries of the object.",
        " @param ev The mouse event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseout_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: MouseEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onmouseover",
      "name": "onmouseover",
      "comment": {
       "raw": [
        "Fires when the user moves the mouse pointer into the object.",
        " @param ev The mouse event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseover_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: MouseEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onmouseup",
      "name": "onmouseup",
      "comment": {
       "raw": [
        "Fires when the user releases a mouse button while the mouse is over the object.",
        " @param ev The mouse event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseup_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: MouseEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onpaste",
      "name": "onpaste",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/paste_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: ClipboardEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onpause",
      "name": "onpause",
      "comment": {
       "raw": [
        "Occurs when playback is paused.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/pause_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onplay",
      "name": "onplay",
      "comment": {
       "raw": [
        "Occurs when the play method is requested.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/play_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onplaying",
      "name": "onplaying",
      "comment": {
       "raw": [
        "Occurs when the audio or video has started playing.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/playing_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onpointercancel",
      "name": "onpointercancel",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointercancel_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: PointerEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onpointerdown",
      "name": "onpointerdown",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerdown_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: PointerEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onpointerenter",
      "name": "onpointerenter",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerenter_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: PointerEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onpointerleave",
      "name": "onpointerleave",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerleave_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: PointerEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onpointermove",
      "name": "onpointermove",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointermove_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: PointerEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onpointerout",
      "name": "onpointerout",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerout_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: PointerEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onpointerover",
      "name": "onpointerover",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerover_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: PointerEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onpointerup",
      "name": "onpointerup",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerup_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: PointerEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onprogress",
      "name": "onprogress",
      "comment": {
       "raw": [
        "Occurs to indicate progress while downloading media data.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/progress_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onratechange",
      "name": "onratechange",
      "comment": {
       "raw": [
        "Occurs when the playback rate is increased or decreased.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ratechange_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onreset",
      "name": "onreset",
      "comment": {
       "raw": [
        "Fires when the user resets a form.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/reset_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onresize",
      "name": "onresize",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/resize_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: UIEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onscroll",
      "name": "onscroll",
      "comment": {
       "raw": [
        "Fires when the user repositions the scroll box in the scroll bar on the object.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scroll_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onscrollend",
      "name": "onscrollend",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scrollend_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onsecuritypolicyviolation",
      "name": "onsecuritypolicyviolation",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/securitypolicyviolation_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onseeked",
      "name": "onseeked",
      "comment": {
       "raw": [
        "Occurs when the seek operation ends.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeked_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onseeking",
      "name": "onseeking",
      "comment": {
       "raw": [
        "Occurs when the current playback position is moved.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeking_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onselect",
      "name": "onselect",
      "comment": {
       "raw": [
        "Fires when the current selection changes.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/select_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onselectionchange",
      "name": "onselectionchange",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/selectionchange_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onselectstart",
      "name": "onselectstart",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/selectstart_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onslotchange",
      "name": "onslotchange",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/slotchange_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onstalled",
      "name": "onstalled",
      "comment": {
       "raw": [
        "Occurs when the download has stopped.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/stalled_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onsubmit",
      "name": "onsubmit",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/submit_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: SubmitEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onsuspend",
      "name": "onsuspend",
      "comment": {
       "raw": [
        "Occurs if the load operation has been intentionally halted.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/suspend_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "ontimeupdate",
      "name": "ontimeupdate",
      "comment": {
       "raw": [
        "Occurs to indicate the current playback position.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/timeupdate_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "ontoggle",
      "name": "ontoggle",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement/toggle_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "ontouchcancel",
      "name": "ontouchcancel",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchcancel_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: TouchEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "ontouchend",
      "name": "ontouchend",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchend_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: TouchEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "ontouchmove",
      "name": "ontouchmove",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchmove_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: TouchEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "ontouchstart",
      "name": "ontouchstart",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchstart_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: TouchEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "ontransitioncancel",
      "name": "ontransitioncancel",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitioncancel_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: TransitionEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "ontransitionend",
      "name": "ontransitionend",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: TransitionEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "ontransitionrun",
      "name": "ontransitionrun",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionrun_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: TransitionEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "ontransitionstart",
      "name": "ontransitionstart",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionstart_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: TransitionEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onvolumechange",
      "name": "onvolumechange",
      "comment": {
       "raw": [
        "Occurs when the volume is changed, or playback is muted or unmuted.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/volumechange_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onwaiting",
      "name": "onwaiting",
      "comment": {
       "raw": [
        "Occurs when playback stops because the next frame of a video resource is not available.",
        " @param ev The event.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/waiting_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onwebkitanimationend",
      "name": "onwebkitanimationend",
      "comment": {
       "raw": [
        "@deprecated This is a legacy alias of `onanimationend`.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationend_event)"
       ],
       "tags": {
        "@deprecated": "This is a legacy alias of"
       }
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onwebkitanimationiteration",
      "name": "onwebkitanimationiteration",
      "comment": {
       "raw": [
        "@deprecated This is a legacy alias of `onanimationiteration`.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event)"
       ],
       "tags": {
        "@deprecated": "This is a legacy alias of"
       }
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onwebkitanimationstart",
      "name": "onwebkitanimationstart",
      "comment": {
       "raw": [
        "@deprecated This is a legacy alias of `onanimationstart`.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event)"
       ],
       "tags": {
        "@deprecated": "This is a legacy alias of"
       }
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onwebkittransitionend",
      "name": "onwebkittransitionend",
      "comment": {
       "raw": [
        "@deprecated This is a legacy alias of `ontransitionend`.",
        "",
        " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event)"
       ],
       "tags": {
        "@deprecated": "This is a legacy alias of"
       }
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: Event) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "onwheel",
      "name": "onwheel",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/wheel_event)"
       ]
      },
      "typeValue": {
       "raw": "null | (this: GlobalEventHandlers, ev: WheelEvent) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers",
      "required": false
     },
     {
      "uid": "autofocus",
      "name": "autofocus",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLOrSVGElement",
      "required": true
     },
     {
      "uid": "dataset",
      "name": "dataset",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dataset)"
       ]
      },
      "typeValue": {
       "raw": "DOMStringMap"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLOrSVGElement",
      "required": true
     },
     {
      "uid": "nonce",
      "name": "nonce",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/nonce)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLOrSVGElement",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/tabIndex)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLOrSVGElement",
      "required": true
     },
     {
      "uid": "blur",
      "name": "blur",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/blur)"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLOrSVGElement",
      "required": true
     },
     {
      "uid": "focus",
      "name": "focus",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/focus)"
       ]
      },
      "typeValue": {
       "raw": "(options?: FocusOptions | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:HTMLOrSVGElement",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:PickerShowSelectedOnly": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "PickerShowSelectedOnly",
     "nameFull": "PickerShowSelectedOnly"
    },
    "src": "uui-core/src/types/pickers.ts",
    "comment": {
     "raw": [
      "Show selected rows only in Picker."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerShowSelectedOnly",
     "print": [
      "/**",
      " * Show selected rows only in Picker.",
      " */",
      "interface PickerShowSelectedOnly {",
      "    /**",
      "     * Enables/disables selected rows only in Picker.",
      "     */",
      "    showSelectedOnly?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "showSelectedOnly",
      "name": "showSelectedOnly",
      "comment": {
       "raw": [
        "Enables/disables selected rows only in Picker."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:Position": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "Position",
     "nameFull": "Position<TId>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "comment": {
     "raw": [
      "Position an item should be placed to."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "'top' | 'bottom' | 'initial' | { after: TId; }",
     "print": [
      "/**",
      " * Position an item should be placed to.",
      " */",
      "type Position<TId> = PositionType | {",
      "    after: TId;",
      "};"
     ]
    }
   }
  },
  "@epam/uui-core:PositionType": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "PositionType",
     "nameFull": "PositionType"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "comment": {
     "raw": [
      "Type of the position an item to be placed to."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "'top' | 'bottom' | 'initial'",
     "print": [
      "/**",
      " * Type of the position an item to be placed to.",
      " */",
      "type PositionType = 'initial' | 'top' | 'bottom';"
     ]
    }
   }
  },
  "@epam/uui-core:ProcessRequestMethod": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ProcessRequestMethod",
     "nameFull": "ProcessRequestMethod"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "string & {} | 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE'",
     "print": [
      "/*",
      "    Inspired by: https://stackoverflow.com/a/74376991",
      "    Provides suggestions for some request methods (to avoid typos) while allowing to assign any string.",
      "*/",
      "type ProcessRequestMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | string & {};"
     ]
    }
   }
  },
  "@epam/uui-core:RecordStatus": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "RecordStatus",
     "nameFull": "RecordStatus"
    },
    "src": "uui-core/src/data/processing/views/tree/types.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "typeof NOT_FOUND_RECORD | typeof PENDING_RECORD | typeof LOADING_RECORD | typeof LOADED_RECORD | typeof FAILED_RECORD",
     "print": [
      "type RecordStatus = typeof PENDING_RECORD | typeof LOADING_RECORD | typeof LOADED_RECORD | typeof NOT_FOUND_RECORD | typeof FAILED_RECORD;"
     ]
    }
   }
  },
  "@epam/uui-core:RenderCellProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "RenderCellProps",
     "nameFull": "RenderCellProps<TItem, TId>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "RenderCellProps<TItem, TId>",
     "print": [
      "interface RenderCellProps<TItem = any, TId = any> extends DataTableCellOptions<TItem, TId> {",
      "    /**",
      "     * Lens instance, wrapping IEditable on the row, to help binding to row's value.",
      "     * E.g. <TextInput { ...rowLens.prop('name').toProps() } />",
      "     */",
      "    rowLens: ILens<TItem>;",
      "    /**",
      "     * Drag'n'drop marker event handlers.",
      "     */",
      "    eventHandlers?: DndEventHandlers;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "rowLens",
      "name": "rowLens",
      "comment": {
       "raw": [
        "Lens instance, wrapping IEditable on the row, to help binding to row's value.",
        " E.g. <TextInput { ...rowLens.prop('name').toProps() } />"
       ]
      },
      "typeValue": {
       "raw": "ILens<TItem>"
      },
      "required": true
     },
     {
      "uid": "eventHandlers",
      "name": "eventHandlers",
      "comment": {
       "raw": [
        "Drag'n'drop marker event handlers."
       ]
      },
      "typeValue": {
       "raw": "DndEventHandlers"
      },
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "comment": {
       "raw": [
        "Key to use as component's key"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": true
     },
     {
      "uid": "rowProps",
      "name": "rowProps",
      "comment": {
       "raw": [
        "DataTableRowsProps object for the table row the cell is at"
       ]
      },
      "typeValue": {
       "raw": "DataTableRowProps<TItem, TId>"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": true
     },
     {
      "uid": "column",
      "name": "column",
      "comment": {
       "raw": [
        "DataColumnProps object for the column the cell is at"
       ]
      },
      "typeValue": {
       "raw": "DataColumnProps<TItem, TId, any>"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": true
     },
     {
      "uid": "index",
      "name": "index",
      "comment": {
       "raw": [
        "Column index in table"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": false
     },
     {
      "uid": "isFirstColumn",
      "name": "isFirstColumn",
      "comment": {
       "raw": [
        "True if the cell is in the first column"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": true
     },
     {
      "uid": "isLastColumn",
      "name": "isLastColumn",
      "comment": {
       "raw": [
        "True if the cell is in the last column"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": true
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "HTML tabIndex attribute to set on the cell"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataTableCellOptions",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:RenderEditorProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "RenderEditorProps",
     "nameFull": "RenderEditorProps<TItem, TId, TCellValue>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "RenderEditorProps<TItem, TId, TCellValue>",
     "print": [
      "interface RenderEditorProps<TItem, TId, TCellValue> extends IEditable<TCellValue>, IHasValidationMessage, ICanFocus<any> {",
      "    /** DataRowProps object of rendered row */",
      "    rowProps: DataRowProps<TItem, TId>;",
      "    /** Cell mode signal the editor component to adapt it's visuals to cell editor */",
      "    mode: 'cell';",
      "    /** Ref to pass to the editor component.",
      "     * It's required for correct focus/blur behavior.",
      "     * */",
      "    ref?: ForwardedRef<HTMLElement>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "rowProps",
      "name": "rowProps",
      "comment": {
       "raw": [
        "DataRowProps object of rendered row"
       ]
      },
      "typeValue": {
       "raw": "DataRowProps<TItem, TId>"
      },
      "typeValueRef": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": "mode",
      "name": "mode",
      "comment": {
       "raw": [
        "Cell mode signal the editor component to adapt it's visuals to cell editor"
       ]
      },
      "typeValue": {
       "raw": "'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "cell"
       ]
      },
      "required": true
     },
     {
      "uid": "ref",
      "name": "ref",
      "comment": {
       "raw": [
        "Ref to pass to the editor component.",
        " It's required for correct focus/blur behavior."
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLElement | null) => void | React.MutableRefObject<HTMLElement | null>"
      },
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TCellValue"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TCellValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "validationMessage",
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasValidationMessage",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<any, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<any, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ScrollAlign": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ScrollAlign",
     "nameFull": "ScrollAlign"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "'top' | 'nearest'",
     "print": [
      "type ScrollAlign = 'top' | 'nearest';"
     ]
    }
   }
  },
  "@epam/uui-core:ScrollToConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ScrollToConfig",
     "nameFull": "ScrollToConfig"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "comment": {
     "raw": [
      "Holds configuration of the force scrolling behavior."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ScrollToConfig",
     "print": [
      "/**",
      " * Holds configuration of the force scrolling behavior.",
      " */",
      "interface ScrollToConfig {",
      "    /** Index of the row to be scrolled to. */",
      "    index?: number;",
      "    /** Scrolling movement behavior. */",
      "    behavior?: ScrollBehavior;",
      "    /** Alignment behavior. This property specifies, to which position a row with an index should be scrolled to.",
      "     * @default 'top'",
      "     *",
      "     * If `nearest` is specified, a list will be scrolled to a row in the nearest position only if row is not visible.",
      "     * If a row is closer to the bottom, the list will be scrolled to the row in the bottom position of a scroll container.",
      "     * If closer to the top, will be scrolled to the row in the top position.",
      "     *",
      "     * If `top` is specified, scrolling a list to a row to the top part of the container will happen in any case.",
      "    */",
      "    align?: ScrollAlign;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "index",
      "name": "index",
      "comment": {
       "raw": [
        "Index of the row to be scrolled to."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "behavior",
      "name": "behavior",
      "comment": {
       "raw": [
        "Scrolling movement behavior."
       ]
      },
      "typeValue": {
       "raw": "'auto' | 'instant' | 'smooth'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "auto",
        "instant",
        "smooth"
       ]
      },
      "required": false
     },
     {
      "uid": "align",
      "name": "align",
      "comment": {
       "raw": [
        "Alignment behavior. This property specifies, to which position a row with an index should be scrolled to.",
        " @default 'top'",
        "",
        " If `nearest` is specified, a list will be scrolled to a row in the nearest position only if row is not visible.",
        " If a row is closer to the bottom, the list will be scrolled to the row in the bottom position of a scroll container.",
        " If closer to the top, will be scrolled to the row in the top position.",
        "",
        " If `top` is specified, scrolling a list to a row to the top part of the container will happen in any case."
       ],
       "tags": {
        "@default": "top"
       }
      },
      "typeValue": {
       "raw": "'top' | 'nearest'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "nearest"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:SearchConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "SearchConfig",
     "nameFull": "SearchConfig<TItem>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "SearchConfig<TItem>",
     "print": [
      "interface SearchConfig<TItem> {",
      "    /**",
      "     * A pure function that gets search value for each item.",
      "     * @default (item) => item.name.",
      "     */",
      "    getSearchFields?(item: TItem): string[];",
      "    /**",
      "     * Enables sorting of search results by relevance.",
      "     * - The highest priority has records, which have a full match with a search keyword.",
      "     * - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
      "     * - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
      "     * - And the lowest one - any other match of the search keyword.",
      "     *",
      "     * Example:",
      "     * - `search`: 'some'",
      "     * - `record string`: 'some word', `rank` = 4",
      "     * - `record string`: 'someone', `rank` = 3",
      "     * - `record string`: 'I know some guy', `rank` = 2",
      "     * - `record string`: 'awesome', `rank` = 1",
      "     *",
      "     * @default true",
      "     */",
      "    sortSearchByRelevance?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "getSearchFields",
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "A pure function that gets search value for each item.",
        " @default (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "sortSearchByRelevance",
      "name": "sortSearchByRelevance",
      "comment": {
       "raw": [
        "Enables sorting of search results by relevance.",
        " - The highest priority has records, which have a full match with a search keyword.",
        " - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
        " - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
        " - And the lowest one - any other match of the search keyword.",
        "",
        " Example:",
        " - `search`: 'some'",
        " - `record string`: 'some word', `rank` = 4",
        " - `record string`: 'someone', `rank` = 3",
        " - `record string`: 'I know some guy', `rank` = 2",
        " - `record string`: 'awesome', `rank` = 1",
        "",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:SetDataSourceState": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "SetDataSourceState",
     "nameFull": "SetDataSourceState<TFilter, TId>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "comment": {
     "raw": [
      "DataSource state update handler."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "SetDataSourceState<TFilter, TId>",
     "print": [
      "/**",
      " * DataSource state update handler.",
      " */",
      "type SetDataSourceState<TFilter = Record<string, any>, TId = any> = (updateState: (prevState: DataSourceState<TFilter, TId>) => DataSourceState<TFilter, TId>) => void;"
     ]
    }
   }
  },
  "@epam/uui-core:SinglePickerProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "SinglePickerProps",
     "nameFull": "SinglePickerProps<TId, TItem>"
    },
    "src": "uui-core/src/types/pickers.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "{ selectionMode: 'single'; valueType?: 'id' | undefined; } & IEditable<TId> | { selectionMode: 'single'; valueType: 'entity'; } & IEditable<TItem>",
     "print": [
      "type SinglePickerProps<TId, TItem> = ({",
      "    /** If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected */",
      "    selectionMode: 'single';",
      "    /** Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem) */",
      "    valueType?: 'id';",
      "} & IEditable<TId>) | ({",
      "    /** If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected */",
      "    selectionMode: 'single';",
      "    /** Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem) */",
      "    valueType: 'entity';",
      "} & IEditable<TItem>);"
     ]
    },
    "props": [
     {
      "uid": "selectionMode",
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "required": true
     },
     {
      "uid": "valueType",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "valueType_2",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "required": true
     },
     {
      "uid": "value_2",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_2",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-core:SortConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "SortConfig",
     "nameFull": "SortConfig<TItem>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "SortConfig<TItem>",
     "print": [
      "interface SortConfig<TItem> {",
      "    /**",
      "     * A pure function that gets sorting value for current sorting value",
      "     */",
      "    sortBy?(item: TItem, sorting: SortingOption): any;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "sortBy",
      "name": "sortBy",
      "comment": {
       "raw": [
        "A pure function that gets sorting value for current sorting value"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:SortDirection": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "SortDirection",
     "nameFull": "SortDirection"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "'asc' | 'desc'",
     "print": [
      "type SortDirection = 'asc' | 'desc';"
     ]
    }
   }
  },
  "@epam/uui-core:SortedPatchByParentId": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "SortedPatchByParentId",
     "nameFull": "SortedPatchByParentId<TId, __type>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "SortedPatchByParentId<TItem, TId>",
     "print": [
      "type SortedPatchByParentId<TItem, TId> = IMap<TId, {",
      "    top: TId[];",
      "    bottom: TId[];",
      "    updated: TId[];",
      "    moved: TId[];",
      "    withTempOrder: TId[];",
      "    updatedItemsMap: IMap<TId, TItem>;",
      "    newItems: TItem[];",
      "}>;"
     ]
    },
    "props": [
     {
      "uid": "constructor",
      "name": "constructor",
      "comment": {
       "raw": [
        "Must implement multiple constructors:",
        " - constructor with empty arguments or initial data (optional);",
        " - constructor, which accepts an argument of IMap<TKey, TValue> type and clones its value (mandatory)."
       ]
      },
      "typeValue": {
       "raw": "Function"
      },
      "from": "@epam/uui-core:IMap",
      "required": true
     },
     {
      "uid": "get",
      "name": "get",
      "typeValue": {
       "raw": "(key: TId) => { top: TId[]; bottom: TId[]; updated: TId[]; moved: TId[]; withTempOrder: TId[]; updatedItemsMap: IMap<TId, TItem>; newItems: TItem[]; } | undefined"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IMap",
      "required": true
     },
     {
      "uid": "set",
      "name": "set",
      "comment": {
       "raw": [
        "Should set data to the existing map. This operation is mutable.",
        " @param key - key of a map.",
        " @param value - value, to be set into a map, using the key."
       ]
      },
      "typeValue": {
       "raw": "(key: TId, value?: { top: TId[]; bottom: TId[]; updated: TId[]; moved: TId[]; withTempOrder: TId[]; updatedItemsMap: IMap<TId, TItem>; newItems: TItem[]; } | undefined) => IMap<TId, { top: TId[]; bottom: TId[]; updated: TId[]; moved: TId[]; withTempOrder: TId[]; updatedItemsMap: IMap<TId, TItem>; newItems: TItem[]; }>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IMap",
      "required": true
     },
     {
      "uid": "delete",
      "name": "delete",
      "comment": {
       "raw": [
        "Should delete an element, located in a map by key. This operation is mutable.",
        " @param key"
       ]
      },
      "typeValue": {
       "raw": "(key: TId) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IMap",
      "required": true
     },
     {
      "uid": "has",
      "name": "has",
      "typeValue": {
       "raw": "(key: TId) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IMap",
      "required": true
     },
     {
      "uid": "size",
      "name": "size",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IMap",
      "required": true
     },
     {
      "uid": "[Symbol.iterator]",
      "name": "[Symbol.iterator]",
      "typeValue": {
       "raw": "() => IterableIterator<[TId, { top: TId[]; bottom: TId[]; updated: TId[]; moved: TId[]; withTempOrder: TId[]; updatedItemsMap: IMap<TId, TItem>; newItems: TItem[]; }]>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IMap",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:SortingOption": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "SortingOption",
     "nameFull": "SortingOption<T>"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "SortingOption<T>",
     "print": [
      "interface SortingOption<T = any> {",
      "    /** Field of sorted entity under which sorting is performed */",
      "    field: keyof T;",
      "    /** Direction of a sorting */",
      "    direction?: SortDirection;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "field",
      "name": "field",
      "comment": {
       "raw": [
        "Field of sorted entity under which sorting is performed"
       ]
      },
      "typeValue": {
       "raw": "keyof T"
      },
      "required": true
     },
     {
      "uid": "direction",
      "name": "direction",
      "comment": {
       "raw": [
        "Direction of a sorting"
       ]
      },
      "typeValue": {
       "raw": "'asc' | 'desc'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "asc",
        "desc"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:SpinnerCoreProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "SpinnerCoreProps",
     "nameFull": "SpinnerCoreProps"
    },
    "src": "uui-core/src/types/components/Spinner.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "SpinnerCoreProps",
     "print": [
      "interface SpinnerCoreProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:TableFiltersConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "TableFiltersConfig",
     "nameFull": "TableFiltersConfig<TFilter>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "PickerFilterConfig<TFilter> | DatePickerFilterConfig<TFilter> | NumericFilterConfig<TFilter> | RangeDatePickerFilterConfig<TFilter> | CustomFilterConfig<TFilter>",
     "print": [
      "type TableFiltersConfig<TFilter> = PickerFilterConfig<TFilter> | DatePickerFilterConfig<TFilter> | NumericFilterConfig<TFilter> | RangeDatePickerFilterConfig<TFilter> | CustomFilterConfig<TFilter>;"
     ]
    },
    "props": [
     {
      "uid": "title",
      "name": "title",
      "comment": {
       "raw": [
        "Title of the filter, displayed in filter toggler and filter body"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": true
     },
     {
      "uid": "field",
      "name": "field",
      "comment": {
       "raw": [
        "Field of filters object, where store the filter value"
       ]
      },
      "typeValue": {
       "raw": "keyof TFilter"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": true
     },
     {
      "uid": "columnKey",
      "name": "columnKey",
      "comment": {
       "raw": [
        "Key of the column to which the filter is attached.",
        " If omitted, filter won't be attached to the column."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": "isAlwaysVisible",
      "name": "isAlwaysVisible",
      "comment": {
       "raw": [
        "Pass true to make filter always visible in FilterPanel. User can't hide it via 'Add filter' dropdown"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": "predicates",
      "name": "predicates",
      "comment": {
       "raw": [
        "Array of available predicates for the filter. This predicated can be chosen by user and applied to the filter value."
       ]
      },
      "typeValue": {
       "raw": "IFilterPredicate[]"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": "maxCount",
      "name": "maxCount",
      "comment": {
       "raw": [
        "Count of words to show in the Filter toggler. By default, 2 item will be shown."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": "togglerWidth",
      "name": "togglerWidth",
      "comment": {
       "raw": [
        "Defines maxWidth of the filter toggler"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:FilterConfigBase",
      "required": false
     },
     {
      "uid": "dataSource",
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<any, any, any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": true
     },
     {
      "uid": "getName",
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: any) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "renderRow",
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<any, any>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "type",
      "name": "type",
      "comment": {
       "raw": [
        "Type of the filter"
       ]
      },
      "typeValue": {
       "raw": "'singlePicker' | 'multiPicker'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "singlePicker",
        "multiPicker"
       ]
      },
      "from": "@epam/uui-core:PickerFilterConfig",
      "required": true
     },
     {
      "uid": "showSearch",
      "name": "showSearch",
      "comment": {
       "raw": [
        "Pass false to hide search in picker body.",
        " If omitted, true value will be used."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PickerFilterConfig",
      "required": false
     },
     {
      "uid": "maxBodyHeight",
      "name": "maxBodyHeight",
      "comment": {
       "raw": [
        "Height of picker items list in px. This height doesn't include height of body toolbars(sorting, predicates)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:PickerFilterConfig",
      "required": false
     },
     {
      "uid": "highlightSearchMatches",
      "name": "highlightSearchMatches",
      "comment": {
       "raw": [
        "Enables highlighting of the items' text with search-matching results."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PickerFilterConfig",
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "comment": {
       "raw": [
        "Filter selectable days. Days, for which this callback returns false - will be disabled"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     },
     {
      "uid": "format",
      "name": "format",
      "comment": {
       "raw": [
        "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     },
     {
      "uid": "type_2",
      "name": "type",
      "comment": {
       "raw": [
        "Type of the filter"
       ]
      },
      "typeValue": {
       "raw": "'datePicker'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "datePicker"
       ]
      },
      "from": "@epam/uui-core:DatePickerFilterConfig",
      "required": true
     },
     {
      "uid": "type_3",
      "name": "type",
      "comment": {
       "raw": [
        "Type of the filter"
       ]
      },
      "typeValue": {
       "raw": "'numeric'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "numeric"
       ]
      },
      "from": "@epam/uui-core:NumericFilterConfig",
      "required": true
     },
     {
      "uid": "type_4",
      "name": "type",
      "comment": {
       "raw": [
        "Type of the filter"
       ]
      },
      "typeValue": {
       "raw": "'rangeDatePicker'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "rangeDatePicker"
       ]
      },
      "from": "@epam/uui-core:RangeDatePickerFilterConfig",
      "required": true
     },
     {
      "uid": "type_5",
      "name": "type",
      "comment": {
       "raw": [
        "Type of the filter"
       ]
      },
      "typeValue": {
       "raw": "'custom'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "custom"
       ]
      },
      "from": "@epam/uui-core:CustomFilterConfig",
      "required": true
     },
     {
      "uid": "render",
      "name": "render",
      "comment": {
       "raw": [
        "Render callback for filter body"
       ]
      },
      "typeValue": {
       "raw": "(props: IFilterItemBodyProps<any>) => React.ReactElement<any, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:CustomFilterConfig",
      "required": true
     },
     {
      "uid": "getTogglerValue",
      "name": "getTogglerValue",
      "comment": {
       "raw": [
        "A pure function that gets value to display in filter toggler"
       ]
      },
      "typeValue": {
       "raw": "(props: IFilterItemBodyProps<any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:CustomFilterConfig",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-core:TextInputCoreProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "TextInputCoreProps",
     "nameFull": "TextInputCoreProps"
    },
    "src": "uui-core/src/types/components/TextInput.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TextInputCoreProps",
     "print": [
      "interface TextInputCoreProps extends IHasCX, IClickable, IDisableable, IEditable<string | undefined>, IHasPlaceholder, IHasIcon, ICanBeReadonly, IDropdownToggler, IAnalyticableOnChange<string>, IHasRawProps<React.HTMLAttributes<HTMLInputElement>>, ICanFocus<HTMLInputElement>, IHasTabIndex {",
      "    /** Enables cancel (cross) icon, and fires when the icon is clicked */",
      "    onCancel?(): void;",
      "    /** Enables accept (check) icon, and fires when the icon is clicked */",
      "    onAccept?(): void;",
      "    /** keydown event handler to put on the HTML input element */",
      "    onKeyDown?(e?: React.KeyboardEvent<HTMLInputElement>): void;",
      "    /** Put focus on the element, when component is mounted */",
      "    autoFocus?: boolean;",
      "    /** Standard 'type' attribute to put on the HTML input element (e.g. 'password') */",
      "    type?: string;",
      "    /** Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp} */",
      "    autoComplete?: string;",
      "    /** Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp} */",
      "    name?: string;",
      "    /** Maximum input length in characters */",
      "    maxLength?: number;",
      "    /** Standard [inputMode attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode} */",
      "    inputMode?: React.InputHTMLAttributes<HTMLInputElement>['inputMode'];",
      "    /** HTML ID attribute for input */",
      "    id?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "onCancel",
      "name": "onCancel",
      "comment": {
       "raw": [
        "Enables cancel (cross) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "onAccept",
      "name": "onAccept",
      "comment": {
       "raw": [
        "Enables accept (check) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "onKeyDown",
      "name": "onKeyDown",
      "comment": {
       "raw": [
        "keydown event handler to put on the HTML input element"
       ]
      },
      "typeValue": {
       "raw": "(e?: React.KeyboardEvent<HTMLInputElement> | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "autoFocus",
      "name": "autoFocus",
      "comment": {
       "raw": [
        "Put focus on the element, when component is mounted"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "type",
      "name": "type",
      "comment": {
       "raw": [
        "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "autoComplete",
      "name": "autoComplete",
      "comment": {
       "raw": [
        "Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "name",
      "name": "name",
      "comment": {
       "raw": [
        "Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "maxLength",
      "name": "maxLength",
      "comment": {
       "raw": [
        "Maximum input length in characters"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "inputMode",
      "name": "inputMode",
      "comment": {
       "raw": [
        "Standard [inputMode attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode}"
       ]
      },
      "typeValue": {
       "raw": "'search' | 'numeric' | 'text' | 'none' | 'tel' | 'url' | 'email' | 'decimal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "search",
        "numeric",
        "text",
        "none",
        "tel",
        "url",
        "email",
        "decimal"
       ]
      },
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID attribute for input"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "placeholder",
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | null, oldValue: string | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLInputElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:TooltipCoreProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "TooltipCoreProps",
     "nameFull": "TooltipCoreProps"
    },
    "src": "uui-core/src/types/components/Tooltip.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TooltipCoreProps",
     "print": [
      "interface TooltipCoreProps extends IHasCX, IHasChildren, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, Partial<IControlled<boolean>>, Pick<DropdownProps, 'onClose' | 'placement' | 'modifiers' | 'openDelay' | 'closeDelay' | 'closeOnMouseLeave' | 'portalTarget' | 'boundaryElement' | 'closeBodyOnTogglerHidden'> {",
      "    /** Content to show in the tooltip (ReactNode) */",
      "    content?: any;",
      "    /** Alternative to 'content' prop, you can pass a render function.",
      "     * The function will only be called when content is shown, this can save performance. */",
      "    renderContent?(): any;",
      "    /** See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/offset/} */",
      "    offset?: Options['offset'];",
      "    /** React Node(s) to show tooltip for */",
      "    children?: React.ReactNode;",
      "    /** Max width of tooltip */",
      "    maxWidth?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "content",
      "name": "content",
      "comment": {
       "raw": [
        "Content to show in the tooltip (ReactNode)"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "required": false
     },
     {
      "uid": "renderContent",
      "name": "renderContent",
      "comment": {
       "raw": [
        "Alternative to 'content' prop, you can pass a render function.",
        " The function will only be called when content is shown, this can save performance."
       ]
      },
      "typeValue": {
       "raw": "() => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "offset",
      "name": "offset",
      "comment": {
       "raw": [
        "See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/offset/}"
       ]
      },
      "typeValue": {
       "raw": "OffsetsFunction | [number | null | undefined, number | null | undefined]"
      },
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "React Node(s) to show tooltip for"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": "maxWidth",
      "name": "maxWidth",
      "comment": {
       "raw": [
        "Max width of tooltip"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "onClose",
      "name": "onClose",
      "comment": {
       "raw": [
        "Called when dropdown was closed"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "placement",
      "name": "placement",
      "comment": {
       "raw": [
        "Defines dropdown body placement relative to target"
       ]
      },
      "typeValue": {
       "raw": "'auto' | 'auto-start' | 'auto-end' | 'top' | 'bottom' | 'right' | 'left' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "auto",
        "auto-start",
        "auto-end",
        "top",
        "bottom",
        "right",
        "left",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "modifiers",
      "name": "modifiers",
      "comment": {
       "raw": [
        "Original popper.js modifiers. See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/}"
       ]
      },
      "typeValue": {
       "raw": "(StrictModifier<any> | Partial<Modifier<any, object>>)[]"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "openDelay",
      "name": "openDelay",
      "comment": {
       "raw": [
        "Defines how much 'ms' user should hold mouse over target to open the dropdown",
        " This prop work only with openOnHover={true}",
        " @default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "closeDelay",
      "name": "closeDelay",
      "comment": {
       "raw": [
        "Defines after which delay dropdown will be closed, if user leave mouse from target.",
        " This prop work only with openOnHover={true}",
        " @default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "closeOnMouseLeave",
      "name": "closeOnMouseLeave",
      "comment": {
       "raw": [
        "Defined when to close dropdown in case of openOnHover={ true }",
        " toggler — dropdown will be closed when a mouse leaves the target component",
        " boundary — will not to close the dropdown when a mouse is on target or in 30px around target area",
        " false — will not close dropdown by mouse move event",
        " @default 'toggler'"
       ],
       "tags": {
        "@default": "toggler"
       }
      },
      "typeValue": {
       "raw": "false | 'toggler' | 'boundary'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        "toggler",
        "boundary"
       ]
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "portalTarget",
      "name": "portalTarget",
      "comment": {
       "raw": [
        "Node of portal target, where to render the dropdown body.",
        " By default, will be used global portal node."
       ]
      },
      "typeValue": {
       "raw": "HTMLElement"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "boundaryElement",
      "name": "boundaryElement",
      "comment": {
       "raw": [
        "Element relative to which dropdown will calculate position"
       ]
      },
      "typeValue": {
       "raw": "HTMLElement | HTMLElement[] | 'clippingParents'"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "closeBodyOnTogglerHidden",
      "name": "closeBodyOnTogglerHidden",
      "comment": {
       "raw": [
        "Pass false, if you do not want to close the dropdown in case Toggler move out of viewport.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:UseCascadeSelectionServiceProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UseCascadeSelectionServiceProps",
     "nameFull": "UseCascadeSelectionServiceProps<TItem, TId>"
    },
    "src": "uui-core/src/data/processing/views/dataRows/services/useCascadeSelectionService.ts",
    "comment": {
     "raw": [
      "Cascade selection service configuration."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "UseCascadeSelectionServiceProps<TItem, TId>",
     "print": [
      "/**",
      " * Cascade selection service configuration.",
      " */",
      "interface UseCascadeSelectionServiceProps<TItem, TId> extends LoadMissingRecords<TItem, TId> {",
      "    /**",
      "     * Tree-like data, cascade selection should be performed on.",
      "     */",
      "    tree: ITree<TItem, TId>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "tree",
      "name": "tree",
      "comment": {
       "raw": [
        "Tree-like data, cascade selection should be performed on."
       ]
      },
      "typeValue": {
       "raw": "ITree<TItem, TId>"
      },
      "required": true
     },
     {
      "uid": "loadMissingRecordsOnCheck",
      "name": "loadMissingRecordsOnCheck",
      "comment": {
       "raw": [
        "Loads missing records and provides a fulfilled tree.",
        " @param id - id of an item, which is checked and records should be loaded for.",
        " @param isChecked - checking status of the record.",
        " @param isRoot - a flag, which marks if all records should be checked/unchecked.",
        " @returns fulfilled tree with missing records, those required to be loaded for checking."
       ]
      },
      "typeValue": {
       "raw": "(id: TId, isChecked: boolean, isRoot: boolean) => Promise<ITree<TItem, TId>>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:LoadMissingRecords",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:UseDataRowsProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UseDataRowsProps",
     "nameFull": "UseDataRowsProps<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/views/dataRows/useDataRows.ts",
    "comment": {
     "raw": [
      "`useDataRows` configuration."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "UseDataRowsProps<TItem, TId, TFilter>",
     "print": [
      "/**",
      " * `useDataRows` configuration.",
      " */",
      "interface UseDataRowsProps<TItem, TId, TFilter = any> extends Omit<CommonTreeConfig<TItem, TId, TFilter>, 'patch'>, ITreeLoadingState, Partial<CascadeSelectionService<TItem, TId>>, GetItemStatus<TId> {",
      "    /**",
      "     * Tree-like data, rows to be built from.",
      "     */",
      "    tree: ITree<TItem, TId>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "tree",
      "name": "tree",
      "comment": {
       "raw": [
        "Tree-like data, rows to be built from."
       ]
      },
      "typeValue": {
       "raw": "ITree<TItem, TId>"
      },
      "required": true
     },
     {
      "uid": "dataSourceState",
      "name": "dataSourceState",
      "comment": {
       "raw": [
        "State of the dataSource."
       ]
      },
      "typeValue": {
       "raw": "DataSourceState<TFilter, TId>"
      },
      "from": "@epam/uui-core:CommonTreeConfig",
      "required": true
     },
     {
      "uid": "setDataSourceState",
      "name": "setDataSourceState",
      "comment": {
       "raw": [
        "DataSource state update handler."
       ]
      },
      "typeValue": {
       "raw": "SetDataSourceState<TFilter, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:CommonTreeConfig",
      "required": true
     },
     {
      "uid": "getId",
      "name": "getId",
      "comment": {
       "raw": [
        "Should return unique ID of the TItem",
        " If omitted, we assume that every TItem has and unique id in its 'id' field.",
        " @param item - record, which id should be returned.",
        " @returns item id."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "complexIds",
      "name": "complexIds",
      "comment": {
       "raw": [
        "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
        " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "getParentId",
      "name": "getParentId",
      "comment": {
       "raw": [
        "Should return ID of the Item's parent. Usually it's i => i.parentId.",
        " If specified, Data Source will build items hierarchy.",
        "",
        " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
        " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
        "   to highlight parents with selected children",
        " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
        "   We need to load parents with a separate call (if backend doesn't pre-fetch them)",
        "",
        " @param item - record, which paretnId should be returned.",
        " @returns item parentId."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId | undefined"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "rowOptions",
      "name": "rowOptions",
      "comment": {
       "raw": [
        "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
        " See DataRowOptions for more details.",
        " If options depends on the item itself, use getRowOptions.",
        " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "DataRowOptions<TItem, TId>"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "getRowOptions",
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
        " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
        " See DataRowOptions for more details.",
        " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item - record, configuration should be returned for.",
        " @param index - index of a row. It is optional and should not be expected, that it is provided on every call."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index?: number | undefined) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "isFoldedByDefault",
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "Can be specified to unfold all or some items at start.",
        " If not specified, all rows would be folded.",
        " @param item - record, folding value should be returned for.",
        " @param dataSourceState - dataSource state with current `foldAll` value. It provides the possibility to respect foldAll change, if `isFoldedByDefault` is implemented."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, state: DataSourceState<TFilter, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "cascadeSelection",
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "selectAll",
      "name": "selectAll",
      "comment": {
       "raw": [
        "Enables/disables selectAll functionality. If disabled explicitly, `selectAll`, returned from a view is null.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "showSelectedOnly",
      "name": "showSelectedOnly",
      "comment": {
       "raw": [
        "Enables returning only selected rows and loading missing selected/checked rows, if it is required/possible.",
        " If enabled, `useView` returns only selected rows from `IDataSourceView.getVisibleRows`."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "isDeleted",
      "name": "isDeleted",
      "comment": {
       "raw": [
        "To enable deleting of the items, it is required to specify getter for deleted state."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "getNewItemPosition",
      "name": "getNewItemPosition",
      "comment": {
       "raw": [
        "Provides information about the relative position of the new item.",
        " @param item - new item, position should be got for.",
        " @returns relative position in the list of items.",
        " @default PatchOrdering.TOP"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => symbol"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "getItemTemporaryOrder",
      "name": "getItemTemporaryOrder",
      "comment": {
       "raw": [
        "Provides information about the temporary order of the new item.",
        " @param item - new item, temporary order should be got for.",
        " @returns temporary order",
        "",
        " @experimental The API of this feature can be changed in the future releases."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "fixItemBetweenSortings",
      "name": "fixItemBetweenSortings",
      "comment": {
       "raw": [
        "If enabled, items position is fixed between sorting.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "sortBy",
      "name": "sortBy",
      "comment": {
       "raw": [
        "A pure function that gets sorting value for current sorting value"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:SortConfig",
      "required": false
     },
     {
      "uid": "isFetching",
      "name": "isFetching",
      "comment": {
       "raw": [
        "Are tree records loading silently."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ITreeLoadingState",
      "required": false
     },
     {
      "uid": "isLoading",
      "name": "isLoading",
      "comment": {
       "raw": [
        "Are tree records loading loadly (show loading placeholders, etc)."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ITreeLoadingState",
      "required": false
     },
     {
      "uid": "getCompleteTreeForCascadeSelection",
      "name": "getCompleteTreeForCascadeSelection",
      "comment": {
       "raw": [
        "Provides a cascade selection functionality.",
        " @param isChecked - checking state of the item.",
        " @param checkedId - ID of the item to be checked. If `undefined` - root is checked.",
        " @param isRoot - marks if cascade selection should be performed on all the items.",
        " @param checked - current state of checked items.",
        " @returns new checked items."
       ]
      },
      "typeValue": {
       "raw": "(id: TId, isChecked: boolean, isRoot: boolean) => Promise<ITree<TItem, TId>>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:CascadeSelectionService",
      "required": false
     },
     {
      "uid": "getItemStatus",
      "name": "getItemStatus",
      "comment": {
       "raw": [
        "Provides a status of the given item.",
        " @param id - id of an item, status to be provided for.",
        " @returns status of the item."
       ]
      },
      "typeValue": {
       "raw": "(id: TId) => RecordStatus"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:GetItemStatus",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:UseFoldingServiceProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UseFoldingServiceProps",
     "nameFull": "UseFoldingServiceProps<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/views/dataRows/services/useFoldingService.ts",
    "comment": {
     "raw": [
      "Folding service configuration."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "UseFoldingServiceProps<TItem, TId, TFilter>",
     "print": [
      "/**",
      " * Folding service configuration.",
      " */",
      "type UseFoldingServiceProps<TItem, TId, TFilter = any> = Pick<CommonTreeConfig<TItem, TId, TFilter>, 'getId' | 'dataSourceState' | 'setDataSourceState' | 'isFoldedByDefault'>;"
     ]
    },
    "props": [
     {
      "uid": "dataSourceState",
      "name": "dataSourceState",
      "comment": {
       "raw": [
        "State of the dataSource."
       ]
      },
      "typeValue": {
       "raw": "DataSourceState<TFilter, TId>"
      },
      "from": "@epam/uui-core:CommonTreeConfig",
      "required": true
     },
     {
      "uid": "setDataSourceState",
      "name": "setDataSourceState",
      "comment": {
       "raw": [
        "DataSource state update handler."
       ]
      },
      "typeValue": {
       "raw": "SetDataSourceState<TFilter, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:CommonTreeConfig",
      "required": true
     },
     {
      "uid": "getId",
      "name": "getId",
      "comment": {
       "raw": [
        "Should return unique ID of the TItem",
        " If omitted, we assume that every TItem has and unique id in its 'id' field.",
        " @param item - record, which id should be returned.",
        " @returns item id."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "isFoldedByDefault",
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "Can be specified to unfold all or some items at start.",
        " If not specified, all rows would be folded.",
        " @param item - record, folding value should be returned for.",
        " @param dataSourceState - dataSource state with current `foldAll` value. It provides the possibility to respect foldAll change, if `isFoldedByDefault` is implemented."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, state: DataSourceState<TFilter, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:UseFormProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UseFormProps",
     "nameFull": "UseFormProps<T>"
    },
    "src": "uui-core/src/data/forms/useForm.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "UseFormProps<T>",
     "print": [
      "type UseFormProps<T> = Omit<FormProps<T>, 'renderForm'>;"
     ]
    },
    "props": [
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "Current value of the form state"
       ]
      },
      "typeValue": {
       "raw": "T"
      },
      "from": "@epam/uui-core:FormProps",
      "required": true
     },
     {
      "uid": "getMetadata",
      "name": "getMetadata",
      "comment": {
       "raw": [
        "Returns form metadata - information used to validate the form.",
        " @param state Metadata can depend on state, and will be re-computed on updates"
       ]
      },
      "typeValue": {
       "raw": "(state: T) => Metadata<T>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:FormProps",
      "required": false
     },
     {
      "uid": "onSave",
      "name": "onSave",
      "comment": {
       "raw": [
        "Occurs when 'save' function is called on Form.",
        " Should save form data (usually with API call to server).",
        " Server can also reject form, and provide validation errors in response.",
        " @param state Form state to save"
       ]
      },
      "typeValue": {
       "raw": "(state: T) => Promise<void | FormSaveResponse<T>>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:FormProps",
      "required": true
     },
     {
      "uid": "beforeLeave",
      "name": "beforeLeave",
      "comment": {
       "raw": [
        "Called when form is unmounted, but user still have unsaved changes.",
        " Accepts a Promise<boolean | 'remain'> to be returned.",
        " If promise resolves to true - save procedure is performed.",
        " If promise resolves to false - localStorage will be cleaned.",
        " If promise resolves to 'remain' - localStorage remain as was and changes in form not saves.",
        " The common use-case is to show a modal with \"Save Changes?\" dialog",
        " Skins usually implement this as default behavior. To prevent it, you can pass null to this prop to override it."
       ]
      },
      "typeValue": {
       "raw": "null | (nextLocation: Link, currentLocation: Link) => Promise<boolean | 'remain'>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:FormProps",
      "required": false
     },
     {
      "uid": "loadUnsavedChanges",
      "name": "loadUnsavedChanges",
      "comment": {
       "raw": [
        "Used to restore unsaved user edits from the last session (usually to localstorage, via uuiUserSettings context)",
        " If unsaved changes are detected, this callback is called. If it is resolved - the form restores unsaved edits.",
        " The common use-case is to show a modal with \"You have unsaved changes, restore them?\" dialog",
        " Skins usually implement this as default behavior. To prevent it, you can pass null to this prop to override it."
       ]
      },
      "typeValue": {
       "raw": "() => Promise<void>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:FormProps",
      "required": false
     },
     {
      "uid": "onSuccess",
      "name": "onSuccess",
      "comment": {
       "raw": [
        "Called after successful save.",
        " @param state Saved state",
        " @param isSavedBeforeLeave true, if save is triggered via leaving the page, and \"Save Changes?\" dialog"
       ]
      },
      "typeValue": {
       "raw": "(state: T, isSavedBeforeLeave?: boolean | undefined) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:FormProps",
      "required": false
     },
     {
      "uid": "onError",
      "name": "onError",
      "comment": {
       "raw": [
        "Called when save fails"
       ]
      },
      "typeValue": {
       "raw": "(error: any) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:FormProps",
      "required": false
     },
     {
      "uid": "settingsKey",
      "name": "settingsKey",
      "comment": {
       "raw": [
        "The key, under which form save unsaved state usually to localstorage, via uuiUserSettings context)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:FormProps",
      "required": false
     },
     {
      "uid": "validationOn",
      "name": "validationOn",
      "comment": {
       "raw": [
        "Controls when form validation occurs:",
        " save (default, recommended) - form is validated on save. If form is invalid - it will be revalidated on every change, until become valid",
        " change - form is validated on every user change. Only fields changes in current edit session are validated"
       ]
      },
      "typeValue": {
       "raw": "'change' | 'save'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "change",
        "save"
       ]
      },
      "from": "@epam/uui-core:FormProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:UseLazyFetchingAdvisorProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UseLazyFetchingAdvisorProps",
     "nameFull": "UseLazyFetchingAdvisorProps<TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/views/tree/hooks/strategies/lazyTree/useLazyFetchingAdvisor.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "UseLazyFetchingAdvisorProps<TId, TFilter>",
     "print": [
      "interface UseLazyFetchingAdvisorProps<TId, TFilter = any> {",
      "    dataSourceState: DataSourceState<TFilter, TId>;",
      "    filter?: TFilter;",
      "    forceReload?: boolean;",
      "    backgroundReload?: boolean;",
      "    showSelectedOnly?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "dataSourceState",
      "name": "dataSourceState",
      "typeValue": {
       "raw": "DataSourceState<TFilter, TId>"
      },
      "required": true
     },
     {
      "uid": "filter",
      "name": "filter",
      "typeValue": {
       "raw": "TFilter"
      },
      "required": false
     },
     {
      "uid": "forceReload",
      "name": "forceReload",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "backgroundReload",
      "name": "backgroundReload",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "showSelectedOnly",
      "name": "showSelectedOnly",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:UsePreviousConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UsePreviousConfig",
     "nameFull": "UsePreviousConfig"
    },
    "src": "uui-core/src/hooks/usePrevious.ts",
    "comment": {
     "raw": [
      "Hook configuration, which defines if previous value will be deeply compared with new value to be saved or not."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "UsePreviousConfig",
     "print": [
      "/**",
      " * Hook configuration, which defines if previous value will be deeply compared with new value to be saved or not.",
      " */",
      "interface UsePreviousConfig {",
      "    /**",
      "     * If compare is set to true, previous value will be deeply compared with the new value,",
      "     * and previous value will be updated only if value is changed (not the link to the object).",
      "     * Otherwise, previous value will be returned.",
      "     * If compare is false, previous value will be changed on every rerender.",
      "     */",
      "    compare?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "compare",
      "name": "compare",
      "comment": {
       "raw": [
        "If compare is set to true, previous value will be deeply compared with the new value,",
        " and previous value will be updated only if value is changed (not the link to the object).",
        " Otherwise, previous value will be returned.",
        " If compare is false, previous value will be changed on every rerender."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:UseResizeObserverProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UseResizeObserverProps",
     "nameFull": "UseResizeObserverProps"
    },
    "src": "uui-core/src/hooks/useResizeObserver.ts",
    "comment": {
     "raw": [
      "Props of useResizeObserver hook."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "UseResizeObserverProps",
     "print": [
      "/**",
      " * Props of useResizeObserver hook.",
      " */",
      "interface UseResizeObserverProps {",
      "    /**",
      "     * The handler for the resizing event, called when the size of any observed elements changes.",
      "     */",
      "    onResize: ResizeObserverCallback;",
      "    /**",
      "     * Elements whose size changes should be tracked.",
      "     */",
      "    observables: Element[];",
      "    /**",
      "     * Delay (in milliseconds) before calling the onResize handler.",
      "     */",
      "    delay?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "onResize",
      "name": "onResize",
      "comment": {
       "raw": [
        "The handler for the resizing event, called when the size of any observed elements changes."
       ]
      },
      "typeValue": {
       "raw": "ResizeObserverCallback"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "observables",
      "name": "observables",
      "comment": {
       "raw": [
        "Elements whose size changes should be tracked."
       ]
      },
      "typeValue": {
       "raw": "Element[]"
      },
      "required": true
     },
     {
      "uid": "delay",
      "name": "delay",
      "comment": {
       "raw": [
        "Delay (in milliseconds) before calling the onResize handler."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:UseTableStateHookParams": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UseTableStateHookParams",
     "nameFull": "UseTableStateHookParams<TFilter, TViewState>"
    },
    "src": "uui-core/src/hooks/useTableState/useTableState.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "UseTableStateHookParams<TFilter, TViewState>",
     "print": [
      "interface UseTableStateHookParams<TFilter = Record<string, any>, TViewState = any> extends UseTableStateHookBaseParams<TFilter, TViewState>, Partial<IEditable<DataTableState<TFilter, TViewState>>> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "columns",
      "name": "columns",
      "comment": {
       "raw": [
        "Columns configuration, can be omitted if used without tables"
       ]
      },
      "typeValue": {
       "raw": "DataColumnProps<any, any, any>[]"
      },
      "from": "@epam/uui-core:UseTableStateHookBaseParams",
      "required": false
     },
     {
      "uid": "filters",
      "name": "filters",
      "comment": {
       "raw": [
        "Filters configuration, can be omitted if you don't need filters"
       ]
      },
      "typeValue": {
       "raw": "TableFiltersConfig<TFilter>[]"
      },
      "from": "@epam/uui-core:UseTableStateHookBaseParams",
      "required": false
     },
     {
      "uid": "initialPresets",
      "name": "initialPresets",
      "comment": {
       "raw": [
        "Initial presets array"
       ]
      },
      "typeValue": {
       "raw": "ITablePreset<TFilter, TViewState>[]"
      },
      "from": "@epam/uui-core:UseTableStateHookBaseParams",
      "required": false
     },
     {
      "uid": "onPresetCreate",
      "name": "onPresetCreate",
      "comment": {
       "raw": [
        "Called when preset was created. Should return the ID of new preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => Promise<number>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:UseTableStateHookBaseParams",
      "required": false
     },
     {
      "uid": "onPresetUpdate",
      "name": "onPresetUpdate",
      "comment": {
       "raw": [
        "Called when preset was updated"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => Promise<void>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:UseTableStateHookBaseParams",
      "required": false
     },
     {
      "uid": "onPresetDelete",
      "name": "onPresetDelete",
      "comment": {
       "raw": [
        "Called when preset was deleted"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<TFilter, TViewState>) => Promise<void>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:UseTableStateHookBaseParams",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "DataTableState<TFilter, TViewState>"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: DataTableState<TFilter, TViewState>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:UseTreeProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UseTreeProps",
     "nameFull": "UseTreeProps<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/views/tree/hooks/strategies/types/strategies.ts",
    "comment": {
     "raw": [
      "useTree hook configuration."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "SyncTreeProps<TItem, TId, TFilter> | AsyncTreeProps<TItem, TId, TFilter> | LazyTreeProps<TItem, TId, TFilter>",
     "print": [
      "/**",
      " * useTree hook configuration.",
      " */",
      "type UseTreeProps<TItem, TId, TFilter = any> = (SyncTreeProps<TItem, TId, TFilter> | AsyncTreeProps<TItem, TId, TFilter> | LazyTreeProps<TItem, TId, TFilter>);"
     ]
    },
    "props": [
     {
      "uid": "dataSourceState",
      "name": "dataSourceState",
      "comment": {
       "raw": [
        "State of the dataSource."
       ]
      },
      "typeValue": {
       "raw": "DataSourceState<TFilter, TId>"
      },
      "from": "@epam/uui-core:CommonTreeConfig",
      "required": true
     },
     {
      "uid": "setDataSourceState",
      "name": "setDataSourceState",
      "comment": {
       "raw": [
        "DataSource state update handler."
       ]
      },
      "typeValue": {
       "raw": "SetDataSourceState<TFilter, TId>"
      },
      "typeValueRef": "@epam/uui-core:SetDataSourceState",
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:CommonTreeConfig",
      "required": true
     },
     {
      "uid": "getId",
      "name": "getId",
      "comment": {
       "raw": [
        "Should return unique ID of the TItem",
        " If omitted, we assume that every TItem has and unique id in its 'id' field.",
        " @param item - record, which id should be returned.",
        " @returns item id."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "complexIds",
      "name": "complexIds",
      "comment": {
       "raw": [
        "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
        " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "getParentId",
      "name": "getParentId",
      "comment": {
       "raw": [
        "Should return ID of the Item's parent. Usually it's i => i.parentId.",
        " If specified, Data Source will build items hierarchy.",
        "",
        " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
        " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
        "   to highlight parents with selected children",
        " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
        "   We need to load parents with a separate call (if backend doesn't pre-fetch them)",
        "",
        " @param item - record, which paretnId should be returned.",
        " @returns item parentId."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId | undefined"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "rowOptions",
      "name": "rowOptions",
      "comment": {
       "raw": [
        "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
        " See DataRowOptions for more details.",
        " If options depends on the item itself, use getRowOptions.",
        " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "DataRowOptions<TItem, TId>"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "getRowOptions",
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
        " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
        " See DataRowOptions for more details.",
        " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item - record, configuration should be returned for.",
        " @param index - index of a row. It is optional and should not be expected, that it is provided on every call."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index?: number | undefined) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "isFoldedByDefault",
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "Can be specified to unfold all or some items at start.",
        " If not specified, all rows would be folded.",
        " @param item - record, folding value should be returned for.",
        " @param dataSourceState - dataSource state with current `foldAll` value. It provides the possibility to respect foldAll change, if `isFoldedByDefault` is implemented."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, state: DataSourceState<TFilter, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "cascadeSelection",
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "selectAll",
      "name": "selectAll",
      "comment": {
       "raw": [
        "Enables/disables selectAll functionality. If disabled explicitly, `selectAll`, returned from a view is null.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "showSelectedOnly",
      "name": "showSelectedOnly",
      "comment": {
       "raw": [
        "Enables returning only selected rows and loading missing selected/checked rows, if it is required/possible.",
        " If enabled, `useView` returns only selected rows from `IDataSourceView.getVisibleRows`."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "patch",
      "name": "patch",
      "comment": {
       "raw": [
        "Items, which should be added/updated/deleted from the tree."
       ]
      },
      "typeValue": {
       "raw": "IMap<TId, TItem> | IImmutableMap<TId, TItem>"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "isDeleted",
      "name": "isDeleted",
      "comment": {
       "raw": [
        "To enable deleting of the items, it is required to specify getter for deleted state."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "getNewItemPosition",
      "name": "getNewItemPosition",
      "comment": {
       "raw": [
        "Provides information about the relative position of the new item.",
        " @param item - new item, position should be got for.",
        " @returns relative position in the list of items.",
        " @default PatchOrdering.TOP"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => symbol"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "getItemTemporaryOrder",
      "name": "getItemTemporaryOrder",
      "comment": {
       "raw": [
        "Provides information about the temporary order of the new item.",
        " @param item - new item, temporary order should be got for.",
        " @returns temporary order",
        "",
        " @experimental The API of this feature can be changed in the future releases."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "fixItemBetweenSortings",
      "name": "fixItemBetweenSortings",
      "comment": {
       "raw": [
        "If enabled, items position is fixed between sorting.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "sortBy",
      "name": "sortBy",
      "comment": {
       "raw": [
        "A pure function that gets sorting value for current sorting value"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:SortConfig",
      "required": false
     },
     {
      "uid": "getSearchFields",
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "A pure function that gets search value for each item.",
        " @default (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:SearchConfig",
      "required": false
     },
     {
      "uid": "sortSearchByRelevance",
      "name": "sortSearchByRelevance",
      "comment": {
       "raw": [
        "Enables sorting of search results by relevance.",
        " - The highest priority has records, which have a full match with a search keyword.",
        " - The lower one has records, which have a search keyword at the 0 position, but not the full match.",
        " - Then, records, which contain a search keyword as a separate word, but not at the beginning.",
        " - And the lowest one - any other match of the search keyword.",
        "",
        " Example:",
        " - `search`: 'some'",
        " - `record string`: 'some word', `rank` = 4",
        " - `record string`: 'someone', `rank` = 3",
        " - `record string`: 'I know some guy', `rank` = 2",
        " - `record string`: 'awesome', `rank` = 1",
        "",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:SearchConfig",
      "required": false
     },
     {
      "uid": "getFilter",
      "name": "getFilter",
      "comment": {
       "raw": [
        "A pure function that returns filter callback to be applied for each item.",
        " The callback should return true, if item passed the filter."
       ]
      },
      "typeValue": {
       "raw": "(filter: TFilter) => (item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:FilterConfig",
      "required": false
     },
     {
      "uid": "setItems",
      "name": "setItems",
      "comment": {
       "raw": [
        "Items updating listener, which fires on items loading/reloading/reset."
       ]
      },
      "typeValue": {
       "raw": "(items: TItem[], options?: ModificationOptions | undefined) => ItemsMap<TId, TItem>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:SharedItemsState",
      "required": false
     },
     {
      "uid": "items",
      "name": "items",
      "comment": {
       "raw": [
        "Data, which should be represented by a DataSource."
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:ArrayDataSourceConfig",
      "required": false
     },
     {
      "uid": "type",
      "name": "type",
      "comment": {
       "raw": [
        "Type of the tree to be supported."
       ]
      },
      "typeValue": {
       "raw": "'sync'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sync"
       ]
      },
      "from": "@epam/uui-core:SyncTreeProps",
      "required": true
     },
     {
      "uid": "type_2",
      "name": "type",
      "comment": {
       "raw": [
        "Type of the tree to be supported."
       ]
      },
      "typeValue": {
       "raw": "'async'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "async"
       ]
      },
      "from": "@epam/uui-core:AsyncTreeProps",
      "required": true
     },
     {
      "uid": "isLoaded",
      "name": "isLoaded",
      "comment": {
       "raw": [
        "Disables loading of records, if isLoaded = true.",
        " If isLoaded = true, items are taken from itemsMap.",
        " @internal"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:AsyncTreeProps",
      "required": false
     },
     {
      "uid": "itemsMap",
      "name": "itemsMap",
      "comment": {
       "raw": [
        "Map of shared items."
       ]
      },
      "typeValue": {
       "raw": "ItemsMap<TId, TItem>"
      },
      "from": "@epam/uui-core:SharedItemsState",
      "required": false
     },
     {
      "uid": "itemsStatusMap",
      "name": "itemsStatusMap",
      "comment": {
       "raw": [
        "Map of items statuses."
       ]
      },
      "typeValue": {
       "raw": "IMap<TId, RecordStatus>"
      },
      "from": "@epam/uui-core:ItemsStatuses",
      "required": false
     },
     {
      "uid": "itemsStatusCollector",
      "name": "itemsStatusCollector",
      "typeValue": {
       "raw": "ItemsStatusCollector<TItem, TId, TFilter>"
      },
      "from": "@epam/uui-core:ItemsStatuses",
      "required": false
     },
     {
      "uid": "api",
      "name": "api",
      "comment": {
       "raw": [
        "A function to retrieve the data, asynchronously. This function usually performs a REST API call.",
        " Should return the array of items, which will be processed by dataSource.",
        " This api called only once during the initialization and assumed to return the full amount of data.",
        " For lazy loading cases, use LazyDataSource"
       ]
      },
      "typeValue": {
       "raw": "() => Promise<TItem[]>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:AsyncDataSourceConfig",
      "required": true
     },
     {
      "uid": "api_2",
      "name": "api",
      "comment": {
       "raw": [
        "A function to retrieve the data, asynchronously.",
        " This function usually performs a REST API call.",
        " API is used to retrieve lists of items.",
        " It is expected to:",
        " - be able to handle paging (via from/count params)",
        " - be able to retrieve specific items by the list of their ids",
        " - be able to retrieve children by parents (when getChildCount is specified, and ctx.parentId is passed)"
       ]
      },
      "typeValue": {
       "raw": "LazyDataSourceApi<TItem, TId, TFilter>"
      },
      "typeValueRef": "@epam/uui-core:LazyDataSourceApi",
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:LazyDataSourceConfig",
      "required": true
     },
     {
      "uid": "getChildCount",
      "name": "getChildCount",
      "comment": {
       "raw": [
        "Should return number of children of the item.",
        " If it returns > 0, the item is assumed to have children and to be foldable.",
        " Usually, this value should be returned from API, as a field of a parent, e.g. { id: 1, name: 'London', childCount: 12 }.",
        " In this case, you can implement getChildCount as (i) => i.childCount.",
        "",
        " If you can't get number of children via API, you can return a guess value (avg number of children for this type of entity).",
        " Note, that this can lead to more API calls, and increased load times in the 'parallel' fetch mode."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => number"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:LazyDataSourceConfig",
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "comment": {
       "raw": [
        "A filter to pass to API.",
        " Note, that the DataSourceState also has a filter fields. These two filters are merged before API calls.",
        " Use this prop if you need to apply some filter in any case.",
        " Prefer to use filter in the DataSourceState for end-user editable filters."
       ]
      },
      "typeValue": {
       "raw": "TFilter"
      },
      "from": "@epam/uui-core:LazyDataSourceConfig",
      "required": false
     },
     {
      "uid": "fetchStrategy",
      "name": "fetchStrategy",
      "comment": {
       "raw": [
        "Defines how to fetch children:",
        " sequential (default) - fetch children for each parent one-by-one. Makes minimal over-querying, at cost of some speed.",
        " parallel - fetch children for several parents simultaneously. Can make a lot of over-querying for deep trees.",
        " Recommended for 2 level trees (grouping), as it makes no over-querying in this case, and is faster than sequential strategy."
       ]
      },
      "typeValue": {
       "raw": "'sequential' | 'parallel'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sequential",
        "parallel"
       ]
      },
      "from": "@epam/uui-core:LazyDataSourceConfig",
      "required": false
     },
     {
      "uid": "backgroundReload",
      "name": "backgroundReload",
      "comment": {
       "raw": [
        "Enables background reloading of data on search/sort/filter/reload, which turns off the rows placeholders displaying while data loading.",
        " During data reloading, previous data is displayed. To prevent any interaction with visible not actual rows, a blocker/spinner should be displayed.",
        " In UUI components, such as `PickerInput`, `PickerList`, `PickerModal` and `DataTable`, blockers are added.",
        " It is required to add blockers/spinners to the components, built on your own.",
        " If reloading is started, `view.getListProps` returns `isReloading` flag, set to `true`."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:LazyDataSourceConfig",
      "required": false
     },
     {
      "uid": "flattenSearchResults",
      "name": "flattenSearchResults",
      "comment": {
       "raw": [
        "Falls back to plain list from tree, if there's search.",
        " Default is true.",
        "",
        " If enabled, and search is active:",
        " - API will be called with parentId and parent undefined",
        " - getChildCount is ignored, all nodes are assumed to have no children",
        "",
        " See more here: https://github.com/epam/UUI/issues/8"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:FlattenSearchResultsConfig",
      "required": false
     },
     {
      "uid": "type_3",
      "name": "type",
      "comment": {
       "raw": [
        "Type of the tree to be supported."
       ]
      },
      "typeValue": {
       "raw": "'lazy'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "lazy"
       ]
      },
      "from": "@epam/uui-core:LazyTreeProps",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-core:UseTreeResult": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UseTreeResult",
     "nameFull": "UseTreeResult<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/views/tree/hooks/types.ts",
    "comment": {
     "raw": [
      "Result of the useTree hook."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "UseTreeResult<TItem, TId, TFilter>",
     "print": [
      "/**",
      " * Result of the useTree hook.",
      " */",
      "interface UseTreeResult<TItem, TId, TFilter = any> extends Omit<CommonTreeConfig<TItem, TId, TFilter>, 'patch'>, ITreeLoadingState, ITreeActions, LoadMissingRecords<TItem, TId>, GetItemStatus<TId>, FlattenSearchResultsConfig {",
      "    /**",
      "     * Tree-like data, rows to be build from.",
      "     */",
      "    tree: ITree<TItem, TId>;",
      "    /**",
      "     * Tree-like data, selected rows to be build from and cascade selection should be performed on.",
      "     */",
      "    selectionTree: ITree<TItem, TId>;",
      "    /**",
      "     * Version of the tree before applying patch to it.",
      "     */",
      "    treeWithoutPatch: ITree<TItem, TId>;",
      "    /**",
      "     * Total count of the rows.",
      "     */",
      "    totalCount?: number;",
      "    /**",
      "     * Allows patching an existing tree with updated data multiple times without affecting the original tree.",
      "     * It can be used while adding subtotals or making other changes to the data, based on update results before setting data to the form.",
      "     * @param modifiedItems Map of updated, deleted, or added items to be applied to the existing tree.",
      "     * @returns A new tree patched with the modified items.",
      "     */",
      "    applyPatch: (modifiedItems: IMap<TId, TItem> | IImmutableMap<TId, TItem>) => ITree<TItem, TId>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "tree",
      "name": "tree",
      "comment": {
       "raw": [
        "Tree-like data, rows to be build from."
       ]
      },
      "typeValue": {
       "raw": "ITree<TItem, TId>"
      },
      "required": true
     },
     {
      "uid": "selectionTree",
      "name": "selectionTree",
      "comment": {
       "raw": [
        "Tree-like data, selected rows to be build from and cascade selection should be performed on."
       ]
      },
      "typeValue": {
       "raw": "ITree<TItem, TId>"
      },
      "required": true
     },
     {
      "uid": "treeWithoutPatch",
      "name": "treeWithoutPatch",
      "comment": {
       "raw": [
        "Version of the tree before applying patch to it."
       ]
      },
      "typeValue": {
       "raw": "ITree<TItem, TId>"
      },
      "required": true
     },
     {
      "uid": "totalCount",
      "name": "totalCount",
      "comment": {
       "raw": [
        "Total count of the rows."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "applyPatch",
      "name": "applyPatch",
      "comment": {
       "raw": [
        "Allows patching an existing tree with updated data multiple times without affecting the original tree.",
        " It can be used while adding subtotals or making other changes to the data, based on update results before setting data to the form.",
        " @param modifiedItems Map of updated, deleted, or added items to be applied to the existing tree.",
        " @returns A new tree patched with the modified items."
       ]
      },
      "typeValue": {
       "raw": "(modifiedItems: IMap<TId, TItem> | IImmutableMap<TId, TItem>) => ITree<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "dataSourceState",
      "name": "dataSourceState",
      "comment": {
       "raw": [
        "State of the dataSource."
       ]
      },
      "typeValue": {
       "raw": "DataSourceState<TFilter, TId>"
      },
      "from": "@epam/uui-core:CommonTreeConfig",
      "required": true
     },
     {
      "uid": "setDataSourceState",
      "name": "setDataSourceState",
      "comment": {
       "raw": [
        "DataSource state update handler."
       ]
      },
      "typeValue": {
       "raw": "SetDataSourceState<TFilter, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:CommonTreeConfig",
      "required": true
     },
     {
      "uid": "getId",
      "name": "getId",
      "comment": {
       "raw": [
        "Should return unique ID of the TItem",
        " If omitted, we assume that every TItem has and unique id in its 'id' field.",
        " @param item - record, which id should be returned.",
        " @returns item id."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "complexIds",
      "name": "complexIds",
      "comment": {
       "raw": [
        "Set to true, if you use IDs which can't act as javascript Map key (objects or arrays).",
        " In this case, IDs will be internally JSON.stringify-ed to be used as Maps keys."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "getParentId",
      "name": "getParentId",
      "comment": {
       "raw": [
        "Should return ID of the Item's parent. Usually it's i => i.parentId.",
        " If specified, Data Source will build items hierarchy.",
        "",
        " Also, it is used by LazyDataSource to pre-fetch missing parents of loaded items. This is required in following cases:",
        " - when a child item is pre-selected, but not yet loaded at start. We need to load it's parent chain",
        "   to highlight parents with selected children",
        " - in flattenSearch mode, we usually want to display a path to each item (e.g. Canada/Ontario/Paris),",
        "   We need to load parents with a separate call (if backend doesn't pre-fetch them)",
        "",
        " @param item - record, which paretnId should be returned.",
        " @returns item parentId."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => TId | undefined"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "rowOptions",
      "name": "rowOptions",
      "comment": {
       "raw": [
        "Specifies if rows are selectable, checkable, draggable, clickable, and more.",
        " See DataRowOptions for more details.",
        " If options depends on the item itself, use getRowOptions.",
        " Specifying both rowOptions and getRowOptions might help to render better loading skeletons: we use only rowOptions in this case, as we haven't loaded an item yet.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item An item to get options for"
       ]
      },
      "typeValue": {
       "raw": "DataRowOptions<TItem, TId>"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "getRowOptions",
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "For each row, specify if row is selectable, editable, checkable, draggable, clickable, have its own set of columns, and more.",
        " To make rows editable, pass IEditable interface to each row. This works the same way as for other editable components.",
        " See DataRowOptions for more details.",
        " If both getRowOptions and rowOptions specified, we'll use getRowOptions for loaded rows, and rowOptions only for loading rows.",
        " Make sure all callbacks are properly memoized, as changing them will trigger re-renders or row, which would impact performance",
        " @param item - record, configuration should be returned for.",
        " @param index - index of a row. It is optional and should not be expected, that it is provided on every call."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index?: number | undefined) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "isFoldedByDefault",
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "Can be specified to unfold all or some items at start.",
        " If not specified, all rows would be folded.",
        " @param item - record, folding value should be returned for.",
        " @param dataSourceState - dataSource state with current `foldAll` value. It provides the possibility to respect foldAll change, if `isFoldedByDefault` is implemented."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, state: DataSourceState<TFilter, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "cascadeSelection",
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "selectAll",
      "name": "selectAll",
      "comment": {
       "raw": [
        "Enables/disables selectAll functionality. If disabled explicitly, `selectAll`, returned from a view is null.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "showSelectedOnly",
      "name": "showSelectedOnly",
      "comment": {
       "raw": [
        "Enables returning only selected rows and loading missing selected/checked rows, if it is required/possible.",
        " If enabled, `useView` returns only selected rows from `IDataSourceView.getVisibleRows`."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:BaseDataSourceConfig",
      "required": false
     },
     {
      "uid": "isDeleted",
      "name": "isDeleted",
      "comment": {
       "raw": [
        "To enable deleting of the items, it is required to specify getter for deleted state."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "getNewItemPosition",
      "name": "getNewItemPosition",
      "comment": {
       "raw": [
        "Provides information about the relative position of the new item.",
        " @param item - new item, position should be got for.",
        " @returns relative position in the list of items.",
        " @default PatchOrdering.TOP"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => symbol"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "getItemTemporaryOrder",
      "name": "getItemTemporaryOrder",
      "comment": {
       "raw": [
        "Provides information about the temporary order of the new item.",
        " @param item - new item, temporary order should be got for.",
        " @returns temporary order",
        "",
        " @experimental The API of this feature can be changed in the future releases."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "fixItemBetweenSortings",
      "name": "fixItemBetweenSortings",
      "comment": {
       "raw": [
        "If enabled, items position is fixed between sorting.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PatchOptions",
      "required": false
     },
     {
      "uid": "sortBy",
      "name": "sortBy",
      "comment": {
       "raw": [
        "A pure function that gets sorting value for current sorting value"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:SortConfig",
      "required": false
     },
     {
      "uid": "isFetching",
      "name": "isFetching",
      "comment": {
       "raw": [
        "Are tree records loading silently."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ITreeLoadingState",
      "required": false
     },
     {
      "uid": "isLoading",
      "name": "isLoading",
      "comment": {
       "raw": [
        "Are tree records loading loadly (show loading placeholders, etc)."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ITreeLoadingState",
      "required": false
     },
     {
      "uid": "reload",
      "name": "reload",
      "comment": {
       "raw": [
        "Tree reloading handler."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ITreeActions",
      "required": true
     },
     {
      "uid": "loadMissingRecordsOnCheck",
      "name": "loadMissingRecordsOnCheck",
      "comment": {
       "raw": [
        "Loads missing records and provides a fulfilled tree.",
        " @param id - id of an item, which is checked and records should be loaded for.",
        " @param isChecked - checking status of the record.",
        " @param isRoot - a flag, which marks if all records should be checked/unchecked.",
        " @returns fulfilled tree with missing records, those required to be loaded for checking."
       ]
      },
      "typeValue": {
       "raw": "(id: TId, isChecked: boolean, isRoot: boolean) => Promise<ITree<TItem, TId>>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:LoadMissingRecords",
      "required": false
     },
     {
      "uid": "getItemStatus",
      "name": "getItemStatus",
      "comment": {
       "raw": [
        "Provides a status of the given item.",
        " @param id - id of an item, status to be provided for.",
        " @returns status of the item."
       ]
      },
      "typeValue": {
       "raw": "(id: TId) => RecordStatus"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:GetItemStatus",
      "required": false
     },
     {
      "uid": "flattenSearchResults",
      "name": "flattenSearchResults",
      "comment": {
       "raw": [
        "Falls back to plain list from tree, if there's search.",
        " Default is true.",
        "",
        " If enabled, and search is active:",
        " - API will be called with parentId and parent undefined",
        " - getChildCount is ignored, all nodes are assumed to have no children",
        "",
        " See more here: https://github.com/epam/UUI/issues/8"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:FlattenSearchResultsConfig",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:UseUuiErrorOptions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UseUuiErrorOptions",
     "nameFull": "UseUuiErrorOptions"
    },
    "src": "uui-core/src/hooks/useUuiError.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "UseUuiErrorOptions",
     "print": [
      "interface UseUuiErrorOptions {",
      "    /** Config with information which data will be displayed in case of particular API error.",
      "     * If omitted, default config will be used.",
      "     * */",
      "    errorConfig?: Record<ApiCallErrorType, ErrorPageInfo>;",
      "    /** Config with information which data will be displayed in case recovery errors.",
      "     * If omitted, default config will be used.",
      "     * */",
      "    recoveryConfig?: Record<ApiRecoveryReason, UuiRecoveryErrorInfo>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "errorConfig",
      "name": "errorConfig",
      "comment": {
       "raw": [
        "Config with information which data will be displayed in case of particular API error.",
        " If omitted, default config will be used."
       ]
      },
      "typeValue": {
       "raw": "Record<ApiCallErrorType, ErrorPageInfo>"
      },
      "required": false
     },
     {
      "uid": "recoveryConfig",
      "name": "recoveryConfig",
      "comment": {
       "raw": [
        "Config with information which data will be displayed in case recovery errors.",
        " If omitted, default config will be used."
       ]
      },
      "typeValue": {
       "raw": "Record<ApiRecoveryReason, UuiRecoveryErrorInfo>"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:UseUuiErrorProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UseUuiErrorProps",
     "nameFull": "UseUuiErrorProps"
    },
    "src": "uui-core/src/hooks/useUuiError.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "UseUuiErrorProps",
     "print": [
      "interface UseUuiErrorProps {",
      "    /** Pure function to get error info for display based on error.",
      "     * If omitted, error info from default config or options.errorConfig will be used.",
      "     */",
      "    getErrorInfo: (error: any, defaultErrorInfo: ErrorPageInfo) => ErrorPageInfo;",
      "    /** Error handling options */",
      "    options?: UseUuiErrorOptions;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "getErrorInfo",
      "name": "getErrorInfo",
      "comment": {
       "raw": [
        "Pure function to get error info for display based on error.",
        " If omitted, error info from default config or options.errorConfig will be used."
       ]
      },
      "typeValue": {
       "raw": "(error: any, defaultErrorInfo: ErrorPageInfo) => ErrorPageInfo"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "options",
      "name": "options",
      "comment": {
       "raw": [
        "Error handling options"
       ]
      },
      "typeValue": {
       "raw": "UseUuiErrorOptions"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:UseUuiServicesProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UseUuiServicesProps",
     "nameFull": "UseUuiServicesProps<TApi, TAppContext>"
    },
    "src": "uui-core/src/hooks/useUuiServices.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "UseUuiServicesProps<TApi, TAppContext>",
     "print": [
      "interface UseUuiServicesProps<TApi, TAppContext> extends UuiServicesProps<TApi> {",
      "    /** AppContext value */",
      "    appContext?: TAppContext;",
      "    /** Instance of the router */",
      "    router: IRouterContext;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "appContext",
      "name": "appContext",
      "comment": {
       "raw": [
        "AppContext value"
       ]
      },
      "typeValue": {
       "raw": "TAppContext"
      },
      "required": false
     },
     {
      "uid": "router",
      "name": "router",
      "comment": {
       "raw": [
        "Instance of the router"
       ]
      },
      "typeValue": {
       "raw": "IRouterContext"
      },
      "required": true
     },
     {
      "uid": "apiDefinition",
      "name": "apiDefinition",
      "comment": {
       "raw": [
        "Function to get the api definitions.",
        " Usually, api definitions this is an object which contain object with all api requests of the app.",
        " Then you can call this requests via 'uuiContext.api.myApi(myData)'"
       ]
      },
      "typeValue": {
       "raw": "(processRequest: IProcessRequest) => TApi"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:UuiServicesProps",
      "required": false
     },
     {
      "uid": "apiReloginPath",
      "name": "apiReloginPath",
      "comment": {
       "raw": [
        "Url to the relogin page. Used to open new browser window by this path, in case of auth lost error.",
        " Opened by this path page, should process authentication and then post 'authSuccess' cross-window message to the opener, to recover failed requests.",
        " @default '/auth/login'"
       ],
       "tags": {
        "@default": "/auth/login"
       }
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     },
     {
      "uid": "apiPingPath",
      "name": "apiPingPath",
      "comment": {
       "raw": [
        "Url to the api, which ApiContext will start pinging in case of 'connection lost', until it gets 200 status. Then it will retry failed requests.",
        " @default '/auth/ping'"
       ],
       "tags": {
        "@default": "/auth/ping"
       }
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     },
     {
      "uid": "apiServerUrl",
      "name": "apiServerUrl",
      "comment": {
       "raw": [
        "Url to the server api under which all requests will be processed. Usefully for cases, when all api located by some specific url, which is not much app url.",
        " @default ''"
       ],
       "tags": {
        "@default": ""
       }
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     },
     {
      "uid": "fetch",
      "name": "fetch",
      "comment": {
       "raw": [
        "Allows to replace fetch implementation, for adding auth headers, mocking for testing, etc.",
        " By default, standard fetch will be used."
       ]
      },
      "typeValue": {
       "raw": "typeof fetch"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:UseVirtualListProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UseVirtualListProps",
     "nameFull": "UseVirtualListProps"
    },
    "src": "uui-core/src/hooks/useVirtualList/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "UseVirtualListProps",
     "print": [
      "interface UseVirtualListProps extends IEditable<VirtualListState> {",
      "    /** Count of list items */",
      "    rowsCount?: number | undefined;",
      "    /**",
      "     * Virtual list will align topIndex and visibleCount to the block size.",
      "     * E.g. with block size = 10, even if we have rows 2 to 12 visible, the range will be aligned to 0-20",
      "     * This is done to not re-render rows on each scroll.",
      "     * When scrolling, re-render will happen only when we scroll over the next blockSize rows.",
      "     * Default is 20.",
      "     */",
      "    blockSize?: number;",
      "    /**",
      "     * Number of rows to draw before the top and after the bottom of the list.",
      "     * This is required to hide blank areas while scrolling.",
      "     * Default is 20.",
      "     */",
      "    overdrawRows?: number;",
      "    /** Called when list was scrolled */",
      "    onScroll?(value: HTMLElement): void;",
      "    /**",
      "     * Selector to get rows container node.",
      "     */",
      "    rowsSelector?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "rowsCount",
      "name": "rowsCount",
      "comment": {
       "raw": [
        "Count of list items"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "blockSize",
      "name": "blockSize",
      "comment": {
       "raw": [
        "Virtual list will align topIndex and visibleCount to the block size.",
        " E.g. with block size = 10, even if we have rows 2 to 12 visible, the range will be aligned to 0-20",
        " This is done to not re-render rows on each scroll.",
        " When scrolling, re-render will happen only when we scroll over the next blockSize rows.",
        " Default is 20."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "overdrawRows",
      "name": "overdrawRows",
      "comment": {
       "raw": [
        "Number of rows to draw before the top and after the bottom of the list.",
        " This is required to hide blank areas while scrolling.",
        " Default is 20."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "onScroll",
      "name": "onScroll",
      "comment": {
       "raw": [
        "Called when list was scrolled"
       ]
      },
      "typeValue": {
       "raw": "(value: HTMLElement) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "rowsSelector",
      "name": "rowsSelector",
      "comment": {
       "raw": [
        "Selector to get rows container node."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "VirtualListState"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: VirtualListState) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:UuiContexts": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UuiContexts",
     "nameFull": "UuiContexts"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "UuiContexts",
     "print": [
      "interface UuiContexts {",
      "    /** Api service allows you to process requests with an error handling.",
      "     * See more here - https://uui.epam.com/documents?id=apiContext&category=contexts",
      "     * */",
      "    uuiApi: IApiContext;",
      "    /** Instance of react-router wrapped by UUI adapter */",
      "    uuiRouter: IRouterContext;",
      "    /** Modals service allows you to show modal windows over the main content.",
      "     * See more here - https://uui.epam.com/documents?id=modalContext&category=contexts",
      "     * */",
      "    uuiModals: IModalContext;",
      "    /** Drag and Drop service for dnd operations.",
      "     * See more here - https://uui.epam.com/documents?id=dragAndDrop",
      "     * */",
      "    uuiDnD: IDndContext;",
      "    /** UserSettings service allows you to store user data in localStorage. */",
      "    uuiUserSettings: IUserSettingsContext;",
      "    /** Web analytics service allows you to send user interaction events to the analytics systems.",
      "     * See more here - https://uui.epam.com/documents?id=analyticsContext&category=contexts",
      "     * */",
      "    uuiAnalytics: IAnalyticsContext;",
      "    /** Error service allows you to report errors.",
      "     * See more here - https://uui.epam.com/documents?id=apiContext&category=contexts",
      "     * */",
      "    uuiErrors: IErrorContext;",
      "    /** Notifications service allows you to show notifications over the main content.",
      "     * See more here - https://uui.epam.com/documents?id=notificationContextDoc&category=contexts",
      "     * */",
      "    uuiNotifications: INotificationContext;",
      "    /** Layout service. Used to manage layout for overlays like modals, dropdowns, etc. */",
      "    uuiLayout: ILayoutContext;",
      "    /** Lock service.",
      "     * See more here - https://uui.epam.com/documents?id=lockContextDoc&category=contexts",
      "     * */",
      "    uuiLocks: ILockContext;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "uuiApi",
      "name": "uuiApi",
      "comment": {
       "raw": [
        "Api service allows you to process requests with an error handling.",
        " See more here - https://uui.epam.com/documents?id=apiContext&category=contexts"
       ]
      },
      "typeValue": {
       "raw": "IApiContext"
      },
      "required": true
     },
     {
      "uid": "uuiRouter",
      "name": "uuiRouter",
      "comment": {
       "raw": [
        "Instance of react-router wrapped by UUI adapter"
       ]
      },
      "typeValue": {
       "raw": "IRouterContext"
      },
      "required": true
     },
     {
      "uid": "uuiModals",
      "name": "uuiModals",
      "comment": {
       "raw": [
        "Modals service allows you to show modal windows over the main content.",
        " See more here - https://uui.epam.com/documents?id=modalContext&category=contexts"
       ]
      },
      "typeValue": {
       "raw": "IModalContext"
      },
      "required": true
     },
     {
      "uid": "uuiDnD",
      "name": "uuiDnD",
      "comment": {
       "raw": [
        "Drag and Drop service for dnd operations.",
        " See more here - https://uui.epam.com/documents?id=dragAndDrop"
       ]
      },
      "typeValue": {
       "raw": "IDndContext"
      },
      "required": true
     },
     {
      "uid": "uuiUserSettings",
      "name": "uuiUserSettings",
      "comment": {
       "raw": [
        "UserSettings service allows you to store user data in localStorage."
       ]
      },
      "typeValue": {
       "raw": "IUserSettingsContext"
      },
      "required": true
     },
     {
      "uid": "uuiAnalytics",
      "name": "uuiAnalytics",
      "comment": {
       "raw": [
        "Web analytics service allows you to send user interaction events to the analytics systems.",
        " See more here - https://uui.epam.com/documents?id=analyticsContext&category=contexts"
       ]
      },
      "typeValue": {
       "raw": "IAnalyticsContext"
      },
      "required": true
     },
     {
      "uid": "uuiErrors",
      "name": "uuiErrors",
      "comment": {
       "raw": [
        "Error service allows you to report errors.",
        " See more here - https://uui.epam.com/documents?id=apiContext&category=contexts"
       ]
      },
      "typeValue": {
       "raw": "IErrorContext"
      },
      "required": true
     },
     {
      "uid": "uuiNotifications",
      "name": "uuiNotifications",
      "comment": {
       "raw": [
        "Notifications service allows you to show notifications over the main content.",
        " See more here - https://uui.epam.com/documents?id=notificationContextDoc&category=contexts"
       ]
      },
      "typeValue": {
       "raw": "INotificationContext"
      },
      "required": true
     },
     {
      "uid": "uuiLayout",
      "name": "uuiLayout",
      "comment": {
       "raw": [
        "Layout service. Used to manage layout for overlays like modals, dropdowns, etc."
       ]
      },
      "typeValue": {
       "raw": "ILayoutContext"
      },
      "required": true
     },
     {
      "uid": "uuiLocks",
      "name": "uuiLocks",
      "comment": {
       "raw": [
        "Lock service.",
        " See more here - https://uui.epam.com/documents?id=lockContextDoc&category=contexts"
       ]
      },
      "typeValue": {
       "raw": "ILockContext"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:UuiRecoveryErrorInfo": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UuiRecoveryErrorInfo",
     "nameFull": "UuiRecoveryErrorInfo"
    },
    "src": "uui-core/src/hooks/useUuiError.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "UuiRecoveryErrorInfo",
     "print": [
      "type UuiRecoveryErrorInfo = {",
      "    title: string;",
      "    subtitle: string;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "title",
      "name": "title",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": "subtitle",
      "name": "subtitle",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:UuiServicesProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UuiServicesProps",
     "nameFull": "UuiServicesProps<TApi>"
    },
    "src": "uui-core/src/hooks/useUuiServices.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "UuiServicesProps<TApi>",
     "print": [
      "interface UuiServicesProps<TApi> extends ApiContextProps {",
      "    /** Function to get the api definitions.",
      "     * Usually, api definitions this is an object which contain object with all api requests of the app.",
      "     * Then you can call this requests via 'uuiContext.api.myApi(myData)'",
      "     * */",
      "    apiDefinition?: (processRequest: IProcessRequest) => TApi;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "apiDefinition",
      "name": "apiDefinition",
      "comment": {
       "raw": [
        "Function to get the api definitions.",
        " Usually, api definitions this is an object which contain object with all api requests of the app.",
        " Then you can call this requests via 'uuiContext.api.myApi(myData)'"
       ]
      },
      "typeValue": {
       "raw": "(processRequest: IProcessRequest) => TApi"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "apiReloginPath",
      "name": "apiReloginPath",
      "comment": {
       "raw": [
        "Url to the relogin page. Used to open new browser window by this path, in case of auth lost error.",
        " Opened by this path page, should process authentication and then post 'authSuccess' cross-window message to the opener, to recover failed requests.",
        " @default '/auth/login'"
       ],
       "tags": {
        "@default": "/auth/login"
       }
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     },
     {
      "uid": "apiPingPath",
      "name": "apiPingPath",
      "comment": {
       "raw": [
        "Url to the api, which ApiContext will start pinging in case of 'connection lost', until it gets 200 status. Then it will retry failed requests.",
        " @default '/auth/ping'"
       ],
       "tags": {
        "@default": "/auth/ping"
       }
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     },
     {
      "uid": "apiServerUrl",
      "name": "apiServerUrl",
      "comment": {
       "raw": [
        "Url to the server api under which all requests will be processed. Usefully for cases, when all api located by some specific url, which is not much app url.",
        " @default ''"
       ],
       "tags": {
        "@default": ""
       }
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     },
     {
      "uid": "fetch",
      "name": "fetch",
      "comment": {
       "raw": [
        "Allows to replace fetch implementation, for adding auth headers, mocking for testing, etc.",
        " By default, standard fetch will be used."
       ]
      },
      "typeValue": {
       "raw": "typeof fetch"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ApiContextProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ValidationMode": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ValidationMode",
     "nameFull": "ValidationMode"
    },
    "src": "uui-core/src/data/validation/validate.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "'change' | 'save'",
     "print": [
      "type ValidationMode = 'change' | 'save';"
     ]
    }
   }
  },
  "@epam/uui-core:ValidationState": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ValidationState",
     "nameFull": "ValidationState"
    },
    "src": "uui-core/src/data/lenses/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ValidationState",
     "print": [
      "interface ValidationState extends ICanBeInvalid, IHasValidationMessage {",
      "    /** If T is a complex value (object or array), this property contains validation states of inner items */",
      "    validationProps?: {",
      "        [key: string]: ValidationState;",
      "    };",
      "}"
     ]
    },
    "props": [
     {
      "uid": "validationProps",
      "name": "validationProps",
      "comment": {
       "raw": [
        "If T is a complex value (object or array), this property contains validation states of inner items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: ValidationState; }"
      },
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "validationMessage",
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasValidationMessage",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:VirtualListRange": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "VirtualListRange",
     "nameFull": "VirtualListRange"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "VirtualListRange",
     "print": [
      "interface VirtualListRange {",
      "    /**",
      "     * Index of the topmost item, in rendered batch.",
      "     * Note - this item might not be visible, as Virtual List maintain some reserve of rows on top / at the bottom of the list",
      "     */",
      "    topIndex?: number;",
      "    /**",
      "     * Number of currently rendered items.",
      "     * Virtual list updates this value automatically, if it too small.",
      "     * Note Virtual List renders more items, that actually visible,",
      "     * as it need maintain some reserve of rows on top / at the bottom of the list.",
      "     */",
      "    visibleCount?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "topIndex",
      "name": "topIndex",
      "comment": {
       "raw": [
        "Index of the topmost item, in rendered batch.",
        " Note - this item might not be visible, as Virtual List maintain some reserve of rows on top / at the bottom of the list"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "visibleCount",
      "name": "visibleCount",
      "comment": {
       "raw": [
        "Number of currently rendered items.",
        " Virtual list updates this value automatically, if it too small.",
        " Note Virtual List renders more items, that actually visible,",
        " as it need maintain some reserve of rows on top / at the bottom of the list."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:VirtualListState": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "VirtualListState",
     "nameFull": "VirtualListState"
    },
    "src": "uui-core/src/types/dataSources.ts",
    "comment": {
     "raw": [
      "Holds state of a Virtual List - top visible item index, and estimated count of visible items"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "VirtualListState",
     "print": [
      "/** Holds state of a Virtual List - top visible item index, and estimated count of visible items */",
      "interface VirtualListState extends VirtualListRange {",
      "    /**",
      "     * Virtual list ensures that row with this Index is within the visible area, if not Virtual List .",
      "     * Virtual list updates this value on scroll to null when appear in the visible area.",
      "     * If this value is updated manually, Virtual List would scroll to the specified items.",
      "     * It would attempt to put scroll so this item will be at the top of the list.",
      "     */",
      "    scrollTo?: ScrollToConfig;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "scrollTo",
      "name": "scrollTo",
      "comment": {
       "raw": [
        "Virtual list ensures that row with this Index is within the visible area, if not Virtual List .",
        " Virtual list updates this value on scroll to null when appear in the visible area.",
        " If this value is updated manually, Virtual List would scroll to the specified items.",
        " It would attempt to put scroll so this item will be at the top of the list."
       ]
      },
      "typeValue": {
       "raw": "ScrollToConfig"
      },
      "required": false
     },
     {
      "uid": "topIndex",
      "name": "topIndex",
      "comment": {
       "raw": [
        "Index of the topmost item, in rendered batch.",
        " Note - this item might not be visible, as Virtual List maintain some reserve of rows on top / at the bottom of the list"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:VirtualListRange",
      "required": false
     },
     {
      "uid": "visibleCount",
      "name": "visibleCount",
      "comment": {
       "raw": [
        "Number of currently rendered items.",
        " Virtual list updates this value automatically, if it too small.",
        " Note Virtual List renders more items, that actually visible,",
        " as it need maintain some reserve of rows on top / at the bottom of the list."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:VirtualListRange",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:VPanelProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "VPanelProps",
     "nameFull": "VPanelProps"
    },
    "src": "uui-core/src/types/props.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "VPanelProps",
     "print": [
      "type VPanelProps = IHasCX & IHasChildren & IClickable & IHasRawProps<HTMLAttributes<HTMLDivElement>> & IHasForwardedRef<HTMLDivElement> & IAnalyticableClick & {",
      "    /** Native style attributes */",
      "    style?: CSSProperties;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "style",
      "name": "style",
      "comment": {
       "raw": [
        "Native style attributes"
       ]
      },
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-core:ApiCallStatus": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ApiCallStatus",
     "nameFull": "ApiCallStatus"
    },
    "src": "uui-core/src/types/contexts.ts",
    "exported": false
   }
  },
  "@epam/uui-core:ArrayDataSourceConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ArrayDataSourceConfig",
     "nameFull": "ArrayDataSourceConfig<TItem>"
    },
    "src": "uui-core/src/data/processing/views/tree/hooks/strategies/types/common.ts",
    "exported": false
   }
  },
  "@epam/uui-core:AsyncDataSourceConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "AsyncDataSourceConfig",
     "nameFull": "AsyncDataSourceConfig<TItem>"
    },
    "src": "uui-core/src/data/processing/views/tree/hooks/strategies/types/common.ts",
    "exported": false
   }
  },
  "@epam/uui-core:AsyncTreeProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "AsyncTreeProps",
     "nameFull": "AsyncTreeProps<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/views/tree/hooks/strategies/asyncTree/types.ts",
    "comment": {
     "raw": [
      "Async tree hook configuration."
     ]
    },
    "exported": false
   }
  },
  "@epam/uui-core:CommonTreeConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "CommonTreeConfig",
     "nameFull": "CommonTreeConfig<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/views/tree/hooks/strategies/types/common.ts",
    "comment": {
     "raw": [
      "Tree configuration."
     ]
    },
    "exported": false
   }
  },
  "@epam/uui-core:CustomFilterConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "CustomFilterConfig",
     "nameFull": "CustomFilterConfig<TFilter>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": false
   }
  },
  "@epam/uui-core:DatePickerFilterConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "DatePickerFilterConfig",
     "nameFull": "DatePickerFilterConfig<TFilter>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": false
   }
  },
  "@epam/uui-core:FilterConfigBase": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "FilterConfigBase",
     "nameFull": "FilterConfigBase<TFilter>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": false
   }
  },
  "@epam/uui-core:GetItemStatus": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "GetItemStatus",
     "nameFull": "GetItemStatus<TId>"
    },
    "src": "uui-core/src/data/processing/views/tree/hooks/strategies/types/strategies.ts",
    "comment": {
     "raw": [
      "Item status getter."
     ]
    },
    "exported": false
   }
  },
  "@epam/uui-core:ItemsStatuses": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ItemsStatuses",
     "nameFull": "ItemsStatuses<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/views/tree/hooks/strategies/types/common.ts",
    "exported": false
   }
  },
  "@epam/uui-core:ITreeActions": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ITreeActions",
     "nameFull": "ITreeActions"
    },
    "src": "uui-core/src/data/processing/views/tree/hooks/strategies/types/common.ts",
    "comment": {
     "raw": [
      "Actions, allowed to be performed on the tree."
     ]
    },
    "exported": false
   }
  },
  "@epam/uui-core:ITreeLoadingState": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "ITreeLoadingState",
     "nameFull": "ITreeLoadingState"
    },
    "src": "uui-core/src/data/processing/views/tree/hooks/strategies/types/common.ts",
    "comment": {
     "raw": [
      "Loading state of the tree."
     ]
    },
    "exported": false
   }
  },
  "@epam/uui-core:LazyDataSourceConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "LazyDataSourceConfig",
     "nameFull": "LazyDataSourceConfig<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/views/tree/hooks/strategies/types/common.ts",
    "exported": false
   }
  },
  "@epam/uui-core:LazyTreeProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "LazyTreeProps",
     "nameFull": "LazyTreeProps<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/views/tree/hooks/strategies/lazyTree/types.ts",
    "exported": false
   }
  },
  "@epam/uui-core:LoadMissingRecords": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "LoadMissingRecords",
     "nameFull": "LoadMissingRecords<TItem, TId>"
    },
    "src": "uui-core/src/data/processing/views/tree/hooks/strategies/types/strategies.ts",
    "comment": {
     "raw": [
      "Load missing records getter."
     ]
    },
    "exported": false
   }
  },
  "@epam/uui-core:NumericFilterConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "NumericFilterConfig",
     "nameFull": "NumericFilterConfig<TFilter>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": false
   }
  },
  "@epam/uui-core:RangeDatePickerFilterConfig": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "RangeDatePickerFilterConfig",
     "nameFull": "RangeDatePickerFilterConfig<TFilter>"
    },
    "src": "uui-core/src/types/tables.ts",
    "exported": false
   }
  },
  "@epam/uui-core:RouterState": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "RouterState",
     "nameFull": "RouterState"
    },
    "src": "uui-core/src/services/routing/interfaces/IRouter6.ts",
    "exported": false
   }
  },
  "@epam/uui-core:SharedItemsState": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "SharedItemsState",
     "nameFull": "SharedItemsState<TItem, TId>"
    },
    "src": "uui-core/src/data/processing/views/tree/hooks/strategies/types/common.ts",
    "exported": false
   }
  },
  "@epam/uui-core:SyncTreeProps": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "SyncTreeProps",
     "nameFull": "SyncTreeProps<TItem, TId, TFilter>"
    },
    "src": "uui-core/src/data/processing/views/tree/hooks/strategies/syncTree/types.ts",
    "exported": false
   }
  },
  "@epam/uui-core:UseTableStateHookBaseParams": {
   "summary": {
    "module": "@epam/uui-core",
    "typeName": {
     "name": "UseTableStateHookBaseParams",
     "nameFull": "UseTableStateHookBaseParams<TFilter, TViewState>"
    },
    "src": "uui-core/src/hooks/useTableState/useTableState.ts",
    "exported": false
   }
  },
  "@epam/uui-components:AccordionProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "AccordionProps",
     "nameFull": "AccordionProps"
    },
    "src": "uui-components/src/layout/Accordion.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "GeneralAccordionProps | EditableAccordionProps",
     "print": [
      "type AccordionProps = GeneralAccordionProps | EditableAccordionProps;"
     ]
    },
    "props": [
     {
      "uid": "title",
      "name": "title",
      "comment": {
       "raw": [
        "Accordion title"
       ]
      },
      "typeValue": {
       "raw": "string | React.ReactElement<any, string | React.JSXElementConstructor<any>>"
      },
      "from": "@epam/uui-components:GeneralAccordionProps",
      "required": false
     },
     {
      "uid": "renderTitle",
      "name": "renderTitle",
      "comment": {
       "raw": [
        "Overrides default title rendering."
       ]
      },
      "typeValue": {
       "raw": "(isOpen: boolean) => React.ReactElement<any, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:GeneralAccordionProps",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Overrides the default dropdown (folding) icon.Pass null to disable the folding icon completely"
       ]
      },
      "typeValue": {
       "raw": "null | Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:GeneralAccordionProps",
      "required": false
     },
     {
      "uid": "renderAdditionalItems",
      "name": "renderAdditionalItems",
      "comment": {
       "raw": [
        "Renders additional items to component's header (after the title, and before the folding icon)"
       ]
      },
      "typeValue": {
       "raw": "(isOpen: boolean) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:GeneralAccordionProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-components:AdaptiveItemProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "AdaptiveItemProps",
     "nameFull": "AdaptiveItemProps<T>"
    },
    "src": "uui-components/src/adaptivePanel/types.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "AdaptiveItemProps<T>",
     "print": [
      "type AdaptiveItemProps<T = unknown> = T & {",
      "    /**",
      "     * Render callback of the item. It renders items inside the panel and measures their width.",
      "     * Pay attention that if you want to set some gaps between items, use AdaptivePanel property itemsGap.",
      "     * */",
      "    render: (item: AdaptiveItemProps<T>, hiddenItems?: AdaptiveItemProps<T>[], displayedItems?: AdaptiveItemProps<T>[]) => any;",
      "    /**",
      "     * Item collapsing priority. Items with lower priority will be hidden first.",
      "     * If several items have the same priority, they will be hidden together, even if there's a place for one of them.",
      "     * */",
      "    priority: number;",
      "    /** If true, this item will be shown when some other items was hidden; for example, you can use it to render dropdowns with hidden items.",
      "     * You can provide more than one collapsedContainer item, but will be shown only those which has minimal priority, but this priority can't be less than the last hidden item’s priority. */",
      "    collapsedContainer?: boolean;",
      "    /** Unique ID of item */",
      "    id: string;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "render",
      "name": "render",
      "comment": {
       "raw": [
        "Render callback of the item. It renders items inside the panel and measures their width.",
        " Pay attention that if you want to set some gaps between items, use AdaptivePanel property itemsGap."
       ]
      },
      "typeValue": {
       "raw": "(item: AdaptiveItemProps<T>, hiddenItems?: AdaptiveItemProps<T>[] | undefined, displayedItems?: AdaptiveItemProps<T>[] | undefined) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "priority",
      "name": "priority",
      "comment": {
       "raw": [
        "Item collapsing priority. Items with lower priority will be hidden first.",
        " If several items have the same priority, they will be hidden together, even if there's a place for one of them."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": "collapsedContainer",
      "name": "collapsedContainer",
      "comment": {
       "raw": [
        "If true, this item will be shown when some other items was hidden; for example, you can use it to render dropdowns with hidden items.",
        " You can provide more than one collapsedContainer item, but will be shown only those which has minimal priority, but this priority can't be less than the last hidden item’s priority."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "Unique ID of item"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:AdaptivePanelProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "AdaptivePanelProps",
     "nameFull": "AdaptivePanelProps"
    },
    "src": "uui-components/src/adaptivePanel/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "AdaptivePanelProps",
     "print": [
      "interface AdaptivePanelProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    /** Array of items to be rendered in AdaptivePanel */",
      "    items: AdaptiveItemProps[];",
      "    /** Defines size of the gap (gutter) between an element's 'items' in the AdaptivePanel */",
      "    itemsGap?: number | '6' | '12' | '18' | '24' | '36';",
      "}"
     ]
    },
    "props": [
     {
      "uid": "items",
      "name": "items",
      "comment": {
       "raw": [
        "Array of items to be rendered in AdaptivePanel"
       ]
      },
      "typeValue": {
       "raw": "{ render: (item: any, hiddenItems?: any[] | undefined, displayedItems?: any[] | undefined) => any; priority: number; collapsedContainer?: boolean | undefined; id: string; }[]"
      },
      "required": true
     },
     {
      "uid": "itemsGap",
      "name": "itemsGap",
      "comment": {
       "raw": [
        "Defines size of the gap (gutter) between an element's 'items' in the AdaptivePanel"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '24' | '36'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "36"
       ],
       "scalarTypeOption": "number"
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:AnchorProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "AnchorProps",
     "nameFull": "AnchorProps"
    },
    "src": "uui-components/src/navigation/Anchor.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "AnchorProps",
     "print": [
      "type AnchorProps = ClickableComponentProps & IHasChildren & {};"
     ]
    },
    "props": [
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:ArrayPickerProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "ArrayPickerProps",
     "nameFull": "ArrayPickerProps<TId, TItem>"
    },
    "src": "uui-components/src/pickers/bindingHelpers.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "{ selectionMode: 'multi'; valueType: 'id'; emptyValue?: [] | null | undefined; } & IEditable<TId[]> | { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]>",
     "print": [
      "type ArrayPickerProps<TId, TItem> = ({",
      "    selectionMode: 'multi';",
      "    valueType: 'id';",
      "    emptyValue?: [",
      "    ] | null;",
      "} & IEditable<TId[]>) | ({",
      "    selectionMode: 'multi';",
      "    valueType: 'entity';",
      "    emptyValue?: [",
      "    ] | null;",
      "} & IEditable<TItem[]>);"
     ]
    },
    "props": [
     {
      "uid": "selectionMode",
      "name": "selectionMode",
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "required": true
     },
     {
      "uid": "valueType",
      "name": "valueType",
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "required": true
     },
     {
      "uid": "emptyValue",
      "name": "emptyValue",
      "typeValue": {
       "raw": "null | []"
      },
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "valueType_2",
      "name": "valueType",
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "required": true
     },
     {
      "uid": "value_2",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_2",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-components:AvatarProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "AvatarProps",
     "nameFull": "AvatarProps"
    },
    "src": "uui-components/src/widgets/Avatar.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "AvatarProps",
     "print": [
      "interface AvatarProps extends IHasCX, IHasRawProps<React.ImgHTMLAttributes<HTMLImageElement>>, IHasForwardedRef<HTMLImageElement> {",
      "    /** HTML alt attribute value */",
      "    alt?: string;",
      "    /** Image URL */",
      "    img: string | null;",
      "    /** Size  */",
      "    size: '12' | '18' | '24' | '30' | '36' | '42' | '48' | '54' | '60' | '72' | '78' | '90' | '144' | number;",
      "    /** True to show placeholder */",
      "    isLoading?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "alt",
      "name": "alt",
      "comment": {
       "raw": [
        "HTML alt attribute value"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "img",
      "name": "img",
      "comment": {
       "raw": [
        "Image URL"
       ]
      },
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Size"
       ]
      },
      "typeValue": {
       "raw": "number | '12' | '18' | '24' | '36' | '30' | '42' | '48' | '54' | '60' | '72' | '78' | '90' | '144'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "30",
        "36",
        "42",
        "48",
        "54",
        "60",
        "72",
        "78",
        "90",
        "144"
       ],
       "scalarTypeOption": "number"
      },
      "required": true
     },
     {
      "uid": "isLoading",
      "name": "isLoading",
      "comment": {
       "raw": [
        "True to show placeholder"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.ImgHTMLAttributes<HTMLImageElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLImageElement | null) => void | React.MutableRefObject<HTMLImageElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:AvatarStackProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "AvatarStackProps",
     "nameFull": "AvatarStackProps"
    },
    "src": "uui-components/src/widgets/AvatarStack.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "AvatarStackProps",
     "print": [
      "interface AvatarStackProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    avatarSize: '24' | '36' | '48' | '144';",
      "    urlArray: string[];",
      "    direction: 'right' | 'left';",
      "    avatarsCount?: number;",
      "    renderItem?: (url: string) => React.ReactElement;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "avatarSize",
      "name": "avatarSize",
      "typeValue": {
       "raw": "'24' | '36' | '48' | '144'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "36",
        "48",
        "144"
       ]
      },
      "required": true
     },
     {
      "uid": "urlArray",
      "name": "urlArray",
      "typeValue": {
       "raw": "string[]"
      },
      "required": true
     },
     {
      "uid": "direction",
      "name": "direction",
      "typeValue": {
       "raw": "'right' | 'left'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left"
       ]
      },
      "required": true
     },
     {
      "uid": "avatarsCount",
      "name": "avatarsCount",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "renderItem",
      "name": "renderItem",
      "typeValue": {
       "raw": "(url: string) => React.ReactElement<any, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:BaseRatingProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "BaseRatingProps",
     "nameFull": "BaseRatingProps<TValue>"
    },
    "src": "uui-components/src/inputs/Rating/BaseRating.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "BaseRatingProps<TValue>",
     "print": [
      "interface BaseRatingProps<TValue> extends IHasCX, IDisableable, IEditable<TValue>, ICanBeReadonly, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    from?: number;",
      "    to?: number;",
      "    /**",
      "     * @default 1",
      "     */",
      "    step?: 0.5 | 1;",
      "    renderRating?: (rating: number, markWidth: number, numberOfMarks: number) => React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "from",
      "name": "from",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "to",
      "name": "to",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "step",
      "name": "step",
      "comment": {
       "raw": [
        "@default 1"
       ],
       "tags": {
        "@default": 1
       }
      },
      "typeValue": {
       "raw": "0.5 | 1"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        0.5,
        1
       ]
      },
      "required": false
     },
     {
      "uid": "renderRating",
      "name": "renderRating",
      "typeValue": {
       "raw": "(rating: number, markWidth: number, numberOfMarks: number) => React.ReactNode"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TValue"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:BlockerProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "BlockerProps",
     "nameFull": "BlockerProps"
    },
    "src": "uui-components/src/layout/Blocker.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "BlockerProps",
     "print": [
      "interface BlockerProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    /** Turns the blocker on or off */",
      "    isEnabled: boolean;",
      "    /** Disables spinner animation display */",
      "    hideSpinner?: boolean;",
      "    /** Sets the minimal height in px, for cases when blocked content is empty */",
      "    spacerHeight?: number;",
      "    /** Replaces default spinner */",
      "    renderSpinner?(props: any): React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "isEnabled",
      "name": "isEnabled",
      "comment": {
       "raw": [
        "Turns the blocker on or off"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": "hideSpinner",
      "name": "hideSpinner",
      "comment": {
       "raw": [
        "Disables spinner animation display"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "spacerHeight",
      "name": "spacerHeight",
      "comment": {
       "raw": [
        "Sets the minimal height in px, for cases when blocked content is empty"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "renderSpinner",
      "name": "renderSpinner",
      "comment": {
       "raw": [
        "Replaces default spinner"
       ]
      },
      "typeValue": {
       "raw": "(props: any) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:BurgerProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "BurgerProps",
     "nameFull": "BurgerProps"
    },
    "src": "uui-components/src/navigation/MainMenu/Burger/Burger.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "BurgerProps",
     "print": [
      "interface BurgerProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    burgerIcon?: Icon;",
      "    crossIcon?: Icon;",
      "    width?: number;",
      "    burgerContentCx?: string;",
      "    renderBurgerContent?: (props: {",
      "        onClose: () => void;",
      "    }) => React.ReactNode;",
      "    bg?: string;",
      "    logoUrl?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "burgerIcon",
      "name": "burgerIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "crossIcon",
      "name": "crossIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "width",
      "name": "width",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "burgerContentCx",
      "name": "burgerContentCx",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "renderBurgerContent",
      "name": "renderBurgerContent",
      "typeValue": {
       "raw": "(props: { onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "bg",
      "name": "bg",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "logoUrl",
      "name": "logoUrl",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:ButtonProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "ButtonProps",
     "nameFull": "ButtonProps"
    },
    "src": "uui-components/src/buttons/Button.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "ButtonProps",
     "print": [
      "type ButtonProps = ClickableComponentProps & IDropdownToggler & IHasIcon & IHasCaption & {",
      "    /** Call to clear toggler value */",
      "    onClear?(e?: any): void;",
      "    /** Icon for clear value button (usually cross) */",
      "    clearIcon?: Icon;",
      "    /** Icon for drop-down toggler */",
      "    dropdownIcon?: Icon;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "onClear",
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "clearIcon",
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:CalendarPresetsProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "CalendarPresetsProps",
     "nameFull": "CalendarPresetsProps"
    },
    "src": "uui-components/src/inputs/DatePicker/CalendarPresets.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "CalendarPresetsProps",
     "print": [
      "interface CalendarPresetsProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    presets: RangeDatePickerPresets;",
      "    onPresetSet: (nV: RangeDatePickerPresetValue) => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "presets",
      "name": "presets",
      "typeValue": {
       "raw": "RangeDatePickerPresets"
      },
      "typeValueRef": "@epam/uui-components:RangeDatePickerPresets",
      "required": true
     },
     {
      "uid": "onPresetSet",
      "name": "onPresetSet",
      "typeValue": {
       "raw": "(nV: RangeDatePickerPresetValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:CalendarProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "CalendarProps",
     "nameFull": "CalendarProps<TSelection>"
    },
    "src": "uui-components/src/inputs/DatePicker/Calendar.tsx",
    "comment": {
     "raw": [
      "Represents the properties of the Calendar component"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "CalendarProps<TSelection>",
     "print": [
      "/**",
      " * Represents the properties of the Calendar component",
      " */",
      "interface CalendarProps<TSelection> extends IHasCX, IDisableable, IHasRawProps<HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    value?: TSelection;",
      "    onValueChange: (day: Dayjs) => void;",
      "    renderDay?: (renderProps: DayProps) => ReactElement<Element>;",
      "    filter?(day: Dayjs): boolean;",
      "    hideAnotherMonths?: boolean;",
      "    isHoliday?: (day: Dayjs) => boolean;",
      "    /**",
      "     * Represents displayed month",
      "     */",
      "    month: Dayjs;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "value",
      "name": "value",
      "typeValue": {
       "raw": "TSelection"
      },
      "required": false
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "typeValue": {
       "raw": "(day: Dayjs) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "renderDay",
      "name": "renderDay",
      "typeValue": {
       "raw": "(renderProps: DayProps) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "hideAnotherMonths",
      "name": "hideAnotherMonths",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "isHoliday",
      "name": "isHoliday",
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "month",
      "name": "month",
      "comment": {
       "raw": [
        "Represents displayed month"
       ]
      },
      "typeValue": {
       "raw": "Dayjs"
      },
      "required": true
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:CheckboxProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "CheckboxProps",
     "nameFull": "CheckboxProps"
    },
    "src": "uui-components/src/inputs/Checkbox.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "CheckboxProps",
     "print": [
      "interface CheckboxProps extends CheckboxCoreProps, IHasTabIndex {",
      "    /** Render callback for checkbox label.",
      "     * If omitted, 'label' prop value will be rendered.",
      "     */",
      "    renderLabel?(): React.ReactNode;",
      "    /** ID to put on 'input' node */",
      "    id?: string;",
      "    /** Check icon.",
      "     * Usually it has a default implementation in skins, so providing this is only necessary if you want to replace the default icon",
      "     */",
      "    icon?: Icon;",
      "    /** Indeterminate state icon.",
      "     * Usually it has a default implementation in skins, so providing this is only necessary if you want to replace the default icon",
      "     */",
      "    indeterminateIcon?: Icon;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "renderLabel",
      "name": "renderLabel",
      "comment": {
       "raw": [
        "Render callback for checkbox label.",
        " If omitted, 'label' prop value will be rendered."
       ]
      },
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "ID to put on 'input' node"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Check icon.",
        " Usually it has a default implementation in skins, so providing this is only necessary if you want to replace the default icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "indeterminateIcon",
      "name": "indeterminateIcon",
      "comment": {
       "raw": [
        "Indeterminate state icon.",
        " Usually it has a default implementation in skins, so providing this is only necessary if you want to replace the default icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "indeterminate",
      "name": "indeterminate",
      "comment": {
       "raw": [
        "Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICheckable",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "label",
      "name": "label",
      "comment": {
       "raw": [
        "Component label. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in labels."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasLabel",
      "required": false
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean | null, oldValue: boolean | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.LabelHTMLAttributes<HTMLLabelElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:ClickableComponentProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "ClickableComponentProps",
     "nameFull": "ClickableComponentProps"
    },
    "src": "uui-components/src/widgets/Clickable.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "ClickableComponentProps",
     "print": [
      "type ClickableComponentProps = IClickable & IAnalyticableClick & IHasTabIndex & IDisableable & IHasCX & ICanRedirect & IHasRawProps<ClickableRawProps> & {};"
     ]
    },
    "props": [
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:ClickableRawProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "ClickableRawProps",
     "nameFull": "ClickableRawProps"
    },
    "src": "uui-components/src/widgets/Clickable.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> | React.ButtonHTMLAttributes<HTMLButtonElement> | React.HTMLAttributes<HTMLSpanElement>",
     "print": [
      "type ClickableRawProps = React.AnchorHTMLAttributes<HTMLAnchorElement> | React.ButtonHTMLAttributes<HTMLButtonElement> | React.HTMLAttributes<HTMLSpanElement>;"
     ]
    }
   }
  },
  "@epam/uui-components:ColumnsConfigurationRowProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "ColumnsConfigurationRowProps",
     "nameFull": "ColumnsConfigurationRowProps"
    },
    "src": "uui-components/src/table/columnsConfigurationModal/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ColumnsConfigurationRowProps",
     "print": [
      "interface ColumnsConfigurationRowProps extends GroupedDataColumnProps {",
      "    toggleVisibility: () => void;",
      "    /**",
      "     * Pins column to the specified position. If 'fix' parameter is absent, the column is unpinned.",
      "     * @param fix - The position to which the column should be pinned. Omit to unpin the column.",
      "     */",
      "    togglePin: (fix: TColumnPinPosition) => void;",
      "    onCanAcceptDrop: (props: AcceptDropParams<DndDataType, DndDataType>) => DropPositionOptions | null;",
      "    onDrop: (params: DropParams<DndDataType, DndDataType>) => void;",
      "    columnConfig: IColumnConfig;",
      "    isDndAllowed: boolean;",
      "    /**",
      "     * The position at which the column is pinned. If the value is undefined, it means the column is not pinned.",
      "     */",
      "    fix: TColumnPinPosition;",
      "    isPinnedAlways: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "toggleVisibility",
      "name": "toggleVisibility",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "togglePin",
      "name": "togglePin",
      "comment": {
       "raw": [
        "Pins column to the specified position. If 'fix' parameter is absent, the column is unpinned.",
        " @param fix - The position to which the column should be pinned. Omit to unpin the column."
       ]
      },
      "typeValue": {
       "raw": "(fix: TColumnPinPosition) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "onCanAcceptDrop",
      "name": "onCanAcceptDrop",
      "typeValue": {
       "raw": "(props: AcceptDropParams<DndDataType, DndDataType>) => Partial<Record<DropPosition, boolean>> | null"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "onDrop",
      "name": "onDrop",
      "typeValue": {
       "raw": "(params: DropParams<DndDataType, DndDataType>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "columnConfig",
      "name": "columnConfig",
      "typeValue": {
       "raw": "IColumnConfig"
      },
      "typeValueRef": "@epam/uui-core:IColumnConfig",
      "required": true
     },
     {
      "uid": "isDndAllowed",
      "name": "isDndAllowed",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": "fix",
      "name": "fix",
      "comment": {
       "raw": [
        "The position at which the column is pinned. If the value is undefined, it means the column is not pinned."
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left'"
      },
      "typeValueRef": "@epam/uui-components:TColumnPinPosition",
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left"
       ]
      },
      "required": false
     },
     {
      "uid": "isPinnedAlways",
      "name": "isPinnedAlways",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": "groupKey",
      "name": "groupKey",
      "typeValue": {
       "raw": "'hidden' | 'displayedUnpinned' | 'displayedPinnedLeft' | 'displayedPinnedRight'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "hidden",
        "displayedUnpinned",
        "displayedPinnedLeft",
        "displayedPinnedRight"
       ]
      },
      "from": "@epam/uui-components:GroupedDataColumnProps",
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "comment": {
       "raw": [
        "Unique key to identify the column. Used to reference columns, e.g. in ColumnsConfig.",
        " Also, used as React key for cells, header cells, and other components inside tables."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": true
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Column caption. Can be a plain text, or any React Component"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": "width",
      "name": "width",
      "comment": {
       "raw": [
        "The width of the column. Usually, columns has exact this width.",
        " When all columns fit, and there's spare horizontal space, you can use 'grow' prop to use this space for certain columns.",
        " DataTable's columns can't shrink below width - table will add horizontal scrolling instead of shrinking columns"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": true
     },
     {
      "uid": "minWidth",
      "name": "minWidth",
      "comment": {
       "raw": [
        "Minimal width to which column can be resized manually"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": "grow",
      "name": "grow",
      "comment": {
       "raw": [
        "The flex grow for the column. Allows column to grow in width if there's spare horizontal space"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": "textAlign",
      "name": "textAlign",
      "comment": {
       "raw": [
        "Aligns cell and header content horizontally"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left' | 'center'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left",
        "center"
       ]
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": "justifyContent",
      "name": "justifyContent",
      "comment": {
       "raw": [
        "Aligns only cell content horizontally"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": "alignSelf",
      "name": "alignSelf",
      "comment": {
       "raw": [
        "Align cell content vertically"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": "isSortable",
      "name": "isSortable",
      "comment": {
       "raw": [
        "Enables sorting arrows on the column.",
        " Sorting state is kept in DataSourceState.sorting"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": "isAlwaysVisible",
      "name": "isAlwaysVisible",
      "comment": {
       "raw": [
        "Makes this column locked, which means that you can't hide, unpin or reorder this column. Usually applicable for such column without which table because useless.",
        " Note, that isAlwaysVisible column should be always fixed to any side of the table, if you didn't specify `column.fix` prop for such column, 'left' value will be used by default.",
        " Also, if you have a few isAlwaysVisible columns, it's necessary to place it together in the start or end(depends on `fix` prop) of columns array."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": "isHiddenByDefault",
      "name": "isHiddenByDefault",
      "comment": {
       "raw": [
        "Makes column hidden by default. User can turn it on later, via ColumnsConfiguration"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": "info",
      "name": "info",
      "comment": {
       "raw": [
        "Info tooltip displayed in the table header"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": "isFilterActive",
      "name": "isFilterActive",
      "comment": {
       "raw": [
        "Should return true, if current filter affects the column.",
        " Usually, this prop is filled automatically by the useTableState hook.",
        " If you use the useTableState hook, you don't need to specify it manually."
       ]
      },
      "typeValue": {
       "raw": "(filter: any, column: DataColumnProps<any, any, any>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": "canCopy",
      "name": "canCopy",
      "comment": {
       "raw": [
        "A pure function that defines that column value can be copied to the other column."
       ]
      },
      "typeValue": {
       "raw": "(cell: DataTableSelectedCellData<any, any, any>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": "canAcceptCopy",
      "name": "canAcceptCopy",
      "comment": {
       "raw": [
        "A pure function that defines that column accepts copying other column value into it"
       ]
      },
      "typeValue": {
       "raw": "(from: DataTableSelectedCellData<any, any, any>, to: DataTableSelectedCellData<any, any, any>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": "allowResizing",
      "name": "allowResizing",
      "comment": {
       "raw": [
        "Pass true, to enable column resizing. By default, will be used global 'allowColumnsResizing' value from DataTable component."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": "render",
      "name": "render",
      "comment": {
       "raw": [
        "Render the cell content. The item props is the value of the whole row (TItem)."
       ]
      },
      "typeValue": {
       "raw": "(item: any, props: DataRowProps<any, any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": "renderCell",
      "name": "renderCell",
      "comment": {
       "raw": [
        "Overrides rendering of the whole cell"
       ]
      },
      "typeValue": {
       "raw": "(cellProps: RenderCellProps<any, any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": "renderHeaderCell",
      "name": "renderHeaderCell",
      "comment": {
       "raw": [
        "Overrides rendering of the whole header cell."
       ]
      },
      "typeValue": {
       "raw": "(cellProps: DataTableHeaderCellProps<any, any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": "renderDropdown",
      "name": "renderDropdown",
      "comment": {
       "raw": [
        "Render callback for column header dropdown.",
        " Usually, this prop is filled automatically by the useTableState hook.",
        " If you use the useTableState hook, you don't need to specify it manually."
       ]
      },
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": "renderFilter",
      "name": "renderFilter",
      "comment": {
       "raw": [
        "Render callback for column filter.",
        " If you use useTableState hook, and you specify filter for the column, default filter will be rendered automatically.",
        " You can use this prop to render a custom filter component."
       ]
      },
      "typeValue": {
       "raw": "(lens: ILens<any>, dropdownProps: IDropdownBodyProps) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": "renderTooltip",
      "name": "renderTooltip",
      "comment": {
       "raw": [
        "Render callback for column header tooltip.",
        " This tooltip will appear on cell hover with 600ms delay.",
        "",
        " If omitted, default implementation with column.caption + column.info will be rendered.",
        " Pass `() => null` to disable tooltip rendering."
       ]
      },
      "typeValue": {
       "raw": "(column: DataColumnProps<any, any, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:DataColumnProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "HTMLDivElement & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:ControlGroupProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "ControlGroupProps",
     "nameFull": "ControlGroupProps"
    },
    "src": "uui-components/src/layout/ControlGroup.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ControlGroupProps",
     "print": [
      "interface ControlGroupProps extends IHasCX, IHasChildren, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:ControlIconProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "ControlIconProps",
     "nameFull": "ControlIconProps"
    },
    "src": "uui-components/src/layout/IconContainer.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ControlIconProps",
     "print": [
      "interface ControlIconProps extends IHasCX, IDisableable, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasTabIndex {",
      "    /** Icon to display */",
      "    icon?: Icon;",
      "    /** Flips the icon vertically */",
      "    flipY?: boolean;",
      "    /** Rotate the icon (cw stands for 'clock-wise', ccw stands for 'counter clock-wise)) */",
      "    rotate?: '0' | '90cw' | '180' | '90ccw';",
      "    /** Click handler */",
      "    onClick?(e: React.SyntheticEvent<HTMLDivElement>): void;",
      "    /** CSS style prop to put on the component */",
      "    style?: React.CSSProperties;",
      "    /** Icon size in pixels (both width and height, as icons are assumed to be square-shaped) */",
      "    size?: number | string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon to display"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "flipY",
      "name": "flipY",
      "comment": {
       "raw": [
        "Flips the icon vertically"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "rotate",
      "name": "rotate",
      "comment": {
       "raw": [
        "Rotate the icon (cw stands for 'clock-wise', ccw stands for 'counter clock-wise))"
       ]
      },
      "typeValue": {
       "raw": "'0' | '90cw' | '180' | '90ccw'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "0",
        "180",
        "90cw",
        "90ccw"
       ]
      },
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Click handler"
       ]
      },
      "typeValue": {
       "raw": "(e: React.SyntheticEvent<HTMLDivElement, Event>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "style",
      "name": "style",
      "comment": {
       "raw": [
        "CSS style prop to put on the component"
       ]
      },
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Icon size in pixels (both width and height, as icons are assumed to be square-shaped)"
       ]
      },
      "typeValue": {
       "raw": "string | number"
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:DataTableCellContainerProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "DataTableCellContainerProps",
     "nameFull": "DataTableCellContainerProps"
    },
    "src": "uui-components/src/table/DataTableCellContainer.tsx",
    "comment": {
     "raw": [
      "Props for DataTableCellContainer component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataTableCellContainerProps",
     "print": [
      "/**",
      " * Props for DataTableCellContainer component.",
      " */",
      "interface DataTableCellContainerProps extends IHasCX, IClickable, React.PropsWithChildren, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    /**",
      "     * DataTable column configuration.",
      "     */",
      "    column: DataColumnProps;",
      "    /**",
      "     * CSS text-align property.",
      "     */",
      "    textAlign?: 'left' | 'center' | 'right';",
      "    /**",
      "     * Flexbox align-self property. Aligns items vertically for horizontal flexbox. [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-align-self)",
      "     */",
      "    alignSelf?: string;",
      "    /**",
      "     * Flexbox shrink property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-shrink).",
      "     */",
      "    shrink?: number;",
      "    /**",
      "     * Standard style attribute. Styles are added to element style, overriding supplied flex styles.",
      "     */",
      "    style?: React.CSSProperties;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "column",
      "name": "column",
      "comment": {
       "raw": [
        "DataTable column configuration."
       ]
      },
      "typeValue": {
       "raw": "DataColumnProps<any, any, any>"
      },
      "required": true
     },
     {
      "uid": "textAlign",
      "name": "textAlign",
      "comment": {
       "raw": [
        "CSS text-align property."
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left' | 'center'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left",
        "center"
       ]
      },
      "required": false
     },
     {
      "uid": "alignSelf",
      "name": "alignSelf",
      "comment": {
       "raw": [
        "Flexbox align-self property. Aligns items vertically for horizontal flexbox. [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-align-self)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "shrink",
      "name": "shrink",
      "comment": {
       "raw": [
        "Flexbox shrink property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-shrink)."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "style",
      "name": "style",
      "comment": {
       "raw": [
        "Standard style attribute. Styles are added to element style, overriding supplied flex styles."
       ]
      },
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@types/react:PropsWithChildren",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:DataTableFocusContextState": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "DataTableFocusContextState",
     "nameFull": "DataTableFocusContextState<TId>"
    },
    "src": "uui-components/src/table/tableCellsFocus/context/DataTableFocusContext.ts",
    "comment": {
     "raw": [
      "State of a DataTableFocusContext."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataTableFocusContextState<TId>",
     "print": [
      "/**",
      " * State of a DataTableFocusContext.",
      " */",
      "interface DataTableFocusContextState<TId> {",
      "    /**",
      "     * Focus manipulation manager in tables.",
      "     */",
      "    dataTableFocusManager: DataTableFocusManager<TId>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "dataTableFocusManager",
      "name": "dataTableFocusManager",
      "comment": {
       "raw": [
        "Focus manipulation manager in tables."
       ]
      },
      "typeValue": {
       "raw": "DataTableFocusManager<TId>"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:DataTableFocusProviderProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "DataTableFocusProviderProps",
     "nameFull": "DataTableFocusProviderProps<TId>"
    },
    "src": "uui-components/src/table/tableCellsFocus/context/DataTableFocusProvider.tsx",
    "comment": {
     "raw": [
      "Provider of a DataTableFocusContext."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataTableFocusProviderProps<TId>",
     "print": [
      "/**",
      " * Provider of a DataTableFocusContext.",
      " */",
      "interface DataTableFocusProviderProps<TId> extends React.PropsWithChildren {",
      "    /**",
      "     * Focus manipulation manager in tables.",
      "     */",
      "    dataTableFocusManager?: DataTableFocusManager<TId>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "dataTableFocusManager",
      "name": "dataTableFocusManager",
      "comment": {
       "raw": [
        "Focus manipulation manager in tables."
       ]
      },
      "typeValue": {
       "raw": "DataTableFocusManager<TId>"
      },
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@types/react:PropsWithChildren",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:DayProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "DayProps",
     "nameFull": "DayProps"
    },
    "src": "uui-components/src/inputs/DatePicker/Day.tsx",
    "comment": {
     "raw": [
      "Represents the properties of the Day component"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DayProps",
     "print": [
      "/**",
      " * Represents the properties of the Day component",
      " */",
      "interface DayProps extends IEditable<Dayjs>, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement>, IHasCX {",
      "    filter?(day: Dayjs): boolean;",
      "    renderDayNumber?: (param: Dayjs) => any;",
      "    isSelected?: boolean;",
      "    isHoliday?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "filter",
      "name": "filter",
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "renderDayNumber",
      "name": "renderDayNumber",
      "typeValue": {
       "raw": "(param: Dayjs) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "isSelected",
      "name": "isSelected",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "isHoliday",
      "name": "isHoliday",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "Dayjs"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: Dayjs) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:DragHandleProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "DragHandleProps",
     "nameFull": "DragHandleProps"
    },
    "src": "uui-components/src/dnd/DragHandle.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DragHandleProps",
     "print": [
      "interface DragHandleProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IDisableable {",
      "    /**",
      "     * Icon to be used as the drag handle",
      "     */",
      "    dragHandleIcon?: Icon;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "dragHandleIcon",
      "name": "dragHandleIcon",
      "comment": {
       "raw": [
        "Icon to be used as the drag handle"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:DropdownContainerProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "DropdownContainerProps",
     "nameFull": "DropdownContainerProps"
    },
    "src": "uui-components/src/overlays/DropdownContainer.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DropdownContainerProps",
     "print": [
      "interface DropdownContainerProps extends IHasCX, IHasChildren, IHasStyleAttrs, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement>, IDropdownBodyProps, Pick<ReactFocusLockProps, 'autoFocus' | 'as' | 'shards'> {",
      "    /** Defines width in 'px' or 'auto'. If 'auto' provided, will be used width of the content. */",
      "    width?: number | 'auto';",
      "    /** Defines maximum width in 'px'. If 'auto' provided, will be used width of the content. */",
      "    maxWidth?: number | 'auto';",
      "    /** Defines height in 'px'. */",
      "    height?: number;",
      "    /** Defines maxHeight in 'px'. If 'auto' provided, will be used height of the content. */",
      "    maxHeight?: number | 'auto';",
      "    /** If true, arrow tip will be shown",
      "     * @default false",
      "     * */",
      "    showArrow?: boolean;",
      "    /**",
      "     * Pass true to wrap DropdownContainer with FocusLock component to support keyboard navigation.",
      "     * If omitted, true value will be used.",
      "     *",
      "     * After DropdownContainer appeared the focus will be set on the first focusable element inside.",
      "     * @default true",
      "     */",
      "    focusLock?: boolean;",
      "    /**",
      "     * Pass true to return focus into initial position on unmount.",
      "     * If omitted, true value will be used. It's used if focusLock=true.",
      "     * */",
      "    returnFocus?: boolean;",
      "    /**",
      "     * Pass true to lock focus within DropdownContainer.",
      "     * If omitted, true value will be used. It's used if focusLock=true.",
      "     */",
      "    persistentFocus?: boolean;",
      "    /**",
      "     * Pass any extra props to the FocusLock wrapper.",
      "     */",
      "    lockProps?: Record<string, any>;",
      "    /**",
      "     * Pass true to handle Escape key press and call props.onClose().",
      "     * If omitted, true value will be used. It's used if focusLock=true.",
      "     */",
      "    closeOnEsc?: boolean;",
      "    /** Called on keyDown event in DropdownContainer.",
      "     Can be used to provide your own handlers.",
      "     */",
      "    onKeyDown?(e: React.KeyboardEvent<HTMLElement>): void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "width",
      "name": "width",
      "comment": {
       "raw": [
        "Defines width in 'px' or 'auto'. If 'auto' provided, will be used width of the content."
       ]
      },
      "typeValue": {
       "raw": "number | 'auto'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "auto"
       ],
       "scalarTypeOption": "number"
      },
      "required": false
     },
     {
      "uid": "maxWidth",
      "name": "maxWidth",
      "comment": {
       "raw": [
        "Defines maximum width in 'px'. If 'auto' provided, will be used width of the content."
       ]
      },
      "typeValue": {
       "raw": "number | 'auto'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "auto"
       ],
       "scalarTypeOption": "number"
      },
      "required": false
     },
     {
      "uid": "height",
      "name": "height",
      "comment": {
       "raw": [
        "Defines height in 'px'."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "maxHeight",
      "name": "maxHeight",
      "comment": {
       "raw": [
        "Defines maxHeight in 'px'. If 'auto' provided, will be used height of the content."
       ]
      },
      "typeValue": {
       "raw": "number | 'auto'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "auto"
       ],
       "scalarTypeOption": "number"
      },
      "required": false
     },
     {
      "uid": "showArrow",
      "name": "showArrow",
      "comment": {
       "raw": [
        "If true, arrow tip will be shown",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "focusLock",
      "name": "focusLock",
      "comment": {
       "raw": [
        "Pass true to wrap DropdownContainer with FocusLock component to support keyboard navigation.",
        " If omitted, true value will be used.",
        "",
        " After DropdownContainer appeared the focus will be set on the first focusable element inside.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "returnFocus",
      "name": "returnFocus",
      "comment": {
       "raw": [
        "Pass true to return focus into initial position on unmount.",
        " If omitted, true value will be used. It's used if focusLock=true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "persistentFocus",
      "name": "persistentFocus",
      "comment": {
       "raw": [
        "Pass true to lock focus within DropdownContainer.",
        " If omitted, true value will be used. It's used if focusLock=true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "lockProps",
      "name": "lockProps",
      "comment": {
       "raw": [
        "Pass any extra props to the FocusLock wrapper."
       ]
      },
      "typeValue": {
       "raw": "Record<string, any>"
      },
      "required": false
     },
     {
      "uid": "closeOnEsc",
      "name": "closeOnEsc",
      "comment": {
       "raw": [
        "Pass true to handle Escape key press and call props.onClose().",
        " If omitted, true value will be used. It's used if focusLock=true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "onKeyDown",
      "name": "onKeyDown",
      "comment": {
       "raw": [
        "Called on keyDown event in DropdownContainer.",
        "     Can be used to provide your own handlers."
       ]
      },
      "typeValue": {
       "raw": "(e: React.KeyboardEvent<HTMLElement>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "style",
      "name": "style",
      "comment": {
       "raw": [
        "CSS style prop to put on the component"
       ]
      },
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-core:IHasStyleAttrs",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": "onClose",
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the Dropdown body"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "togglerWidth",
      "name": "togglerWidth",
      "comment": {
       "raw": [
        "The width of the toggler, which can be used to adjust the body width to it"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "togglerHeight",
      "name": "togglerHeight",
      "comment": {
       "raw": [
        "The height of the toggler"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "scheduleUpdate",
      "name": "scheduleUpdate",
      "comment": {
       "raw": [
        "Call to force recompute dropdown position"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "Indicates that dropdown is open"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "arrowProps",
      "name": "arrowProps",
      "comment": {
       "raw": [
        "Props that should be provided to the arrow component"
       ]
      },
      "typeValue": {
       "raw": "PopperArrowProps"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "placement",
      "name": "placement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left' | 'top' | 'bottom' | 'auto' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left",
        "top",
        "bottom",
        "auto",
        "auto-start",
        "auto-end",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "autoFocus",
      "name": "autoFocus",
      "comment": {
       "raw": [
        "enables or disables autoFocusing feature.",
        " If enabled - will move focus inside Lock, selecting the first or autoFocusable element",
        " If disable - will blur any focus on Lock activation.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "node_modules/react-focus-lock/interfaces.d.ts:ReactFocusLockProps",
      "required": false
     },
     {
      "uid": "as",
      "name": "as",
      "comment": {
       "raw": [
        "Component to use, defaults to 'div'"
       ]
      },
      "typeValue": {
       "raw": "string | React.ComponentClass<Record<string, any> & { children: React.ReactNode; }, any> | React.FunctionComponent<Record<string, any> & { children: React.ReactNode; }>"
      },
      "from": "node_modules/react-focus-lock/interfaces.d.ts:ReactFocusLockProps",
      "required": false
     },
     {
      "uid": "shards",
      "name": "shards",
      "comment": {
       "raw": [
        "Shards forms a scattered lock, same as `group` does, but in more \"low\" and controlled way"
       ]
      },
      "typeValue": {
       "raw": "(HTMLElement | React.RefObject<any>)[]"
      },
      "from": "node_modules/react-focus-lock/interfaces.d.ts:ReactFocusLockProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:DropSpotRenderParams": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "DropSpotRenderParams",
     "nameFull": "DropSpotRenderParams"
    },
    "src": "uui-components/src/widgets/DropSpot.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DropSpotRenderParams",
     "print": [
      "interface DropSpotRenderParams extends DropSpotState {",
      "    /** Event handlers to put on your rendered component */",
      "    eventHandlers: EventHandlers;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "eventHandlers",
      "name": "eventHandlers",
      "comment": {
       "raw": [
        "Event handlers to put on your rendered component"
       ]
      },
      "typeValue": {
       "raw": "EventHandlers"
      },
      "required": true
     },
     {
      "uid": "isDraggingOver",
      "name": "isDraggingOver",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropSpotState",
      "required": true
     },
     {
      "uid": "isDragStart",
      "name": "isDragStart",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropSpotState",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:FlexSpacerProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "FlexSpacerProps",
     "nameFull": "FlexSpacerProps"
    },
    "src": "uui-components/src/layout/flexItems/FlexSpacer.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "FlexSpacerProps",
     "print": [
      "interface FlexSpacerProps extends IAdaptiveItem {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "estimatedWidth",
      "name": "estimatedWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "priority",
      "name": "priority",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "showInBurgerMenu",
      "name": "showInBurgerMenu",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "collapseToMore",
      "name": "collapseToMore",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "collapsedContainer",
      "name": "collapsedContainer",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:HeaderCellContentProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "HeaderCellContentProps",
     "nameFull": "HeaderCellContentProps"
    },
    "src": "uui-components/src/table/DataTableHeaderCell.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "HeaderCellContentProps",
     "print": [
      "interface HeaderCellContentProps extends DndActorRenderParams {",
      "    /** Called when resizing is started */",
      "    onResizeStart: (e: React.MouseEvent) => void;",
      "    /** Called when resizing is ended */",
      "    onResizeEnd: (e: MouseEvent) => void;",
      "    /** Called during the resizing process */",
      "    onResize: (e: MouseEvent) => void;",
      "    /** Called when sorting */",
      "    toggleSort: (e: React.MouseEvent) => void;",
      "    /** Indicates that resizing process is active */",
      "    isResizing: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "onResizeStart",
      "name": "onResizeStart",
      "comment": {
       "raw": [
        "Called when resizing is started"
       ]
      },
      "typeValue": {
       "raw": "(e: React.MouseEvent<Element, MouseEvent>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "onResizeEnd",
      "name": "onResizeEnd",
      "comment": {
       "raw": [
        "Called when resizing is ended"
       ]
      },
      "typeValue": {
       "raw": "(e: MouseEvent) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "onResize",
      "name": "onResize",
      "comment": {
       "raw": [
        "Called during the resizing process"
       ]
      },
      "typeValue": {
       "raw": "(e: MouseEvent) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "toggleSort",
      "name": "toggleSort",
      "comment": {
       "raw": [
        "Called when sorting"
       ]
      },
      "typeValue": {
       "raw": "(e: React.MouseEvent<Element, MouseEvent>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "isResizing",
      "name": "isResizing",
      "comment": {
       "raw": [
        "Indicates that resizing process is active"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": "isDraggable",
      "name": "isDraggable",
      "comment": {
       "raw": [
        "True, if the element can be dragged. Doesn't mean that DnD is active."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": true
     },
     {
      "uid": "isDraggedOut",
      "name": "isDraggedOut",
      "comment": {
       "raw": [
        "True, if the element is dragged out. True for placeholder left when it's element it dragged out. False for Drag Ghost."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": true
     },
     {
      "uid": "isDragGhost",
      "name": "isDragGhost",
      "comment": {
       "raw": [
        "True, if the element is rendered as Drag Ghost. All other flags are false for drag ghost."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": true
     },
     {
      "uid": "isDraggedOver",
      "name": "isDraggedOver",
      "comment": {
       "raw": [
        "True, if the element is being dragged over, even if drop is not accepted by the element (canAcceptDrop returned false)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": true
     },
     {
      "uid": "isDropAccepted",
      "name": "isDropAccepted",
      "comment": {
       "raw": [
        "True, if the element is being dragged over, and drop on it is accepted - canAcceptDrop returned true"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": true
     },
     {
      "uid": "isDndInProgress",
      "name": "isDndInProgress",
      "comment": {
       "raw": [
        "True if any drag and drop operation is in progress, even if the element not being dragged"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": true
     },
     {
      "uid": "dragData",
      "name": "dragData",
      "comment": {
       "raw": [
        "Drag data associated with the element. Specified always, even if there is no DnD operation happening."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": false
     },
     {
      "uid": "position",
      "name": "position",
      "comment": {
       "raw": [
        "Drop position. Chosen from accepted drop positions according to pointer coordinates"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left' | 'top' | 'bottom' | 'inside'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left",
        "top",
        "bottom",
        "inside"
       ]
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": false
     },
     {
      "uid": "eventHandlers",
      "name": "eventHandlers",
      "comment": {
       "raw": [
        "Event handlers. Component is expected to pass these events to the top element it renders.",
        " As onClick event on the element will be overwritten, use DndActorProps.onClick to receive click events on the element"
       ]
      },
      "typeValue": {
       "raw": "DndEventHandlers"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": true
     },
     {
      "uid": "classNames",
      "name": "classNames",
      "comment": {
       "raw": [
        "CSS class names to add to the element.",
        " Some of these markers are used by the DndActor internally, so they must be added even if no used by component itself to apply styles."
       ]
      },
      "typeValue": {
       "raw": "string[]"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": true
     },
     {
      "uid": "ref",
      "name": "ref",
      "comment": {
       "raw": [
        "Ref to the DOM element to perform DnD actions"
       ]
      },
      "typeValue": {
       "raw": "null | React.RefObject<any> | (instance: any) => void"
      },
      "from": "@epam/uui-core:DndActorRenderParams",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:IconButtonProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "IconButtonProps",
     "nameFull": "IconButtonProps"
    },
    "src": "uui-components/src/buttons/IconButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "IconButtonProps",
     "print": [
      "type IconButtonProps = ClickableComponentProps & Omit<IDropdownToggler, 'isDropdown'> & {",
      "    /** Icon can be a React element (usually an SVG element) */",
      "    icon?: Icon;",
      "    /** Icon for drop-down toggler */",
      "    dropdownIcon?: Icon;",
      "    /**",
      "     * Defines component size.",
      "     */",
      "    size?: number | string;",
      "    /**",
      "     * Pass true to enable dropdown icon.",
      "     */",
      "    showDropdownIcon?: boolean;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size."
       ]
      },
      "typeValue": {
       "raw": "string | number"
      },
      "required": false
     },
     {
      "uid": "showDropdownIcon",
      "name": "showDropdownIcon",
      "comment": {
       "raw": [
        "Pass true to enable dropdown icon."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:IconContainerProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "IconContainerProps",
     "nameFull": "IconContainerProps"
    },
    "src": "uui-components/src/layout/IconContainer.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a IconContainer component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "ControlIconProps",
     "print": [
      "/** Represents the properties of a IconContainer component. */",
      "type IconContainerProps = ControlIconProps & {};"
     ]
    },
    "props": [
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon to display"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ControlIconProps",
      "required": false
     },
     {
      "uid": "flipY",
      "name": "flipY",
      "comment": {
       "raw": [
        "Flips the icon vertically"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:ControlIconProps",
      "required": false
     },
     {
      "uid": "rotate",
      "name": "rotate",
      "comment": {
       "raw": [
        "Rotate the icon (cw stands for 'clock-wise', ccw stands for 'counter clock-wise))"
       ]
      },
      "typeValue": {
       "raw": "'0' | '90cw' | '180' | '90ccw'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "0",
        "180",
        "90cw",
        "90ccw"
       ]
      },
      "from": "@epam/uui-components:ControlIconProps",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Click handler"
       ]
      },
      "typeValue": {
       "raw": "(e: React.SyntheticEvent<HTMLDivElement, Event>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:ControlIconProps",
      "required": false
     },
     {
      "uid": "style",
      "name": "style",
      "comment": {
       "raw": [
        "CSS style prop to put on the component"
       ]
      },
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-components:ControlIconProps",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Icon size in pixels (both width and height, as icons are assumed to be square-shaped)"
       ]
      },
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@epam/uui-components:ControlIconProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:InputAddonProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "InputAddonProps",
     "nameFull": "InputAddonProps"
    },
    "src": "uui-components/src/inputs/InputAddon.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "InputAddonProps",
     "print": [
      "interface InputAddonProps extends IHasCX {",
      "    /** Content to be rendered in addon */",
      "    content: React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "content",
      "name": "content",
      "comment": {
       "raw": [
        "Content to be rendered in addon"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:IRenderInputProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "IRenderInputProps",
     "nameFull": "IRenderInputProps"
    },
    "src": "uui-components/src/inputs/TextInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "IRenderInputProps",
     "print": [
      "type IRenderInputProps = React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;"
     ]
    },
    "props": [
     {
      "uid": "ref",
      "name": "ref",
      "typeValue": {
       "raw": "null | string | (instance: HTMLInputElement | null) => void | React.RefObject<HTMLInputElement>"
      },
      "from": "@types/react:ClassAttributes",
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": "accept",
      "name": "accept",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "alt",
      "name": "alt",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "autoComplete",
      "name": "autoComplete",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "autoFocus",
      "name": "autoFocus",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "capture",
      "name": "capture",
      "typeValue": {
       "raw": "boolean | 'user' | 'environment'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "user",
        "environment"
       ]
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "checked",
      "name": "checked",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "crossOrigin",
      "name": "crossOrigin",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "disabled",
      "name": "disabled",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "enterKeyHint",
      "name": "enterKeyHint",
      "typeValue": {
       "raw": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "enter",
        "done",
        "go",
        "next",
        "previous",
        "search",
        "send"
       ]
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "form",
      "name": "form",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "formAction",
      "name": "formAction",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "formEncType",
      "name": "formEncType",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "formMethod",
      "name": "formMethod",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "formNoValidate",
      "name": "formNoValidate",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "formTarget",
      "name": "formTarget",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "height",
      "name": "height",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "list",
      "name": "list",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "max",
      "name": "max",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "maxLength",
      "name": "maxLength",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "min",
      "name": "min",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "minLength",
      "name": "minLength",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "multiple",
      "name": "multiple",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "name",
      "name": "name",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "pattern",
      "name": "pattern",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "placeholder",
      "name": "placeholder",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "readOnly",
      "name": "readOnly",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "required",
      "name": "required",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "src",
      "name": "src",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "step",
      "name": "step",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "type",
      "name": "type",
      "typeValue": {
       "raw": "'number' | 'hidden' | string & {} | 'button' | 'time' | 'image' | 'text' | 'search' | 'checkbox' | 'color' | 'date' | 'datetime-local' | 'email' | 'file' | 'month' | 'password' | 'radio' | 'range' | 'reset' | 'submit' | 'tel' | 'url' | 'week'"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "typeValue": {
       "raw": "string | number | readonly string[]"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "width",
      "name": "width",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "onChange",
      "name": "onChange",
      "typeValue": {
       "raw": "React.ChangeEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:InputHTMLAttributes",
      "required": false
     },
     {
      "uid": "defaultChecked",
      "name": "defaultChecked",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "defaultValue",
      "name": "defaultValue",
      "typeValue": {
       "raw": "string | number | readonly string[]"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "suppressContentEditableWarning",
      "name": "suppressContentEditableWarning",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "suppressHydrationWarning",
      "name": "suppressHydrationWarning",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "accessKey",
      "name": "accessKey",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "className",
      "name": "className",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "contentEditable",
      "name": "contentEditable",
      "typeValue": {
       "raw": "boolean | 'inherit' | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "inherit",
        "true",
        "false"
       ]
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "contextMenu",
      "name": "contextMenu",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "dir",
      "name": "dir",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "draggable",
      "name": "draggable",
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "hidden",
      "name": "hidden",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "lang",
      "name": "lang",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "nonce",
      "name": "nonce",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "slot",
      "name": "slot",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "spellCheck",
      "name": "spellCheck",
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "style",
      "name": "style",
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "title",
      "name": "title",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "translate",
      "name": "translate",
      "typeValue": {
       "raw": "'yes' | 'no'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "yes",
        "no"
       ]
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "radioGroup",
      "name": "radioGroup",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "role",
      "name": "role",
      "typeValue": {
       "raw": "string & {} | 'article' | 'button' | 'dialog' | 'figure' | 'form' | 'img' | 'link' | 'main' | 'menu' | 'menuitem' | 'option' | 'table' | 'switch' | 'search' | 'checkbox' | 'radio' | 'alert' | 'alertdialog' | 'application' | 'banner' | 'cell' | 'columnheader' | 'combobox' | 'complementary' | 'contentinfo' | 'definition' | 'directory' | 'document' | 'feed' | 'grid' | 'gridcell' | 'group' | 'heading' | 'list' | 'listbox' | 'listitem' | 'log' | 'marquee' | 'math' | 'menubar' | 'menuitemcheckbox' | 'menuitemradio' | 'navigation' | 'none' | 'note' | 'presentation' | 'progressbar' | 'radiogroup' | 'region' | 'row' | 'rowgroup' | 'rowheader' | 'scrollbar' | 'searchbox' | 'separator' | 'slider' | 'spinbutton' | 'status' | 'tab' | 'tablist' | 'tabpanel' | 'term' | 'textbox' | 'timer' | 'toolbar' | 'tooltip' | 'tree' | 'treegrid' | 'treeitem'"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "about",
      "name": "about",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "datatype",
      "name": "datatype",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "inlist",
      "name": "inlist",
      "typeValue": {
       "raw": "any"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "prefix",
      "name": "prefix",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "property",
      "name": "property",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "resource",
      "name": "resource",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "typeof",
      "name": "typeof",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "vocab",
      "name": "vocab",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "autoCapitalize",
      "name": "autoCapitalize",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "autoCorrect",
      "name": "autoCorrect",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "autoSave",
      "name": "autoSave",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "itemProp",
      "name": "itemProp",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "itemScope",
      "name": "itemScope",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "itemType",
      "name": "itemType",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "itemID",
      "name": "itemID",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "itemRef",
      "name": "itemRef",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "results",
      "name": "results",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "security",
      "name": "security",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "unselectable",
      "name": "unselectable",
      "typeValue": {
       "raw": "'on' | 'off'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "on",
        "off"
       ]
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "inputMode",
      "name": "inputMode",
      "comment": {
       "raw": [
        "Hints at the type of data that might be entered by the user while editing the element or its contents",
        " @see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute"
       ]
      },
      "typeValue": {
       "raw": "'text' | 'search' | 'email' | 'tel' | 'url' | 'none' | 'numeric' | 'decimal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "text",
        "search",
        "email",
        "tel",
        "url",
        "none",
        "numeric",
        "decimal"
       ]
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "is",
      "name": "is",
      "comment": {
       "raw": [
        "Specify that a standard HTML element should behave like a defined custom built-in element",
        " @see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "'aria-activedescendant'",
      "name": "'aria-activedescendant'",
      "comment": {
       "raw": [
        "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-atomic'",
      "name": "'aria-atomic'",
      "comment": {
       "raw": [
        "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-autocomplete'",
      "name": "'aria-autocomplete'",
      "comment": {
       "raw": [
        "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be",
        " presented if they are made."
       ]
      },
      "typeValue": {
       "raw": "'list' | 'none' | 'inline' | 'both'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "list",
        "none",
        "inline",
        "both"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-busy'",
      "name": "'aria-busy'",
      "comment": {
       "raw": [
        "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-checked'",
      "name": "'aria-checked'",
      "comment": {
       "raw": [
        "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.",
        " @see aria-pressed @see aria-selected."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false' | 'mixed'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false",
        "mixed"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-colcount'",
      "name": "'aria-colcount'",
      "comment": {
       "raw": [
        "Defines the total number of columns in a table, grid, or treegrid.",
        " @see aria-colindex."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-colindex'",
      "name": "'aria-colindex'",
      "comment": {
       "raw": [
        "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.",
        " @see aria-colcount @see aria-colspan."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-colspan'",
      "name": "'aria-colspan'",
      "comment": {
       "raw": [
        "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.",
        " @see aria-colindex @see aria-rowspan."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-controls'",
      "name": "'aria-controls'",
      "comment": {
       "raw": [
        "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
        " @see aria-owns."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-current'",
      "name": "'aria-current'",
      "comment": {
       "raw": [
        "Indicates the element that represents the current item within a container or set of related elements."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'time' | 'date' | 'true' | 'false' | 'page' | 'step' | 'location'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "time",
        "date",
        "true",
        "false",
        "page",
        "step",
        "location"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-describedby'",
      "name": "'aria-describedby'",
      "comment": {
       "raw": [
        "Identifies the element (or elements) that describes the object.",
        " @see aria-labelledby"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-details'",
      "name": "'aria-details'",
      "comment": {
       "raw": [
        "Identifies the element that provides a detailed, extended description for the object.",
        " @see aria-describedby."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-disabled'",
      "name": "'aria-disabled'",
      "comment": {
       "raw": [
        "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.",
        " @see aria-hidden @see aria-readonly."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-dropeffect'",
      "name": "'aria-dropeffect'",
      "comment": {
       "raw": [
        "Indicates what functions can be performed when a dragged object is released on the drop target.",
        " @deprecated in ARIA 1.1"
       ],
       "tags": {
        "@deprecated": "in ARIA 1.1"
       }
      },
      "typeValue": {
       "raw": "'link' | 'none' | 'copy' | 'execute' | 'move' | 'popup'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "link",
        "none",
        "copy",
        "execute",
        "move",
        "popup"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-errormessage'",
      "name": "'aria-errormessage'",
      "comment": {
       "raw": [
        "Identifies the element that provides an error message for the object.",
        " @see aria-invalid @see aria-describedby."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-expanded'",
      "name": "'aria-expanded'",
      "comment": {
       "raw": [
        "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-flowto'",
      "name": "'aria-flowto'",
      "comment": {
       "raw": [
        "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,",
        " allows assistive technology to override the general default of reading in document source order."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-grabbed'",
      "name": "'aria-grabbed'",
      "comment": {
       "raw": [
        "Indicates an element's \"grabbed\" state in a drag-and-drop operation.",
        " @deprecated in ARIA 1.1"
       ],
       "tags": {
        "@deprecated": "in ARIA 1.1"
       }
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-haspopup'",
      "name": "'aria-haspopup'",
      "comment": {
       "raw": [
        "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'dialog' | 'menu' | 'true' | 'false' | 'grid' | 'listbox' | 'tree'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "dialog",
        "menu",
        "true",
        "false",
        "grid",
        "listbox",
        "tree"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-hidden'",
      "name": "'aria-hidden'",
      "comment": {
       "raw": [
        "Indicates whether the element is exposed to an accessibility API.",
        " @see aria-disabled."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-invalid'",
      "name": "'aria-invalid'",
      "comment": {
       "raw": [
        "Indicates the entered value does not conform to the format expected by the application.",
        " @see aria-errormessage."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false' | 'grammar' | 'spelling'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false",
        "grammar",
        "spelling"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-keyshortcuts'",
      "name": "'aria-keyshortcuts'",
      "comment": {
       "raw": [
        "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-label'",
      "name": "'aria-label'",
      "comment": {
       "raw": [
        "Defines a string value that labels the current element.",
        " @see aria-labelledby."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-labelledby'",
      "name": "'aria-labelledby'",
      "comment": {
       "raw": [
        "Identifies the element (or elements) that labels the current element.",
        " @see aria-describedby."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-level'",
      "name": "'aria-level'",
      "comment": {
       "raw": [
        "Defines the hierarchical level of an element within a structure."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-live'",
      "name": "'aria-live'",
      "comment": {
       "raw": [
        "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
       ]
      },
      "typeValue": {
       "raw": "'off' | 'assertive' | 'polite'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "off",
        "assertive",
        "polite"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-modal'",
      "name": "'aria-modal'",
      "comment": {
       "raw": [
        "Indicates whether an element is modal when displayed."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-multiline'",
      "name": "'aria-multiline'",
      "comment": {
       "raw": [
        "Indicates whether a text box accepts multiple lines of input or only a single line."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-multiselectable'",
      "name": "'aria-multiselectable'",
      "comment": {
       "raw": [
        "Indicates that the user may select more than one item from the current selectable descendants."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-orientation'",
      "name": "'aria-orientation'",
      "comment": {
       "raw": [
        "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."
       ]
      },
      "typeValue": {
       "raw": "'horizontal' | 'vertical'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "horizontal",
        "vertical"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-owns'",
      "name": "'aria-owns'",
      "comment": {
       "raw": [
        "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship",
        " between DOM elements where the DOM hierarchy cannot be used to represent the relationship.",
        " @see aria-controls."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-placeholder'",
      "name": "'aria-placeholder'",
      "comment": {
       "raw": [
        "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.",
        " A hint could be a sample value or a brief description of the expected format."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-posinset'",
      "name": "'aria-posinset'",
      "comment": {
       "raw": [
        "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.",
        " @see aria-setsize."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-pressed'",
      "name": "'aria-pressed'",
      "comment": {
       "raw": [
        "Indicates the current \"pressed\" state of toggle buttons.",
        " @see aria-checked @see aria-selected."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false' | 'mixed'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false",
        "mixed"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-readonly'",
      "name": "'aria-readonly'",
      "comment": {
       "raw": [
        "Indicates that the element is not editable, but is otherwise operable.",
        " @see aria-disabled."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-relevant'",
      "name": "'aria-relevant'",
      "comment": {
       "raw": [
        "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.",
        " @see aria-atomic."
       ]
      },
      "typeValue": {
       "raw": "'text' | 'additions' | 'additions removals' | 'additions text' | 'all' | 'removals' | 'removals additions' | 'removals text' | 'text additions' | 'text removals'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "text",
        "additions",
        "additions removals",
        "additions text",
        "all",
        "removals",
        "removals additions",
        "removals text",
        "text additions",
        "text removals"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-required'",
      "name": "'aria-required'",
      "comment": {
       "raw": [
        "Indicates that user input is required on the element before a form may be submitted."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-roledescription'",
      "name": "'aria-roledescription'",
      "comment": {
       "raw": [
        "Defines a human-readable, author-localized description for the role of an element."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-rowcount'",
      "name": "'aria-rowcount'",
      "comment": {
       "raw": [
        "Defines the total number of rows in a table, grid, or treegrid.",
        " @see aria-rowindex."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-rowindex'",
      "name": "'aria-rowindex'",
      "comment": {
       "raw": [
        "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.",
        " @see aria-rowcount @see aria-rowspan."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-rowspan'",
      "name": "'aria-rowspan'",
      "comment": {
       "raw": [
        "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.",
        " @see aria-rowindex @see aria-colspan."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-selected'",
      "name": "'aria-selected'",
      "comment": {
       "raw": [
        "Indicates the current \"selected\" state of various widgets.",
        " @see aria-checked @see aria-pressed."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-setsize'",
      "name": "'aria-setsize'",
      "comment": {
       "raw": [
        "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.",
        " @see aria-posinset."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-sort'",
      "name": "'aria-sort'",
      "comment": {
       "raw": [
        "Indicates if items in a table or grid are sorted in ascending or descending order."
       ]
      },
      "typeValue": {
       "raw": "'none' | 'ascending' | 'descending' | 'other'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "none",
        "ascending",
        "descending",
        "other"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-valuemax'",
      "name": "'aria-valuemax'",
      "comment": {
       "raw": [
        "Defines the maximum allowed value for a range widget."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-valuemin'",
      "name": "'aria-valuemin'",
      "comment": {
       "raw": [
        "Defines the minimum allowed value for a range widget."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-valuenow'",
      "name": "'aria-valuenow'",
      "comment": {
       "raw": [
        "Defines the current value for a range widget.",
        " @see aria-valuetext."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-valuetext'",
      "name": "'aria-valuetext'",
      "comment": {
       "raw": [
        "Defines the human readable text alternative of aria-valuenow for a range widget."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "dangerouslySetInnerHTML",
      "name": "dangerouslySetInnerHTML",
      "typeValue": {
       "raw": "{ __html: string; }"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCopy",
      "name": "onCopy",
      "typeValue": {
       "raw": "React.ClipboardEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCopyCapture",
      "name": "onCopyCapture",
      "typeValue": {
       "raw": "React.ClipboardEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCut",
      "name": "onCut",
      "typeValue": {
       "raw": "React.ClipboardEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCutCapture",
      "name": "onCutCapture",
      "typeValue": {
       "raw": "React.ClipboardEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPaste",
      "name": "onPaste",
      "typeValue": {
       "raw": "React.ClipboardEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPasteCapture",
      "name": "onPasteCapture",
      "typeValue": {
       "raw": "React.ClipboardEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCompositionEnd",
      "name": "onCompositionEnd",
      "typeValue": {
       "raw": "React.CompositionEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCompositionEndCapture",
      "name": "onCompositionEndCapture",
      "typeValue": {
       "raw": "React.CompositionEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCompositionStart",
      "name": "onCompositionStart",
      "typeValue": {
       "raw": "React.CompositionEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCompositionStartCapture",
      "name": "onCompositionStartCapture",
      "typeValue": {
       "raw": "React.CompositionEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCompositionUpdate",
      "name": "onCompositionUpdate",
      "typeValue": {
       "raw": "React.CompositionEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCompositionUpdateCapture",
      "name": "onCompositionUpdateCapture",
      "typeValue": {
       "raw": "React.CompositionEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "typeValue": {
       "raw": "React.FocusEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onFocusCapture",
      "name": "onFocusCapture",
      "typeValue": {
       "raw": "React.FocusEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "typeValue": {
       "raw": "React.FocusEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onBlurCapture",
      "name": "onBlurCapture",
      "typeValue": {
       "raw": "React.FocusEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onChangeCapture",
      "name": "onChangeCapture",
      "typeValue": {
       "raw": "React.FormEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onBeforeInput",
      "name": "onBeforeInput",
      "typeValue": {
       "raw": "React.FormEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onBeforeInputCapture",
      "name": "onBeforeInputCapture",
      "typeValue": {
       "raw": "React.FormEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onInput",
      "name": "onInput",
      "typeValue": {
       "raw": "React.FormEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onInputCapture",
      "name": "onInputCapture",
      "typeValue": {
       "raw": "React.FormEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onReset",
      "name": "onReset",
      "typeValue": {
       "raw": "React.FormEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onResetCapture",
      "name": "onResetCapture",
      "typeValue": {
       "raw": "React.FormEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onSubmit",
      "name": "onSubmit",
      "typeValue": {
       "raw": "React.FormEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onSubmitCapture",
      "name": "onSubmitCapture",
      "typeValue": {
       "raw": "React.FormEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onInvalid",
      "name": "onInvalid",
      "typeValue": {
       "raw": "React.FormEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onInvalidCapture",
      "name": "onInvalidCapture",
      "typeValue": {
       "raw": "React.FormEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onLoad",
      "name": "onLoad",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onLoadCapture",
      "name": "onLoadCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onError",
      "name": "onError",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onErrorCapture",
      "name": "onErrorCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onKeyDown",
      "name": "onKeyDown",
      "typeValue": {
       "raw": "React.KeyboardEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onKeyDownCapture",
      "name": "onKeyDownCapture",
      "typeValue": {
       "raw": "React.KeyboardEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onKeyPress",
      "name": "onKeyPress",
      "comment": {
       "raw": [
        "@deprecated"
       ]
      },
      "typeValue": {
       "raw": "React.KeyboardEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onKeyPressCapture",
      "name": "onKeyPressCapture",
      "comment": {
       "raw": [
        "@deprecated"
       ]
      },
      "typeValue": {
       "raw": "React.KeyboardEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onKeyUp",
      "name": "onKeyUp",
      "typeValue": {
       "raw": "React.KeyboardEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onKeyUpCapture",
      "name": "onKeyUpCapture",
      "typeValue": {
       "raw": "React.KeyboardEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onAbort",
      "name": "onAbort",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onAbortCapture",
      "name": "onAbortCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCanPlay",
      "name": "onCanPlay",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCanPlayCapture",
      "name": "onCanPlayCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCanPlayThrough",
      "name": "onCanPlayThrough",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCanPlayThroughCapture",
      "name": "onCanPlayThroughCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDurationChange",
      "name": "onDurationChange",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDurationChangeCapture",
      "name": "onDurationChangeCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onEmptied",
      "name": "onEmptied",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onEmptiedCapture",
      "name": "onEmptiedCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onEncrypted",
      "name": "onEncrypted",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onEncryptedCapture",
      "name": "onEncryptedCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onEnded",
      "name": "onEnded",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onEndedCapture",
      "name": "onEndedCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onLoadedData",
      "name": "onLoadedData",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onLoadedDataCapture",
      "name": "onLoadedDataCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onLoadedMetadata",
      "name": "onLoadedMetadata",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onLoadedMetadataCapture",
      "name": "onLoadedMetadataCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onLoadStart",
      "name": "onLoadStart",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onLoadStartCapture",
      "name": "onLoadStartCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPause",
      "name": "onPause",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPauseCapture",
      "name": "onPauseCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPlay",
      "name": "onPlay",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPlayCapture",
      "name": "onPlayCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPlaying",
      "name": "onPlaying",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPlayingCapture",
      "name": "onPlayingCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onProgress",
      "name": "onProgress",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onProgressCapture",
      "name": "onProgressCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onRateChange",
      "name": "onRateChange",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onRateChangeCapture",
      "name": "onRateChangeCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onResize",
      "name": "onResize",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onResizeCapture",
      "name": "onResizeCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onSeeked",
      "name": "onSeeked",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onSeekedCapture",
      "name": "onSeekedCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onSeeking",
      "name": "onSeeking",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onSeekingCapture",
      "name": "onSeekingCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onStalled",
      "name": "onStalled",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onStalledCapture",
      "name": "onStalledCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onSuspend",
      "name": "onSuspend",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onSuspendCapture",
      "name": "onSuspendCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onTimeUpdate",
      "name": "onTimeUpdate",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onTimeUpdateCapture",
      "name": "onTimeUpdateCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onVolumeChange",
      "name": "onVolumeChange",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onVolumeChangeCapture",
      "name": "onVolumeChangeCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onWaiting",
      "name": "onWaiting",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onWaitingCapture",
      "name": "onWaitingCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onAuxClick",
      "name": "onAuxClick",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onAuxClickCapture",
      "name": "onAuxClickCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onClickCapture",
      "name": "onClickCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onContextMenu",
      "name": "onContextMenu",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onContextMenuCapture",
      "name": "onContextMenuCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDoubleClick",
      "name": "onDoubleClick",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDoubleClickCapture",
      "name": "onDoubleClickCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDrag",
      "name": "onDrag",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragCapture",
      "name": "onDragCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragEnd",
      "name": "onDragEnd",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragEndCapture",
      "name": "onDragEndCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragEnter",
      "name": "onDragEnter",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragEnterCapture",
      "name": "onDragEnterCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragExit",
      "name": "onDragExit",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragExitCapture",
      "name": "onDragExitCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragLeave",
      "name": "onDragLeave",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragLeaveCapture",
      "name": "onDragLeaveCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragOver",
      "name": "onDragOver",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragOverCapture",
      "name": "onDragOverCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragStart",
      "name": "onDragStart",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragStartCapture",
      "name": "onDragStartCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDrop",
      "name": "onDrop",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDropCapture",
      "name": "onDropCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onMouseDown",
      "name": "onMouseDown",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onMouseDownCapture",
      "name": "onMouseDownCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onMouseEnter",
      "name": "onMouseEnter",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onMouseLeave",
      "name": "onMouseLeave",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onMouseMove",
      "name": "onMouseMove",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onMouseMoveCapture",
      "name": "onMouseMoveCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onMouseOut",
      "name": "onMouseOut",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onMouseOutCapture",
      "name": "onMouseOutCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onMouseOver",
      "name": "onMouseOver",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onMouseOverCapture",
      "name": "onMouseOverCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onMouseUp",
      "name": "onMouseUp",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onMouseUpCapture",
      "name": "onMouseUpCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onSelect",
      "name": "onSelect",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onSelectCapture",
      "name": "onSelectCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onTouchCancel",
      "name": "onTouchCancel",
      "typeValue": {
       "raw": "React.TouchEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onTouchCancelCapture",
      "name": "onTouchCancelCapture",
      "typeValue": {
       "raw": "React.TouchEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onTouchEnd",
      "name": "onTouchEnd",
      "typeValue": {
       "raw": "React.TouchEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onTouchEndCapture",
      "name": "onTouchEndCapture",
      "typeValue": {
       "raw": "React.TouchEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onTouchMove",
      "name": "onTouchMove",
      "typeValue": {
       "raw": "React.TouchEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onTouchMoveCapture",
      "name": "onTouchMoveCapture",
      "typeValue": {
       "raw": "React.TouchEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onTouchStart",
      "name": "onTouchStart",
      "typeValue": {
       "raw": "React.TouchEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onTouchStartCapture",
      "name": "onTouchStartCapture",
      "typeValue": {
       "raw": "React.TouchEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerDown",
      "name": "onPointerDown",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerDownCapture",
      "name": "onPointerDownCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerMove",
      "name": "onPointerMove",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerMoveCapture",
      "name": "onPointerMoveCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerUp",
      "name": "onPointerUp",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerUpCapture",
      "name": "onPointerUpCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerCancel",
      "name": "onPointerCancel",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerCancelCapture",
      "name": "onPointerCancelCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerEnter",
      "name": "onPointerEnter",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerEnterCapture",
      "name": "onPointerEnterCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerLeave",
      "name": "onPointerLeave",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerLeaveCapture",
      "name": "onPointerLeaveCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerOver",
      "name": "onPointerOver",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerOverCapture",
      "name": "onPointerOverCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerOut",
      "name": "onPointerOut",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerOutCapture",
      "name": "onPointerOutCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onGotPointerCapture",
      "name": "onGotPointerCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onGotPointerCaptureCapture",
      "name": "onGotPointerCaptureCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onLostPointerCapture",
      "name": "onLostPointerCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onLostPointerCaptureCapture",
      "name": "onLostPointerCaptureCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onScroll",
      "name": "onScroll",
      "typeValue": {
       "raw": "React.UIEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onScrollCapture",
      "name": "onScrollCapture",
      "typeValue": {
       "raw": "React.UIEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onWheel",
      "name": "onWheel",
      "typeValue": {
       "raw": "React.WheelEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onWheelCapture",
      "name": "onWheelCapture",
      "typeValue": {
       "raw": "React.WheelEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onAnimationStart",
      "name": "onAnimationStart",
      "typeValue": {
       "raw": "React.AnimationEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onAnimationStartCapture",
      "name": "onAnimationStartCapture",
      "typeValue": {
       "raw": "React.AnimationEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onAnimationEnd",
      "name": "onAnimationEnd",
      "typeValue": {
       "raw": "React.AnimationEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onAnimationEndCapture",
      "name": "onAnimationEndCapture",
      "typeValue": {
       "raw": "React.AnimationEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onAnimationIteration",
      "name": "onAnimationIteration",
      "typeValue": {
       "raw": "React.AnimationEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onAnimationIterationCapture",
      "name": "onAnimationIterationCapture",
      "typeValue": {
       "raw": "React.AnimationEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onTransitionEnd",
      "name": "onTransitionEnd",
      "typeValue": {
       "raw": "React.TransitionEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onTransitionEndCapture",
      "name": "onTransitionEndCapture",
      "typeValue": {
       "raw": "React.TransitionEventHandler<HTMLInputElement>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:IScrollSpyApi": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "IScrollSpyApi",
     "nameFull": "IScrollSpyApi"
    },
    "src": "uui-components/src/navigation/ScrollSpy.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IScrollSpyApi",
     "print": [
      "interface IScrollSpyApi {",
      "    scrollToElement: (item?: string) => void;",
      "    currentActive: string;",
      "    setRef: (ref: HTMLElement) => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "scrollToElement",
      "name": "scrollToElement",
      "typeValue": {
       "raw": "(item?: string | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "currentActive",
      "name": "currentActive",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": "setRef",
      "name": "setRef",
      "typeValue": {
       "raw": "(ref: HTMLElement) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:IScrollSpyProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "IScrollSpyProps",
     "nameFull": "IScrollSpyProps"
    },
    "src": "uui-components/src/navigation/ScrollSpy.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IScrollSpyProps",
     "print": [
      "interface IScrollSpyProps {",
      "    elements?: Readonly<string[]>;",
      "    initialActive?: string;",
      "    options?: IntersectionObserverInit;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "elements",
      "name": "elements",
      "typeValue": {
       "raw": "readonly string[]"
      },
      "required": false
     },
     {
      "uid": "initialActive",
      "name": "initialActive",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "options",
      "name": "options",
      "typeValue": {
       "raw": "IntersectionObserverInit"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:LabeledInputProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "LabeledInputProps",
     "nameFull": "LabeledInputProps"
    },
    "src": "uui-components/src/layout/LabeledInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "LabeledInputProps",
     "print": [
      "interface LabeledInputProps extends LabeledInputCoreProps {",
      "    /** Overrides the default Tooltip component to use for info tooltip */",
      "    Tooltip?: React.ComponentType<TooltipProps>;",
      "    /** Overrides the default info icon */",
      "    infoIcon?: Icon;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "Tooltip",
      "name": "Tooltip",
      "comment": {
       "raw": [
        "Overrides the default Tooltip component to use for info tooltip"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<TooltipProps, any> | React.FunctionComponent<TooltipProps>"
      },
      "required": false
     },
     {
      "uid": "infoIcon",
      "name": "infoIcon",
      "comment": {
       "raw": [
        "Overrides the default info icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "labelPosition",
      "name": "labelPosition",
      "comment": {
       "raw": [
        "Position of the label, relative to the wrapped component (top of left)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'top'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "top"
       ]
      },
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": "info",
      "name": "info",
      "comment": {
       "raw": [
        "Info hint text to show in tooltip"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": "isOptional",
      "name": "isOptional",
      "comment": {
       "raw": [
        "Marks related field as optional"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": "htmlFor",
      "name": "htmlFor",
      "comment": {
       "raw": [
        "HTML 'for' tag to bind the label to a component.",
        " Can be used when component can't be wrapped by the LabeledInput, e.g. when form is layed out as table with labels and inputs placed into different columns"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "A value from LabeledInput children"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": "maxLength",
      "name": "maxLength",
      "comment": {
       "raw": [
        "Maximum text length, in characters"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": "charCounter",
      "name": "charCounter",
      "comment": {
       "raw": [
        "Showing current text length, in characters and maxLength"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": "footnote",
      "name": "footnote",
      "comment": {
       "raw": [
        "Additional info positioned at the bottom of LabeledInput"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": "sidenote",
      "name": "sidenote",
      "comment": {
       "raw": [
        "Additional info positioned to the right side of label"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "label",
      "name": "label",
      "comment": {
       "raw": [
        "Component label. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in labels."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasLabel",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "validationMessage",
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasValidationMessage",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:MainMenuCustomElementProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "MainMenuCustomElementProps",
     "nameFull": "MainMenuCustomElementProps"
    },
    "src": "uui-components/src/navigation/MainMenu/MainMenuCustomElement.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "MainMenuCustomElementProps",
     "print": [
      "interface MainMenuCustomElementProps extends IAdaptiveItem, IHasChildren {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "estimatedWidth",
      "name": "estimatedWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "priority",
      "name": "priority",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "showInBurgerMenu",
      "name": "showInBurgerMenu",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "collapseToMore",
      "name": "collapseToMore",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "collapsedContainer",
      "name": "collapsedContainer",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:MainMenuDropdownProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "MainMenuDropdownProps",
     "nameFull": "MainMenuDropdownProps"
    },
    "src": "uui-components/src/navigation/MainMenu/MainMenu.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "MainMenuDropdownProps",
     "print": [
      "interface MainMenuDropdownProps extends IHasChildren, IHasCaption, IAdaptiveItem, ICanRedirect, IHasCX, IHasRawProps<React.HTMLAttributes<HTMLElement>> {",
      "    /** Render callback for the MainMenuDropdown body.",
      "     * If omitted, component children will be rendered.",
      "     */",
      "    renderBody?: (props: DropdownBodyProps) => React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "renderBody",
      "name": "renderBody",
      "comment": {
       "raw": [
        "Render callback for the MainMenuDropdown body.",
        " If omitted, component children will be rendered."
       ]
      },
      "typeValue": {
       "raw": "(props: DropdownBodyProps) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "estimatedWidth",
      "name": "estimatedWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "priority",
      "name": "priority",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "showInBurgerMenu",
      "name": "showInBurgerMenu",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "collapseToMore",
      "name": "collapseToMore",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "collapsedContainer",
      "name": "collapsedContainer",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:MainMenuLogoProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "MainMenuLogoProps",
     "nameFull": "MainMenuLogoProps"
    },
    "src": "uui-components/src/navigation/MainMenu/MainMenuLogo.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "MainMenuLogoProps",
     "print": [
      "interface MainMenuLogoProps extends IAdaptiveItem, ICanRedirect, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    logoUrl?: string;",
      "    logoBgColor?: string;",
      "    showArrow?: boolean;",
      "    onContextMenu?: any;",
      "    link?: Link;",
      "    onClick?: (e: React.MouseEvent) => any;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "logoUrl",
      "name": "logoUrl",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "logoBgColor",
      "name": "logoBgColor",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "showArrow",
      "name": "showArrow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "onContextMenu",
      "name": "onContextMenu",
      "typeValue": {
       "raw": "any"
      },
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "typeValue": {
       "raw": "Link"
      },
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "typeValue": {
       "raw": "(e: React.MouseEvent<Element, MouseEvent>) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "estimatedWidth",
      "name": "estimatedWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "priority",
      "name": "priority",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "showInBurgerMenu",
      "name": "showInBurgerMenu",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "collapseToMore",
      "name": "collapseToMore",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "collapsedContainer",
      "name": "collapsedContainer",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:MainMenuProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "MainMenuProps",
     "nameFull": "MainMenuProps"
    },
    "src": "uui-components/src/navigation/MainMenu/MainMenu.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "MainMenuProps",
     "print": [
      "interface MainMenuProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    /** Array of menu items to be rendered */",
      "    items?: AdaptiveItemProps[];",
      "    /** @deprecated",
      "     * Use 'items' prop to define menu content */",
      "    children?: any;",
      "    /** Path to the logo source */",
      "    appLogoUrl?: string;",
      "    /** SPA link to navigate on logo click */",
      "    logoLink?: Link;",
      "    /** Href to navigate on logo click */",
      "    logoHref?: string;",
      "    /** Called when logo is clicked */",
      "    onLogoClick?: (e: MouseEvent) => any;",
      "    /** Path to the customer logo source */",
      "    customerLogoUrl?: string;",
      "    /** SPA link to navigate on customer logo click */",
      "    customerLogoLink?: Link;",
      "    /** Href to navigate on customer logo click */",
      "    customerLogoHref?: string;",
      "    customerLogoBgColor?: string;",
      "    isTransparent?: boolean;",
      "    /** Render callback for burger menu content.",
      "     * Burger will appear, which some items don't fit the menu width.",
      "     * */",
      "    renderBurger?: (props: {",
      "        onClose: () => void;",
      "    }) => React.ReactNode;",
      "    /** If true, Burger button will be always visible */",
      "    alwaysShowBurger?: boolean;",
      "    serverBadge?: string;",
      "    /** Internal prop to define component for MainMenuDropdown */",
      "    MainMenuDropdown?: React.ComponentType<MainMenuDropdownProps>;",
      "    /** Internal prop to define component for Burger */",
      "    Burger?: React.ComponentType<BurgerProps>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "items",
      "name": "items",
      "comment": {
       "raw": [
        "Array of menu items to be rendered"
       ]
      },
      "typeValue": {
       "raw": "{ render: (item: any, hiddenItems?: any[] | undefined, displayedItems?: any[] | undefined) => any; priority: number; collapsedContainer?: boolean | undefined; id: string; }[]"
      },
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "@deprecated",
        " Use 'items' prop to define menu content"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "required": false
     },
     {
      "uid": "appLogoUrl",
      "name": "appLogoUrl",
      "comment": {
       "raw": [
        "Path to the logo source"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "logoLink",
      "name": "logoLink",
      "comment": {
       "raw": [
        "SPA link to navigate on logo click"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "required": false
     },
     {
      "uid": "logoHref",
      "name": "logoHref",
      "comment": {
       "raw": [
        "Href to navigate on logo click"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "onLogoClick",
      "name": "onLogoClick",
      "comment": {
       "raw": [
        "Called when logo is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e: React.MouseEvent<Element, MouseEvent>) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "customerLogoUrl",
      "name": "customerLogoUrl",
      "comment": {
       "raw": [
        "Path to the customer logo source"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "customerLogoLink",
      "name": "customerLogoLink",
      "comment": {
       "raw": [
        "SPA link to navigate on customer logo click"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "required": false
     },
     {
      "uid": "customerLogoHref",
      "name": "customerLogoHref",
      "comment": {
       "raw": [
        "Href to navigate on customer logo click"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "customerLogoBgColor",
      "name": "customerLogoBgColor",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "isTransparent",
      "name": "isTransparent",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "renderBurger",
      "name": "renderBurger",
      "comment": {
       "raw": [
        "Render callback for burger menu content.",
        " Burger will appear, which some items don't fit the menu width."
       ]
      },
      "typeValue": {
       "raw": "(props: { onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "alwaysShowBurger",
      "name": "alwaysShowBurger",
      "comment": {
       "raw": [
        "If true, Burger button will be always visible"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "serverBadge",
      "name": "serverBadge",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "MainMenuDropdown",
      "name": "MainMenuDropdown",
      "comment": {
       "raw": [
        "Internal prop to define component for MainMenuDropdown"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<MainMenuDropdownProps, any> | React.FunctionComponent<MainMenuDropdownProps>"
      },
      "required": false
     },
     {
      "uid": "Burger",
      "name": "Burger",
      "comment": {
       "raw": [
        "Internal prop to define component for Burger"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<BurgerProps, any> | React.FunctionComponent<BurgerProps>"
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:NumericInputProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "NumericInputProps",
     "nameFull": "NumericInputProps"
    },
    "src": "uui-components/src/inputs/NumericInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "NumericInputProps",
     "print": [
      "interface NumericInputProps extends ICanFocus<HTMLInputElement>, IHasCX, IClickable, IDisableable, IEditable<number | null>, IHasPlaceholder, ICanBeReadonly, IAnalyticableOnChange<number>, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    /** Maximum value (default is Number.MAX_SAFE_INTEGER) */",
      "    max?: number;",
      "    /**",
      "     * Minimum value (default is 0)",
      "     * @default 0",
      "     */",
      "    min?: number;",
      "    /** Overrides the up/increase icon */",
      "    upIcon?: Icon;",
      "    /** Overrides the down/decrease icon */",
      "    downIcon?: Icon;",
      "    /** Increase/decrease step on up/down icons clicks and up/down arrow keys */",
      "    step?: number;",
      "    /** CSS classes to put directly on the Input element */",
      "    inputCx?: CX;",
      "    /** HTML ID */",
      "    id?: string;",
      "    /** Turn off up/down (increase/decrease) buttons */",
      "    disableArrows?: boolean;",
      "    /** Align text inside the component. Useful for tables (in cell-mode) - to align numbers in table column */",
      "    align?: 'left' | 'right';",
      "    /**",
      "     * Turns off locale-based formatting, standard Number.toString() is used instead",
      "     * @default false",
      "     */",
      "    disableLocaleFormatting?: boolean;",
      "    /** Number formatting options. See #{link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat} */",
      "    formatOptions?: Intl.NumberFormatOptions;",
      "    /**",
      "     * A function to convert current input value to displayed text.",
      "     * Overrides standard Intl-based formatting.",
      "     * If passed, only maximumFractionDigits considered from formatOptions when both properties provided.",
      "     * Formatting is applied only when input is not focused.",
      "     */",
      "    formatValue?(value: number): string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "max",
      "name": "max",
      "comment": {
       "raw": [
        "Maximum value (default is Number.MAX_SAFE_INTEGER)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "min",
      "name": "min",
      "comment": {
       "raw": [
        "Minimum value (default is 0)",
        " @default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "upIcon",
      "name": "upIcon",
      "comment": {
       "raw": [
        "Overrides the up/increase icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "downIcon",
      "name": "downIcon",
      "comment": {
       "raw": [
        "Overrides the down/decrease icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "step",
      "name": "step",
      "comment": {
       "raw": [
        "Increase/decrease step on up/down icons clicks and up/down arrow keys"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "inputCx",
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS classes to put directly on the Input element"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "disableArrows",
      "name": "disableArrows",
      "comment": {
       "raw": [
        "Turn off up/down (increase/decrease) buttons"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "align",
      "name": "align",
      "comment": {
       "raw": [
        "Align text inside the component. Useful for tables (in cell-mode) - to align numbers in table column"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left"
       ]
      },
      "required": false
     },
     {
      "uid": "disableLocaleFormatting",
      "name": "disableLocaleFormatting",
      "comment": {
       "raw": [
        "Turns off locale-based formatting, standard Number.toString() is used instead",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "formatOptions",
      "name": "formatOptions",
      "comment": {
       "raw": [
        "Number formatting options. See #{link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat}"
       ]
      },
      "typeValue": {
       "raw": "Intl.NumberFormatOptions"
      },
      "required": false
     },
     {
      "uid": "formatValue",
      "name": "formatValue",
      "comment": {
       "raw": [
        "A function to convert current input value to displayed text.",
        " Overrides standard Intl-based formatting.",
        " If passed, only maximumFractionDigits considered from formatOptions when both properties provided.",
        " Formatting is applied only when input is not focused."
       ]
      },
      "typeValue": {
       "raw": "(value: number) => string"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "null | number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: number | null) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "placeholder",
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: number | null, oldValue: number | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:PaginatorProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PaginatorProps",
     "nameFull": "PaginatorProps"
    },
    "src": "uui-components/src/widgets/Paginator.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PaginatorProps",
     "print": [
      "interface PaginatorProps extends IControlled<number>, IAnalyticableOnChange<number>, IDisableable, IHasRawProps<React.HTMLAttributes<HTMLElement>> {",
      "    /** Defines component size */",
      "    size: '24' | '30';",
      "    /** Total number of pages */",
      "    totalPages: number;",
      "    /** Override default rendering, keeping the component behavior */",
      "    render?(params: PaginatorRenderParams): any;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size"
       ]
      },
      "typeValue": {
       "raw": "'24' | '30'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30"
       ]
      },
      "required": true
     },
     {
      "uid": "totalPages",
      "name": "totalPages",
      "comment": {
       "raw": [
        "Total number of pages"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": "render",
      "name": "render",
      "comment": {
       "raw": [
        "Override default rendering, keeping the component behavior"
       ]
      },
      "typeValue": {
       "raw": "(params: PaginatorRenderParams) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: number | null, oldValue: number | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:PaginatorRenderParams": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PaginatorRenderParams",
     "nameFull": "PaginatorRenderParams"
    },
    "src": "uui-components/src/widgets/Paginator.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PaginatorRenderParams",
     "print": [
      "interface PaginatorRenderParams extends IHasRawProps<React.HTMLAttributes<HTMLElement>> {",
      "    /** Defines component size */",
      "    size: '24' | '30';",
      "    /** Array of pages that should be rendered */",
      "    pages: PaginatorItem[];",
      "    /** Call to go to the next page */",
      "    goToNext(): void;",
      "    /** Call to go to the previous page */",
      "    goToPrev(): void;",
      "    /** True, if current page is last */",
      "    isLast: boolean;",
      "    /** True, if current page is first */",
      "    isFirst: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size"
       ]
      },
      "typeValue": {
       "raw": "'24' | '30'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30"
       ]
      },
      "required": true
     },
     {
      "uid": "pages",
      "name": "pages",
      "comment": {
       "raw": [
        "Array of pages that should be rendered"
       ]
      },
      "typeValue": {
       "raw": "PaginatorItem[]"
      },
      "required": true
     },
     {
      "uid": "goToNext",
      "name": "goToNext",
      "comment": {
       "raw": [
        "Call to go to the next page"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "goToPrev",
      "name": "goToPrev",
      "comment": {
       "raw": [
        "Call to go to the previous page"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "isLast",
      "name": "isLast",
      "comment": {
       "raw": [
        "True, if current page is last"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": "isFirst",
      "name": "isFirst",
      "comment": {
       "raw": [
        "True, if current page is first"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": true
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:PickerBindingProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PickerBindingProps",
     "nameFull": "PickerBindingProps<TItem, TId>"
    },
    "src": "uui-components/src/pickers/bindingHelpers.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "{ selectionMode: 'single'; valueType: 'id'; } & IEditable<TId> | { selectionMode: 'single'; valueType?: 'entity' | undefined; } & IEditable<TItem> | { selectionMode: 'multi'; valueType: 'id'; emptyValue?: [] | null | undefined; } & IEditable<TId[]> | { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]>",
     "print": [
      "type PickerBindingProps<TItem, TId> = SinglePickerProps<TId, TItem> | ArrayPickerProps<TId, TItem>;"
     ]
    },
    "props": [
     {
      "uid": "selectionMode",
      "name": "selectionMode",
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "from": "@epam/uui-components:SinglePickerProps",
      "required": true
     },
     {
      "uid": "valueType",
      "name": "valueType",
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-components:SinglePickerProps",
      "required": true
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "valueType_2",
      "name": "valueType",
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-components:SinglePickerProps",
      "required": false
     },
     {
      "uid": "value_2",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_2",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "selectionMode_3",
      "name": "selectionMode",
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "from": "@epam/uui-components:ArrayPickerProps",
      "required": true
     },
     {
      "uid": "valueType_3",
      "name": "valueType",
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-components:ArrayPickerProps",
      "required": true
     },
     {
      "uid": "emptyValue",
      "name": "emptyValue",
      "typeValue": {
       "raw": "null | []"
      },
      "from": "@epam/uui-components:ArrayPickerProps",
      "required": false
     },
     {
      "uid": "value_3",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_3",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "valueType_4",
      "name": "valueType",
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-components:ArrayPickerProps",
      "required": true
     },
     {
      "uid": "value_4",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_4",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-components:PickerBindingValueType": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PickerBindingValueType",
     "nameFull": "PickerBindingValueType"
    },
    "src": "uui-components/src/pickers/bindingHelpers.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "'scalar' | 'array'",
     "print": [
      "type PickerBindingValueType = 'scalar' | 'array';"
     ]
    }
   }
  },
  "@epam/uui-components:PickerBodyBaseProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PickerBodyBaseProps",
     "nameFull": "PickerBodyBaseProps"
    },
    "src": "uui-components/src/pickers/PickerBodyBase.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerBodyBaseProps",
     "print": [
      "interface PickerBodyBaseProps extends DataSourceListProps, IEditable<DataSourceState>, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    onKeyDown?(e: React.KeyboardEvent<HTMLElement>): void;",
      "    renderNotFound?: () => React.ReactNode;",
      "    rows: React.ReactNode[];",
      "    scheduleUpdate?: () => void;",
      "    search: IEditable<string>;",
      "    showSearch?: boolean | 'auto';",
      "    fixedBodyPosition?: boolean;",
      "    searchDebounceDelay?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "onKeyDown",
      "name": "onKeyDown",
      "typeValue": {
       "raw": "(e: React.KeyboardEvent<HTMLElement>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "renderNotFound",
      "name": "renderNotFound",
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "rows",
      "name": "rows",
      "typeValue": {
       "raw": "React.ReactNode[]"
      },
      "required": true
     },
     {
      "uid": "scheduleUpdate",
      "name": "scheduleUpdate",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "search",
      "name": "search",
      "typeValue": {
       "raw": "IEditable<string>"
      },
      "required": true
     },
     {
      "uid": "showSearch",
      "name": "showSearch",
      "typeValue": {
       "raw": "boolean | 'auto'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "auto"
       ]
      },
      "required": false
     },
     {
      "uid": "fixedBodyPosition",
      "name": "fixedBodyPosition",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "searchDebounceDelay",
      "name": "searchDebounceDelay",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "selectAll",
      "name": "selectAll",
      "comment": {
       "raw": [
        "ICheckable object for Select All behavior.",
        " If omitted, Select All action will be absent."
       ]
      },
      "typeValue": {
       "raw": "ICheckable"
      },
      "from": "@epam/uui-core:DataSourceListProps",
      "required": false
     },
     {
      "uid": "isReloading",
      "name": "isReloading",
      "comment": {
       "raw": [
        "Signals that data is reloading on search/sort/filter/reload."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataSourceListProps",
      "required": false
     },
     {
      "uid": "rowsCount",
      "name": "rowsCount",
      "comment": {
       "raw": [
        "Count of rows, after applying filter, and folding on tree nodes.",
        " Obsolete! Please switch to exactRowsCount / knownRowsCount"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": "exactRowsCount",
      "name": "exactRowsCount",
      "comment": {
       "raw": [
        "Count of rows, if all rows loaded. Can be null while initial loading, or if API doesn't return count"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": "knownRowsCount",
      "name": "knownRowsCount",
      "comment": {
       "raw": [
        "There's at least knownRowsCount rows. There can be more if list is lazy loaded.",
        " Equals to exactRowsCount if all rows are loaded, or if API returns rows count",
        " Otherwise, exactRowsCount will be null, and knownRowsCount will specify number of loaded rows."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": "totalCount",
      "name": "totalCount",
      "comment": {
       "raw": [
        "Total count of items, before applying the filter. If there's a tree, it counts all nodes, including folded children"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "DataSourceState<Record<string, any>, any>"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: DataSourceState<Record<string, any>, any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:PickerInputBaseProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PickerInputBaseProps",
     "nameFull": "PickerInputBaseProps<TItem, TId>"
    },
    "src": "uui-components/src/pickers/hooks/types.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType?: 'id' | undefined; } & IEditable<TId> & IAnalyticableOnChange<any> & PickerShowSelectedOnly & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & { editMode?: PickerInputEditMode | undefined; maxItems?: number | undefined; minBodyWidth?: number | undefined; isSingleLine?: boolean | undefined; dropdownPlacement?: Placement | undefined; renderToggler?: ((props: PickerTogglerProps<TItem, TId>) => React.ReactNode) | undefined; searchPosition?: PickerInputSearchPosition | undefined; disableClear?: boolean | undefined; minCharsToSearch?: number | undefined; dropdownHeight?: number | undefined; autoFocus?: boolean | undefined; rawProps?: { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; } | undefined; renderFooter?: ((props: PickerInputFooterProps<TItem, TId>) => React.ReactNode) | undefined; fixedBodyPosition?: boolean | undefined; portalTarget?: HTMLElement | undefined; inputCx?: ClassValue; bodyCx?: ClassValue; highlightSearchMatches?: boolean | undefined; searchDebounceDelay?: number | undefined; id?: string | undefined; } | PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType: 'entity'; } & IEditable<TItem> & IAnalyticableOnChange<any> & PickerShowSelectedOnly & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & { editMode?: PickerInputEditMode | undefined; maxItems?: number | undefined; minBodyWidth?: number | undefined; isSingleLine?: boolean | undefined; dropdownPlacement?: Placement | undefined; renderToggler?: ((props: PickerTogglerProps<TItem, TId>) => React.ReactNode) | undefined; searchPosition?: PickerInputSearchPosition | undefined; disableClear?: boolean | undefined; minCharsToSearch?: number | undefined; dropdownHeight?: number | undefined; autoFocus?: boolean | undefined; rawProps?: { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; } | undefined; renderFooter?: ((props: PickerInputFooterProps<TItem, TId>) => React.ReactNode) | undefined; fixedBodyPosition?: boolean | undefined; portalTarget?: HTMLElement | undefined; inputCx?: ClassValue; bodyCx?: ClassValue; highlightSearchMatches?: boolean | undefined; searchDebounceDelay?: number | undefined; id?: string | undefined; } | PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType?: 'id' | undefined; emptyValue?: [] | null | undefined; } & IEditable<TId[]> & IAnalyticableOnChange<any> & PickerShowSelectedOnly & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & { editMode?: PickerInputEditMode | undefined; maxItems?: number | undefined; minBodyWidth?: number | undefined; isSingleLine?: boolean | undefined; dropdownPlacement?: Placement | undefined; renderToggler?: ((props: PickerTogglerProps<TItem, TId>) => React.ReactNode) | undefined; searchPosition?: PickerInputSearchPosition | undefined; disableClear?: boolean | undefined; minCharsToSearch?: number | undefined; dropdownHeight?: number | undefined; autoFocus?: boolean | undefined; rawProps?: { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; } | undefined; renderFooter?: ((props: PickerInputFooterProps<TItem, TId>) => React.ReactNode) | undefined; fixedBodyPosition?: boolean | undefined; portalTarget?: HTMLElement | undefined; inputCx?: ClassValue; bodyCx?: ClassValue; highlightSearchMatches?: boolean | undefined; searchDebounceDelay?: number | undefined; id?: string | undefined; } | PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]> & IAnalyticableOnChange<any> & PickerShowSelectedOnly & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & { editMode?: PickerInputEditMode | undefined; maxItems?: number | undefined; minBodyWidth?: number | undefined; isSingleLine?: boolean | undefined; dropdownPlacement?: Placement | undefined; renderToggler?: ((props: PickerTogglerProps<TItem, TId>) => React.ReactNode) | undefined; searchPosition?: PickerInputSearchPosition | undefined; disableClear?: boolean | undefined; minCharsToSearch?: number | undefined; dropdownHeight?: number | undefined; autoFocus?: boolean | undefined; rawProps?: { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; } | undefined; renderFooter?: ((props: PickerInputFooterProps<TItem, TId>) => React.ReactNode) | undefined; fixedBodyPosition?: boolean | undefined; portalTarget?: HTMLElement | undefined; inputCx?: ClassValue; bodyCx?: ClassValue; highlightSearchMatches?: boolean | undefined; searchDebounceDelay?: number | undefined; id?: string | undefined; }",
     "print": [
      "type PickerInputBaseProps<TItem, TId> = PickerBaseProps<TItem, TId> & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & {",
      "    /** dropdown (default) - show selection in dropdown; modal - opens modal window to select items */",
      "    editMode?: PickerInputEditMode;",
      "    /** Maximum number of tags to display in input, before collapsing to \"N items selected\" mode */",
      "    maxItems?: number;",
      "    /** Minimum width of dropdown body */",
      "    minBodyWidth?: number;",
      "    /** Prevents selected items tags to occupy multiple lines  */",
      "    isSingleLine?: boolean;",
      "    /** Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/) */",
      "    dropdownPlacement?: Placement;",
      "    /** Replaces default 'toggler' - an input to which Picker attaches dropdown */",
      "    renderToggler?: (props: PickerTogglerProps<TItem, TId>) => React.ReactNode;",
      "    /**",
      "      *  Defines where search field is:",
      "      * 'input' - try to place search inside the toggler (default for single-select),",
      "      * 'body' - put search inside the dropdown (default for multi-select)",
      "      * 'none' - disables search completely",
      "      *",
      "      * Note: 'searchPosition' cannot be 'input' if 'editMode' is 'modal'",
      "      */",
      "    searchPosition?: PickerInputSearchPosition;",
      "    /** Disallow to clear Picker value (cross icon) */",
      "    disableClear?: boolean;",
      "    /**",
      "     * Minimum characters to type, before search will trigger. If input characters number is less then 'minCharsToSearch', it will disable opening dropdown body.",
      "     * By default search triggers after input value is changed.",
      "     *",
      "     * Note: defined minCharsToSearch isn't compatible with searchPosition=body.",
      "     */",
      "    minCharsToSearch?: number;",
      "    /** Overrides default height of the dropdown body */",
      "    dropdownHeight?: number;",
      "    /** Sets focus to component when it's mounted */",
      "    autoFocus?: boolean;",
      "    /** HTML attributes to put directly to the PickerInput parts */",
      "    rawProps?: {",
      "        /** HTML attributes to put directly to the input element */",
      "        input?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
      "        /** HTML attributes to put directly to the body root element */",
      "        body?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
      "    };",
      "    /** Adds custom footer to the dropdown body */",
      "    renderFooter?: (props: PickerInputFooterProps<TItem, TId>) => React.ReactNode;",
      "    /** Disables moving the dropdown body, when togglers is moved. Used in filters panel, to prevent filter selection to 'jump' after adding a filter. */",
      "    fixedBodyPosition?: boolean;",
      "    /**",
      "     * Node of portal target, where to render the dropdown body.",
      "     * By default, will be used global portal node.",
      "     */",
      "    portalTarget?: HTMLElement;",
      "    /** CSS class(es) to put on input-part component. See https://github.com/JedWatson/classnames#usage for details */",
      "    inputCx?: CX;",
      "    /** CSS class(es) to put on body-part component. See https://github.com/JedWatson/classnames#usage for details */",
      "    bodyCx?: CX;",
      "    /**",
      "     * Enables highlighting of the items' text with search-matching results.",
      "     * */",
      "    highlightSearchMatches?: boolean;",
      "    /** Search input debounce delay in ms. Default value is 500ms */",
      "    searchDebounceDelay?: number;",
      "    /** HTML ID attribute for the input in toggler */",
      "    id?: string;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "entityName",
      "name": "entityName",
      "comment": {
       "raw": [
        "Name of the entity being selected. Affects wording like \"Please select [entity]\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "entityPluralName",
      "name": "entityPluralName",
      "comment": {
       "raw": [
        "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "dataSource",
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<TItem, TId, any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": true
     },
     {
      "uid": "getName",
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "renderRow",
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<TItem, TId>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "getRowOptions",
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "renderNotFound",
      "name": "renderNotFound",
      "comment": {
       "raw": [
        "Overrides the default 'no records found' banner.",
        " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
       ]
      },
      "typeValue": {
       "raw": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "emptyValue",
      "name": "emptyValue",
      "comment": {
       "raw": [
        "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
       ]
      },
      "typeValue": {
       "raw": "null | []"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "sortBy",
      "name": "sortBy",
      "comment": {
       "raw": [
        "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "comment": {
       "raw": [
        "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "sorting",
      "name": "sorting",
      "comment": {
       "raw": [
        "Defines sorting to pass to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "cascadeSelection",
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "isFoldedByDefault",
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "You can return true for all, or some items to fold them."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "getSearchFields",
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "ref",
      "name": "ref",
      "comment": {
       "raw": [
        "Component ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: PickerInputElement | null) => void | React.RefObject<PickerInputElement>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "selectionMode",
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": "valueType",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: any, oldValue: any) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "showSelectedOnly",
      "name": "showSelectedOnly",
      "comment": {
       "raw": [
        "Enables/disables selected rows only in Picker."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PickerShowSelectedOnly",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "placeholder",
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "editMode",
      "name": "editMode",
      "comment": {
       "raw": [
        "dropdown (default) - show selection in dropdown; modal - opens modal window to select items"
       ]
      },
      "typeValue": {
       "raw": "'dropdown' | 'modal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "dropdown",
        "modal"
       ]
      },
      "required": false
     },
     {
      "uid": "maxItems",
      "name": "maxItems",
      "comment": {
       "raw": [
        "Maximum number of tags to display in input, before collapsing to \"N items selected\" mode"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "minBodyWidth",
      "name": "minBodyWidth",
      "comment": {
       "raw": [
        "Minimum width of dropdown body"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "isSingleLine",
      "name": "isSingleLine",
      "comment": {
       "raw": [
        "Prevents selected items tags to occupy multiple lines"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "dropdownPlacement",
      "name": "dropdownPlacement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left' | 'top' | 'bottom' | 'auto' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left",
        "top",
        "bottom",
        "auto",
        "auto-start",
        "auto-end",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "required": false
     },
     {
      "uid": "renderToggler",
      "name": "renderToggler",
      "comment": {
       "raw": [
        "Replaces default 'toggler' - an input to which Picker attaches dropdown"
       ]
      },
      "typeValue": {
       "raw": "(props: PickerTogglerProps<TItem, TId>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "searchPosition",
      "name": "searchPosition",
      "comment": {
       "raw": [
        "Defines where search field is:",
        " 'input' - try to place search inside the toggler (default for single-select),",
        " 'body' - put search inside the dropdown (default for multi-select)",
        " 'none' - disables search completely",
        "",
        " Note: 'searchPosition' cannot be 'input' if 'editMode' is 'modal'"
       ]
      },
      "typeValue": {
       "raw": "'body' | 'input' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "body",
        "input",
        "none"
       ]
      },
      "required": false
     },
     {
      "uid": "disableClear",
      "name": "disableClear",
      "comment": {
       "raw": [
        "Disallow to clear Picker value (cross icon)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "minCharsToSearch",
      "name": "minCharsToSearch",
      "comment": {
       "raw": [
        "Minimum characters to type, before search will trigger. If input characters number is less then 'minCharsToSearch', it will disable opening dropdown body.",
        " By default search triggers after input value is changed.",
        "",
        " Note: defined minCharsToSearch isn't compatible with searchPosition=body."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "dropdownHeight",
      "name": "dropdownHeight",
      "comment": {
       "raw": [
        "Overrides default height of the dropdown body"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "autoFocus",
      "name": "autoFocus",
      "comment": {
       "raw": [
        "Sets focus to component when it's mounted"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "HTML attributes to put directly to the PickerInput parts"
       ]
      },
      "typeValue": {
       "raw": "{ input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
      },
      "required": false
     },
     {
      "uid": "renderFooter",
      "name": "renderFooter",
      "comment": {
       "raw": [
        "Adds custom footer to the dropdown body"
       ]
      },
      "typeValue": {
       "raw": "(props: PickerInputFooterProps<TItem, TId>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "fixedBodyPosition",
      "name": "fixedBodyPosition",
      "comment": {
       "raw": [
        "Disables moving the dropdown body, when togglers is moved. Used in filters panel, to prevent filter selection to 'jump' after adding a filter."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "portalTarget",
      "name": "portalTarget",
      "comment": {
       "raw": [
        "Node of portal target, where to render the dropdown body.",
        " By default, will be used global portal node."
       ]
      },
      "typeValue": {
       "raw": "HTMLElement"
      },
      "required": false
     },
     {
      "uid": "inputCx",
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on input-part component. See https://github.com/JedWatson/classnames#usage for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "required": false
     },
     {
      "uid": "bodyCx",
      "name": "bodyCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on body-part component. See https://github.com/JedWatson/classnames#usage for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "required": false
     },
     {
      "uid": "highlightSearchMatches",
      "name": "highlightSearchMatches",
      "comment": {
       "raw": [
        "Enables highlighting of the items' text with search-matching results."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "searchDebounceDelay",
      "name": "searchDebounceDelay",
      "comment": {
       "raw": [
        "Search input debounce delay in ms. Default value is 500ms"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID attribute for the input in toggler"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "valueType_2",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": "value_2",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_2",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "selectionMode_3",
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": "valueType_3",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": false
     },
     {
      "uid": "value_3",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_3",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "valueType_4",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": "value_4",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_4",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-components:PickerListBaseProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PickerListBaseProps",
     "nameFull": "PickerListBaseProps<TItem, TId>"
    },
    "src": "uui-components/src/pickers/hooks/types.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType?: 'id' | undefined; } & IEditable<TId> & IAnalyticableOnChange<any> & PickerShowSelectedOnly & { maxDefaultItems?: number | undefined; maxTotalItems?: number | undefined; defaultIds?: TId[] | undefined; settingsKey?: string | undefined; sortBy?(item: TItem, sorting: SortingOption<any>): string; } | PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType: 'entity'; } & IEditable<TItem> & IAnalyticableOnChange<any> & PickerShowSelectedOnly & { maxDefaultItems?: number | undefined; maxTotalItems?: number | undefined; defaultIds?: TId[] | undefined; settingsKey?: string | undefined; sortBy?(item: TItem, sorting: SortingOption<any>): string; } | PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType?: 'id' | undefined; emptyValue?: [] | null | undefined; } & IEditable<TId[]> & IAnalyticableOnChange<any> & PickerShowSelectedOnly & { maxDefaultItems?: number | undefined; maxTotalItems?: number | undefined; defaultIds?: TId[] | undefined; settingsKey?: string | undefined; sortBy?(item: TItem, sorting: SortingOption<any>): string; } | PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]> & IAnalyticableOnChange<any> & PickerShowSelectedOnly & { maxDefaultItems?: number | undefined; maxTotalItems?: number | undefined; defaultIds?: TId[] | undefined; settingsKey?: string | undefined; sortBy?(item: TItem, sorting: SortingOption<any>): string; }",
     "print": [
      "type PickerListBaseProps<TItem, TId> = Exclude<PickerBaseProps<TItem, TId>, 'cascadeSelection'> & {",
      "    /**",
      "     * Number of default items to show initially, when nothing is selected.",
      "     * @default 10",
      "     */",
      "    maxDefaultItems?: number;",
      "    /**",
      "     * Maximum total number of items to show, including selected",
      "     * @default 50",
      "     */",
      "    maxTotalItems?: number;",
      "    /**",
      "     * Ids of items to show first.",
      "     * If not specified, top props.maxDefaultItems will be shown according to the DataSource sorting settings (default is 10)",
      "     */",
      "    defaultIds?: TId[];",
      "    /** If provided, top picks will be automatically adjusted based on last user selection, and stored as user setting under provided key */",
      "    settingsKey?: string;",
      "    sortBy?(item: TItem, sorting: SortingOption): string;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "entityName",
      "name": "entityName",
      "comment": {
       "raw": [
        "Name of the entity being selected. Affects wording like \"Please select [entity]\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "entityPluralName",
      "name": "entityPluralName",
      "comment": {
       "raw": [
        "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "dataSource",
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<TItem, TId, any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": true
     },
     {
      "uid": "getName",
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "renderRow",
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<TItem, TId>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "getRowOptions",
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "renderNotFound",
      "name": "renderNotFound",
      "comment": {
       "raw": [
        "Overrides the default 'no records found' banner.",
        " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
       ]
      },
      "typeValue": {
       "raw": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "emptyValue",
      "name": "emptyValue",
      "comment": {
       "raw": [
        "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
       ]
      },
      "typeValue": {
       "raw": "null | []"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "sortBy",
      "name": "sortBy",
      "comment": {
       "raw": [
        "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "((item: TItem, sorting: SortingOption<any>) => any) & ((item: TItem, sorting: SortingOption<any>) => string)"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "comment": {
       "raw": [
        "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "sorting",
      "name": "sorting",
      "comment": {
       "raw": [
        "Defines sorting to pass to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "cascadeSelection",
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "isFoldedByDefault",
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "You can return true for all, or some items to fold them."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "getSearchFields",
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "ref",
      "name": "ref",
      "comment": {
       "raw": [
        "Component ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: PickerInputElement | null) => void | React.RefObject<PickerInputElement>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "selectionMode",
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": "valueType",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: any, oldValue: any) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "showSelectedOnly",
      "name": "showSelectedOnly",
      "comment": {
       "raw": [
        "Enables/disables selected rows only in Picker."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PickerShowSelectedOnly",
      "required": false
     },
     {
      "uid": "maxDefaultItems",
      "name": "maxDefaultItems",
      "comment": {
       "raw": [
        "Number of default items to show initially, when nothing is selected.",
        " @default 10"
       ],
       "tags": {
        "@default": 10
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "maxTotalItems",
      "name": "maxTotalItems",
      "comment": {
       "raw": [
        "Maximum total number of items to show, including selected",
        " @default 50"
       ],
       "tags": {
        "@default": 50
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "defaultIds",
      "name": "defaultIds",
      "comment": {
       "raw": [
        "Ids of items to show first.",
        " If not specified, top props.maxDefaultItems will be shown according to the DataSource sorting settings (default is 10)"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "required": false
     },
     {
      "uid": "settingsKey",
      "name": "settingsKey",
      "comment": {
       "raw": [
        "If provided, top picks will be automatically adjusted based on last user selection, and stored as user setting under provided key"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "valueType_2",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": "value_2",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_2",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "selectionMode_3",
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": "valueType_3",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": false
     },
     {
      "uid": "value_3",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_3",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "valueType_4",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": "value_4",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_4",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-components:PickerModalArrayProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PickerModalArrayProps",
     "nameFull": "PickerModalArrayProps<TId, TItem>"
    },
    "src": "uui-components/src/pickers/hooks/types.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "{ selectionMode: 'multi'; valueType: 'id'; initialValue: TId[]; } & IModal<TId[], any> | { selectionMode: 'multi'; valueType: 'entity'; initialValue: TItem[]; } & IModal<TItem[], any>",
     "print": [
      "type PickerModalArrayProps<TId, TItem> = ({",
      "    selectionMode: 'multi';",
      "    valueType: 'id';",
      "    initialValue: TId[];",
      "} & IModal<TId[]>) | ({",
      "    selectionMode: 'multi';",
      "    valueType: 'entity';",
      "    initialValue: TItem[];",
      "} & IModal<TItem[]>);"
     ]
    },
    "props": [
     {
      "uid": "selectionMode",
      "name": "selectionMode",
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "required": true
     },
     {
      "uid": "valueType",
      "name": "valueType",
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "required": true
     },
     {
      "uid": "initialValue",
      "name": "initialValue",
      "typeValue": {
       "raw": "TId[]"
      },
      "required": true
     },
     {
      "uid": "isActive",
      "name": "isActive",
      "comment": {
       "raw": [
        "Indicates whether the modal is currently displayed"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the modal"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "zIndex",
      "name": "zIndex",
      "comment": {
       "raw": [
        "Modal zIndex value. Calculated via LayoutContext."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "success",
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "abort",
      "name": "abort",
      "comment": {
       "raw": [
        "Call to close the modal with abort action. It's rejects `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "parameters",
      "name": "parameters",
      "comment": {
       "raw": [
        "Parameters that provided via second param of `modalContext.show` method"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": "depth",
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of current modal layer"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": "valueType_2",
      "name": "valueType",
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "required": true
     },
     {
      "uid": "initialValue_2",
      "name": "initialValue",
      "typeValue": {
       "raw": "TItem[]"
      },
      "required": true
     },
     {
      "uid": "success_2",
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-components:PickerModalOptions": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PickerModalOptions",
     "nameFull": "PickerModalOptions<TItem, TId>"
    },
    "src": "uui-components/src/pickers/hooks/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerModalOptions<TItem, TId>",
     "print": [
      "interface PickerModalOptions<TItem, TId> extends IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    /** Render callback for custom filters block. This block will be rendered befor the items list.",
      "     If omitted, nothing will be rendered.",
      "     */",
      "    renderFilter?(editableFilter: IEditable<any>): React.ReactNode;",
      "    /** Render callback for modal footer.",
      "     If omitted, default footer will be rendered.",
      "     */",
      "    renderFooter?: (props: PickerFooterProps<TItem, TId> & Partial<IModal<any>>) => React.ReactNode;",
      "    /**",
      "     * If true, prevent modal window closing by click outside modal",
      "     * @default false",
      "     */",
      "    disallowClickOutside?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "renderFilter",
      "name": "renderFilter",
      "comment": {
       "raw": [
        "Render callback for custom filters block. This block will be rendered befor the items list.",
        "     If omitted, nothing will be rendered."
       ]
      },
      "typeValue": {
       "raw": "(editableFilter: IEditable<any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "renderFooter",
      "name": "renderFooter",
      "comment": {
       "raw": [
        "Render callback for modal footer.",
        "     If omitted, default footer will be rendered."
       ]
      },
      "typeValue": {
       "raw": "(props: PickerFooterProps<TItem, TId> & Partial<IModal<any, any>>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "disallowClickOutside",
      "name": "disallowClickOutside",
      "comment": {
       "raw": [
        "If true, prevent modal window closing by click outside modal",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:PickerModalScalarProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PickerModalScalarProps",
     "nameFull": "PickerModalScalarProps<TId, TItem>"
    },
    "src": "uui-components/src/pickers/hooks/types.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "{ selectionMode: 'single'; valueType: 'id'; initialValue: TId; } & IModal<TId, any> | { selectionMode: 'single'; valueType: 'entity'; initialValue: TItem; } & IModal<TItem, any>",
     "print": [
      "type PickerModalScalarProps<TId, TItem> = ({",
      "    selectionMode: 'single';",
      "    valueType: 'id';",
      "    initialValue: TId;",
      "} & IModal<TId>) | ({",
      "    selectionMode: 'single';",
      "    valueType: 'entity';",
      "    initialValue: TItem;",
      "} & IModal<TItem>);"
     ]
    },
    "props": [
     {
      "uid": "selectionMode",
      "name": "selectionMode",
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "required": true
     },
     {
      "uid": "valueType",
      "name": "valueType",
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "required": true
     },
     {
      "uid": "initialValue",
      "name": "initialValue",
      "typeValue": {
       "raw": "TId"
      },
      "required": true
     },
     {
      "uid": "isActive",
      "name": "isActive",
      "comment": {
       "raw": [
        "Indicates whether the modal is currently displayed"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the modal"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "zIndex",
      "name": "zIndex",
      "comment": {
       "raw": [
        "Modal zIndex value. Calculated via LayoutContext."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "success",
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "abort",
      "name": "abort",
      "comment": {
       "raw": [
        "Call to close the modal with abort action. It's rejects `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "parameters",
      "name": "parameters",
      "comment": {
       "raw": [
        "Parameters that provided via second param of `modalContext.show` method"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": "depth",
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of current modal layer"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": "valueType_2",
      "name": "valueType",
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "required": true
     },
     {
      "uid": "initialValue_2",
      "name": "initialValue",
      "typeValue": {
       "raw": "TItem"
      },
      "required": true
     },
     {
      "uid": "success_2",
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-components:PickerTogglerProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PickerTogglerProps",
     "nameFull": "PickerTogglerProps<TItem, TId>"
    },
    "src": "uui-components/src/pickers/PickerToggler.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerTogglerProps<TItem, TId>",
     "print": [
      "interface PickerTogglerProps<TItem = any, TId = any> extends IPickerToggler<TItem, TId>, ICanFocus<HTMLElement>, IHasIcon, IHasCX, ICanBeReadonly, IHasRawProps<React.HTMLAttributes<HTMLElement>> {",
      "    cancelIcon?: Icon;",
      "    dropdownIcon?: Icon;",
      "    autoFocus?: boolean;",
      "    renderItem?(props: PickerTogglerRenderItemParams<TItem, TId>): React.ReactNode;",
      "    getName?: (item: TItem) => string;",
      "    entityName?: string;",
      "    maxItems?: number;",
      "    isSingleLine?: boolean;",
      "    pickerMode: 'single' | 'multi';",
      "    searchPosition: 'input' | 'body' | 'none';",
      "    onKeyDown?(e: React.KeyboardEvent<HTMLElement>): void;",
      "    closePickerBody(): void;",
      "    disableSearch?: boolean;",
      "    disableClear?: boolean;",
      "    minCharsToSearch?: number;",
      "    /**",
      "    * HTML ID attribute for the toggler input",
      "    */",
      "    id?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "cancelIcon",
      "name": "cancelIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "autoFocus",
      "name": "autoFocus",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "renderItem",
      "name": "renderItem",
      "typeValue": {
       "raw": "(props: PickerTogglerRenderItemParams<TItem, TId>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "getName",
      "name": "getName",
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "entityName",
      "name": "entityName",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "maxItems",
      "name": "maxItems",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "isSingleLine",
      "name": "isSingleLine",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "pickerMode",
      "name": "pickerMode",
      "typeValue": {
       "raw": "'multi' | 'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi",
        "single"
       ]
      },
      "required": true
     },
     {
      "uid": "searchPosition",
      "name": "searchPosition",
      "typeValue": {
       "raw": "'body' | 'input' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "body",
        "input",
        "none"
       ]
      },
      "required": true
     },
     {
      "uid": "onKeyDown",
      "name": "onKeyDown",
      "typeValue": {
       "raw": "(e: React.KeyboardEvent<HTMLElement>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "closePickerBody",
      "name": "closePickerBody",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "disableSearch",
      "name": "disableSearch",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "disableClear",
      "name": "disableClear",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "minCharsToSearch",
      "name": "minCharsToSearch",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID attribute for the toggler input"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "selection",
      "name": "selection",
      "comment": {
       "raw": [
        "Array of selected rows"
       ]
      },
      "typeValue": {
       "raw": "DataRowProps<TItem, TId>[]"
      },
      "from": "@epam/uui-core:IPickerToggler",
      "required": false
     },
     {
      "uid": "selectedRowsCount",
      "name": "selectedRowsCount",
      "comment": {
       "raw": [
        "Amount of selected items"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IPickerToggler",
      "required": false
     },
     {
      "uid": "onClear",
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IBasicPickerToggler",
      "required": false
     },
     {
      "uid": "toggleDropdownOpening",
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownTogglerProps",
      "required": false
     },
     {
      "uid": "isInteractedOutside",
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownTogglerProps",
      "required": false
     },
     {
      "uid": "ref",
      "name": "ref",
      "comment": {
       "raw": [
        "Toggler component ref"
       ]
      },
      "typeValue": {
       "raw": "null | React.RefObject<any> | (instance: any) => void"
      },
      "from": "@epam/uui-core:IDropdownTogglerProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "placeholder",
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:PickerTogglerRenderItemParams": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PickerTogglerRenderItemParams",
     "nameFull": "PickerTogglerRenderItemParams<TItem, TId>"
    },
    "src": "uui-components/src/pickers/PickerToggler.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerTogglerRenderItemParams<TItem, TId>",
     "print": [
      "interface PickerTogglerRenderItemParams<TItem, TId> extends IHasCaption, IDisableable {",
      "    /** Key for the component */",
      "    key: string;",
      "    /** DataRowProps object of the rendered item */",
      "    rowProps?: DataRowProps<TItem, TId>;",
      "    /** Indicates that tag is collapsed rest selected items, like '+N items selected' */",
      "    isCollapsed?: boolean;",
      "    /** Call to clear a value */",
      "    onClear?(e?: any): void;",
      "    /**",
      "     * The array of rows that are folded in the 'collapsed button'",
      "     * (only in selectionMode='multi' with maxItems property, in other ways it's an empty array)",
      "     */",
      "    collapsedRows?: DataRowProps<TItem, TId>[];",
      "}"
     ]
    },
    "props": [
     {
      "uid": "key",
      "name": "key",
      "comment": {
       "raw": [
        "Key for the component"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": "rowProps",
      "name": "rowProps",
      "comment": {
       "raw": [
        "DataRowProps object of the rendered item"
       ]
      },
      "typeValue": {
       "raw": "DataRowProps<TItem, TId>"
      },
      "required": false
     },
     {
      "uid": "isCollapsed",
      "name": "isCollapsed",
      "comment": {
       "raw": [
        "Indicates that tag is collapsed rest selected items, like '+N items selected'"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "onClear",
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear a value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "collapsedRows",
      "name": "collapsedRows",
      "comment": {
       "raw": [
        "The array of rows that are folded in the 'collapsed button'",
        " (only in selectionMode='multi' with maxItems property, in other ways it's an empty array)"
       ]
      },
      "typeValue": {
       "raw": "DataRowProps<TItem, TId>[]"
      },
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:PortalProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PortalProps",
     "nameFull": "PortalProps"
    },
    "src": "uui-components/src/overlays/Portal.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PortalProps",
     "print": [
      "interface PortalProps extends IHasChildren {",
      "    /** Element where portal content will be rendered",
      "     * By default, it will be node with 'main' or 'root' id or document.body",
      "     * */",
      "    target?: HTMLElement;",
      "    /** Key of portal component */",
      "    key?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Element where portal content will be rendered",
        " By default, it will be node with 'main' or 'root' id or document.body"
       ]
      },
      "typeValue": {
       "raw": "HTMLElement"
      },
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "comment": {
       "raw": [
        "Key of portal component"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:PositionValues": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "PositionValues",
     "nameFull": "PositionValues"
    },
    "src": "uui-components/src/layout/ScrollBars.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PositionValues",
     "print": [
      "interface PositionValues extends positionValues {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "top",
      "name": "top",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:positionValues",
      "required": true
     },
     {
      "uid": "left",
      "name": "left",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:positionValues",
      "required": true
     },
     {
      "uid": "clientWidth",
      "name": "clientWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:positionValues",
      "required": true
     },
     {
      "uid": "clientHeight",
      "name": "clientHeight",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:positionValues",
      "required": true
     },
     {
      "uid": "scrollWidth",
      "name": "scrollWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:positionValues",
      "required": true
     },
     {
      "uid": "scrollHeight",
      "name": "scrollHeight",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:positionValues",
      "required": true
     },
     {
      "uid": "scrollLeft",
      "name": "scrollLeft",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:positionValues",
      "required": true
     },
     {
      "uid": "scrollTop",
      "name": "scrollTop",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:positionValues",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:ProgressBarProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "ProgressBarProps",
     "nameFull": "ProgressBarProps"
    },
    "src": "uui-components/src/widgets/Loaders/ProgressBar.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ProgressBarProps",
     "print": [
      "interface ProgressBarProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    progress: number;",
      "    label?: string;",
      "    hideLabel?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "progress",
      "name": "progress",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": "label",
      "name": "label",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "hideLabel",
      "name": "hideLabel",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:RadioInputProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "RadioInputProps",
     "nameFull": "RadioInputProps"
    },
    "src": "uui-components/src/inputs/RadioInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "RadioInputProps",
     "print": [
      "type RadioInputProps = IHasCX & IDisableable & IEditable<boolean> & IHasLabel & ICanBeReadonly & IAnalyticableOnChange<boolean> & IHasRawProps<React.LabelHTMLAttributes<HTMLLabelElement>> & ICanFocus<HTMLInputElement> & IHasTabIndex & {",
      "    /** Icon for radio input selected state.",
      "     * Usually it has a default implementation in skins, so providing this is only necessary if you want to replace the default icon",
      "     */",
      "    icon?: Icon;",
      "    /** Render callback for checkbox label.",
      "     * If omitted, 'label' prop value will be rendered.",
      "     */",
      "    renderLabel?(): React.ReactNode;",
      "    /** ID to put on 'input' node */",
      "    id?: string;",
      "    /** Defines native HTML name attribute for the input */",
      "    name?: string;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "label",
      "name": "label",
      "comment": {
       "raw": [
        "Component label. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in labels."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasLabel",
      "required": false
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean | null, oldValue: boolean | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.LabelHTMLAttributes<HTMLLabelElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon for radio input selected state.",
        " Usually it has a default implementation in skins, so providing this is only necessary if you want to replace the default icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "renderLabel",
      "name": "renderLabel",
      "comment": {
       "raw": [
        "Render callback for checkbox label.",
        " If omitted, 'label' prop value will be rendered."
       ]
      },
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "ID to put on 'input' node"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "name",
      "name": "name",
      "comment": {
       "raw": [
        "Defines native HTML name attribute for the input"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:RangeDatePickerPresets": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "RangeDatePickerPresets",
     "nameFull": "RangeDatePickerPresets"
    },
    "src": "uui-components/src/inputs/DatePicker/CalendarPresets.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "RangeDatePickerPresets",
     "print": [
      "type RangeDatePickerPresets = {",
      "    /**",
      "     * Preset config",
      "     */",
      "    [key: string]: {",
      "        /**",
      "         * Name of the preset to display in rangeDatePicker body",
      "         */",
      "        name: React.ReactNode;",
      "        /**",
      "         * A pure function that gets range value which will be applied by preset selection",
      "         */",
      "        getRange: () => RangeDatePickerPresetValue;",
      "    };",
      "};"
     ]
    },
    "props": [
     {
      "uid": "[key: string]",
      "name": "[key: string]",
      "comment": {
       "raw": [
        "Preset config"
       ]
      },
      "typeValue": {
       "raw": "{ name: React.ReactNode; getRange: () => RangeDatePickerPresetValue; }"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:RangeDatePickerPresetValue": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "RangeDatePickerPresetValue",
     "nameFull": "RangeDatePickerPresetValue"
    },
    "src": "uui-components/src/inputs/DatePicker/CalendarPresets.tsx",
    "comment": {
     "raw": [
      "Represents RangeDatePickerPresetValue"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "RangeDatePickerPresetValue",
     "print": [
      "/**",
      " * Represents RangeDatePickerPresetValue",
      " */",
      "interface RangeDatePickerPresetValue {",
      "    /**",
      "     * Range from value",
      "     */",
      "    from?: string;",
      "    /**",
      "     * Range to value",
      "     */",
      "    to?: string;",
      "    /**",
      "     * Preset order in presets list",
      "     */",
      "    order?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "from",
      "name": "from",
      "comment": {
       "raw": [
        "Range from value"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "to",
      "name": "to",
      "comment": {
       "raw": [
        "Range to value"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "order",
      "name": "order",
      "comment": {
       "raw": [
        "Preset order in presets list"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:RangeSliderProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "RangeSliderProps",
     "nameFull": "RangeSliderProps"
    },
    "src": "uui-components/src/inputs/Slider/RangeSlider.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "RangeSliderProps",
     "print": [
      "interface RangeSliderProps extends SliderBaseProps<RangeSliderValue> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "min",
      "name": "min",
      "comment": {
       "raw": [
        "Min value (when slider is at leftmost position)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": true
     },
     {
      "uid": "max",
      "name": "max",
      "comment": {
       "raw": [
        "Max value (when slider is at rightmost position)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": true
     },
     {
      "uid": "step",
      "name": "step",
      "comment": {
       "raw": [
        "Value change step"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": true
     },
     {
      "uid": "splitAt",
      "name": "splitAt",
      "comment": {
       "raw": [
        "Slider renders a label at each splitAt position"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": false
     },
     {
      "uid": "renderLabel",
      "name": "renderLabel",
      "comment": {
       "raw": [
        "Overrides rendering of values labels"
       ]
      },
      "typeValue": {
       "raw": "(value: number) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": false
     },
     {
      "uid": "showTooltip",
      "name": "showTooltip",
      "comment": {
       "raw": [
        "Toggles rendering of tooltip with current value"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "RangeSliderValue"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: RangeSliderValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:RatingProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "RatingProps",
     "nameFull": "RatingProps"
    },
    "src": "uui-components/src/inputs/Rating/Rating.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "RatingProps",
     "print": [
      "interface RatingProps extends BaseRatingProps<number> {",
      "    filledStarIcon?: Icon;",
      "    emptyStarIcon?: Icon;",
      "    hideTooltip?: boolean;",
      "    hint?: (value: number) => string;",
      "    Tooltip?: React.ComponentType<TooltipProps>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "filledStarIcon",
      "name": "filledStarIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "emptyStarIcon",
      "name": "emptyStarIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "hideTooltip",
      "name": "hideTooltip",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "hint",
      "name": "hint",
      "typeValue": {
       "raw": "(value: number) => string"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "Tooltip",
      "name": "Tooltip",
      "typeValue": {
       "raw": "React.ComponentClass<TooltipProps, any> | React.FunctionComponent<TooltipProps>"
      },
      "required": false
     },
     {
      "uid": "from",
      "name": "from",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:BaseRatingProps",
      "required": false
     },
     {
      "uid": "to",
      "name": "to",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:BaseRatingProps",
      "required": false
     },
     {
      "uid": "step",
      "name": "step",
      "comment": {
       "raw": [
        "@default 1"
       ],
       "tags": {
        "@default": 1
       }
      },
      "typeValue": {
       "raw": "0.5 | 1"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        0.5,
        1
       ]
      },
      "from": "@epam/uui-components:BaseRatingProps",
      "required": false
     },
     {
      "uid": "renderRating",
      "name": "renderRating",
      "typeValue": {
       "raw": "(rating: number, markWidth: number, numberOfMarks: number) => React.ReactNode"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:BaseRatingProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:RichTextViewProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "RichTextViewProps",
     "nameFull": "RichTextViewProps"
    },
    "src": "uui-components/src/typography/RichTextView.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "RichTextViewProps",
     "print": [
      "interface RichTextViewProps extends IHasCX, IHasChildren, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    /** HTML content to be rendered */",
      "    htmlContent?: any;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "htmlContent",
      "name": "htmlContent",
      "comment": {
       "raw": [
        "HTML content to be rendered"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:ScrollbarProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "ScrollbarProps",
     "nameFull": "ScrollbarProps"
    },
    "src": "uui-components/src/layout/ScrollBars.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ScrollbarProps",
     "print": [
      "interface ScrollbarProps extends IHasCX, Omit<LibScrollbarProps, 'ref'>, IHasRawProps<Scrollbars> {",
      "    /** If true, shadow will be added to the top of container, in case when scroll isn't in top position */",
      "    hasTopShadow?: boolean;",
      "    /** If true, shadow will be added to the bottom of container, in case when scroll isn't in bottom position */",
      "    hasBottomShadow?: boolean;",
      "    /** Render callback for the scroll container.",
      "     *",
      "     * If omitted, default uui implementation with flex container will be rendered.",
      "     */",
      "    renderView?: (props: any) => React.ReactElement;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "hasTopShadow",
      "name": "hasTopShadow",
      "comment": {
       "raw": [
        "If true, shadow will be added to the top of container, in case when scroll isn't in top position"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "hasBottomShadow",
      "name": "hasBottomShadow",
      "comment": {
       "raw": [
        "If true, shadow will be added to the bottom of container, in case when scroll isn't in bottom position"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "renderView",
      "name": "renderView",
      "comment": {
       "raw": [
        "Render callback for the scroll container.",
        "",
        " If omitted, default uui implementation with flex container will be rendered."
       ]
      },
      "typeValue": {
       "raw": "(props: any) => React.ReactElement<any, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "hidden",
      "name": "hidden",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "start",
      "name": "start",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "typeValue": {
       "raw": "string | number | readonly string[]"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "autoFocus",
      "name": "autoFocus",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "as",
      "name": "as",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "cite",
      "name": "cite",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "data",
      "name": "data",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "form",
      "name": "form",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "label",
      "name": "label",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "slot",
      "name": "slot",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "span",
      "name": "span",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "style",
      "name": "style",
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": "summary",
      "name": "summary",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "title",
      "name": "title",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "pattern",
      "name": "pattern",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "list",
      "name": "list",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "step",
      "name": "step",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": "placeholder",
      "name": "placeholder",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "onScroll",
      "name": "onScroll",
      "typeValue": {
       "raw": "React.UIEventHandler<any>"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": "onScrollFrame",
      "name": "onScrollFrame",
      "typeValue": {
       "raw": "(values: ReactCustomScrollbars.positionValues) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": "onScrollStart",
      "name": "onScrollStart",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": "onScrollStop",
      "name": "onScrollStop",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": "onUpdate",
      "name": "onUpdate",
      "typeValue": {
       "raw": "(values: ReactCustomScrollbars.positionValues) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": "renderTrackHorizontal",
      "name": "renderTrackHorizontal",
      "typeValue": {
       "raw": "React.ComponentClass<any, any> | React.FunctionComponent<any>"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": "renderTrackVertical",
      "name": "renderTrackVertical",
      "typeValue": {
       "raw": "React.ComponentClass<any, any> | React.FunctionComponent<any>"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": "renderThumbHorizontal",
      "name": "renderThumbHorizontal",
      "typeValue": {
       "raw": "React.ComponentClass<any, any> | React.FunctionComponent<any>"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": "renderThumbVertical",
      "name": "renderThumbVertical",
      "typeValue": {
       "raw": "React.ComponentClass<any, any> | React.FunctionComponent<any>"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": "tagName",
      "name": "tagName",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": "hideTracksWhenNotNeeded",
      "name": "hideTracksWhenNotNeeded",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": "autoHide",
      "name": "autoHide",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": "autoHideTimeout",
      "name": "autoHideTimeout",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": "autoHideDuration",
      "name": "autoHideDuration",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": "thumbSize",
      "name": "thumbSize",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": "thumbMinSize",
      "name": "thumbMinSize",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": "universal",
      "name": "universal",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": "autoHeight",
      "name": "autoHeight",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": "autoHeightMin",
      "name": "autoHeightMin",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": "autoHeightMax",
      "name": "autoHeightMax",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps",
      "required": false
     },
     {
      "uid": "accept",
      "name": "accept",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "acceptCharset",
      "name": "acceptCharset",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "action",
      "name": "action",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "allowFullScreen",
      "name": "allowFullScreen",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "allowTransparency",
      "name": "allowTransparency",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "alt",
      "name": "alt",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "async",
      "name": "async",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "autoComplete",
      "name": "autoComplete",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "autoPlay",
      "name": "autoPlay",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "capture",
      "name": "capture",
      "typeValue": {
       "raw": "boolean | 'user' | 'environment'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "user",
        "environment"
       ]
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "cellPadding",
      "name": "cellPadding",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "cellSpacing",
      "name": "cellSpacing",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "charSet",
      "name": "charSet",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "challenge",
      "name": "challenge",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "checked",
      "name": "checked",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "classID",
      "name": "classID",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "cols",
      "name": "cols",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "colSpan",
      "name": "colSpan",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "content",
      "name": "content",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "controls",
      "name": "controls",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "coords",
      "name": "coords",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "crossOrigin",
      "name": "crossOrigin",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "dateTime",
      "name": "dateTime",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "default",
      "name": "default",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "defer",
      "name": "defer",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "disabled",
      "name": "disabled",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "download",
      "name": "download",
      "typeValue": {
       "raw": "any"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "encType",
      "name": "encType",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "formAction",
      "name": "formAction",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "formEncType",
      "name": "formEncType",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "formMethod",
      "name": "formMethod",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "formNoValidate",
      "name": "formNoValidate",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "formTarget",
      "name": "formTarget",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "frameBorder",
      "name": "frameBorder",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "headers",
      "name": "headers",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "height",
      "name": "height",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "high",
      "name": "high",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "hrefLang",
      "name": "hrefLang",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "htmlFor",
      "name": "htmlFor",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "httpEquiv",
      "name": "httpEquiv",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "integrity",
      "name": "integrity",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "keyParams",
      "name": "keyParams",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "keyType",
      "name": "keyType",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "kind",
      "name": "kind",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "loop",
      "name": "loop",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "low",
      "name": "low",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "manifest",
      "name": "manifest",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "marginHeight",
      "name": "marginHeight",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "marginWidth",
      "name": "marginWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "max",
      "name": "max",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "maxLength",
      "name": "maxLength",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "media",
      "name": "media",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "mediaGroup",
      "name": "mediaGroup",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "method",
      "name": "method",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "min",
      "name": "min",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "minLength",
      "name": "minLength",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "multiple",
      "name": "multiple",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "muted",
      "name": "muted",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "name",
      "name": "name",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "noValidate",
      "name": "noValidate",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "open",
      "name": "open",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "optimum",
      "name": "optimum",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "playsInline",
      "name": "playsInline",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "poster",
      "name": "poster",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "preload",
      "name": "preload",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "readOnly",
      "name": "readOnly",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "rel",
      "name": "rel",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "required",
      "name": "required",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "reversed",
      "name": "reversed",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "rows",
      "name": "rows",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "rowSpan",
      "name": "rowSpan",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "sandbox",
      "name": "sandbox",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "scope",
      "name": "scope",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "scoped",
      "name": "scoped",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "scrolling",
      "name": "scrolling",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "seamless",
      "name": "seamless",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "selected",
      "name": "selected",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "shape",
      "name": "shape",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "sizes",
      "name": "sizes",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "src",
      "name": "src",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "srcDoc",
      "name": "srcDoc",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "srcLang",
      "name": "srcLang",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "srcSet",
      "name": "srcSet",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "type",
      "name": "type",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "useMap",
      "name": "useMap",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "width",
      "name": "width",
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "wmode",
      "name": "wmode",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "wrap",
      "name": "wrap",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AllHTMLAttributes",
      "required": false
     },
     {
      "uid": "defaultChecked",
      "name": "defaultChecked",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "defaultValue",
      "name": "defaultValue",
      "typeValue": {
       "raw": "string | number | readonly string[]"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "suppressContentEditableWarning",
      "name": "suppressContentEditableWarning",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "suppressHydrationWarning",
      "name": "suppressHydrationWarning",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "accessKey",
      "name": "accessKey",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "className",
      "name": "className",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "contentEditable",
      "name": "contentEditable",
      "typeValue": {
       "raw": "boolean | 'inherit' | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "inherit",
        "true",
        "false"
       ]
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "contextMenu",
      "name": "contextMenu",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "dir",
      "name": "dir",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "draggable",
      "name": "draggable",
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "lang",
      "name": "lang",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "nonce",
      "name": "nonce",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "spellCheck",
      "name": "spellCheck",
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "translate",
      "name": "translate",
      "typeValue": {
       "raw": "'yes' | 'no'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "yes",
        "no"
       ]
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "radioGroup",
      "name": "radioGroup",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "role",
      "name": "role",
      "typeValue": {
       "raw": "string & {} | 'article' | 'button' | 'dialog' | 'figure' | 'form' | 'img' | 'link' | 'main' | 'menu' | 'menuitem' | 'option' | 'table' | 'switch' | 'search' | 'checkbox' | 'radio' | 'alert' | 'alertdialog' | 'application' | 'banner' | 'cell' | 'columnheader' | 'combobox' | 'complementary' | 'contentinfo' | 'definition' | 'directory' | 'document' | 'feed' | 'grid' | 'gridcell' | 'group' | 'heading' | 'list' | 'listbox' | 'listitem' | 'log' | 'marquee' | 'math' | 'menubar' | 'menuitemcheckbox' | 'menuitemradio' | 'navigation' | 'none' | 'note' | 'presentation' | 'progressbar' | 'radiogroup' | 'region' | 'row' | 'rowgroup' | 'rowheader' | 'scrollbar' | 'searchbox' | 'separator' | 'slider' | 'spinbutton' | 'status' | 'tab' | 'tablist' | 'tabpanel' | 'term' | 'textbox' | 'timer' | 'toolbar' | 'tooltip' | 'tree' | 'treegrid' | 'treeitem'"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "about",
      "name": "about",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "datatype",
      "name": "datatype",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "inlist",
      "name": "inlist",
      "typeValue": {
       "raw": "any"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "prefix",
      "name": "prefix",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "property",
      "name": "property",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "resource",
      "name": "resource",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "typeof",
      "name": "typeof",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "vocab",
      "name": "vocab",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "autoCapitalize",
      "name": "autoCapitalize",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "autoCorrect",
      "name": "autoCorrect",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "autoSave",
      "name": "autoSave",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "itemProp",
      "name": "itemProp",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "itemScope",
      "name": "itemScope",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "itemType",
      "name": "itemType",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "itemID",
      "name": "itemID",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "itemRef",
      "name": "itemRef",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "results",
      "name": "results",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "security",
      "name": "security",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "unselectable",
      "name": "unselectable",
      "typeValue": {
       "raw": "'on' | 'off'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "on",
        "off"
       ]
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "inputMode",
      "name": "inputMode",
      "comment": {
       "raw": [
        "Hints at the type of data that might be entered by the user while editing the element or its contents",
        " @see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute"
       ]
      },
      "typeValue": {
       "raw": "'text' | 'search' | 'email' | 'tel' | 'url' | 'none' | 'numeric' | 'decimal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "text",
        "search",
        "email",
        "tel",
        "url",
        "none",
        "numeric",
        "decimal"
       ]
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "is",
      "name": "is",
      "comment": {
       "raw": [
        "Specify that a standard HTML element should behave like a defined custom built-in element",
        " @see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:HTMLAttributes",
      "required": false
     },
     {
      "uid": "'aria-activedescendant'",
      "name": "'aria-activedescendant'",
      "comment": {
       "raw": [
        "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-atomic'",
      "name": "'aria-atomic'",
      "comment": {
       "raw": [
        "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-autocomplete'",
      "name": "'aria-autocomplete'",
      "comment": {
       "raw": [
        "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be",
        " presented if they are made."
       ]
      },
      "typeValue": {
       "raw": "'list' | 'none' | 'inline' | 'both'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "list",
        "none",
        "inline",
        "both"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-busy'",
      "name": "'aria-busy'",
      "comment": {
       "raw": [
        "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-checked'",
      "name": "'aria-checked'",
      "comment": {
       "raw": [
        "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.",
        " @see aria-pressed @see aria-selected."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false' | 'mixed'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false",
        "mixed"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-colcount'",
      "name": "'aria-colcount'",
      "comment": {
       "raw": [
        "Defines the total number of columns in a table, grid, or treegrid.",
        " @see aria-colindex."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-colindex'",
      "name": "'aria-colindex'",
      "comment": {
       "raw": [
        "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.",
        " @see aria-colcount @see aria-colspan."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-colspan'",
      "name": "'aria-colspan'",
      "comment": {
       "raw": [
        "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.",
        " @see aria-colindex @see aria-rowspan."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-controls'",
      "name": "'aria-controls'",
      "comment": {
       "raw": [
        "Identifies the element (or elements) whose contents or presence are controlled by the current element.",
        " @see aria-owns."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-current'",
      "name": "'aria-current'",
      "comment": {
       "raw": [
        "Indicates the element that represents the current item within a container or set of related elements."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'time' | 'date' | 'true' | 'false' | 'page' | 'step' | 'location'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "time",
        "date",
        "true",
        "false",
        "page",
        "step",
        "location"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-describedby'",
      "name": "'aria-describedby'",
      "comment": {
       "raw": [
        "Identifies the element (or elements) that describes the object.",
        " @see aria-labelledby"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-details'",
      "name": "'aria-details'",
      "comment": {
       "raw": [
        "Identifies the element that provides a detailed, extended description for the object.",
        " @see aria-describedby."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-disabled'",
      "name": "'aria-disabled'",
      "comment": {
       "raw": [
        "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.",
        " @see aria-hidden @see aria-readonly."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-dropeffect'",
      "name": "'aria-dropeffect'",
      "comment": {
       "raw": [
        "Indicates what functions can be performed when a dragged object is released on the drop target.",
        " @deprecated in ARIA 1.1"
       ],
       "tags": {
        "@deprecated": "in ARIA 1.1"
       }
      },
      "typeValue": {
       "raw": "'link' | 'none' | 'copy' | 'execute' | 'move' | 'popup'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "link",
        "none",
        "copy",
        "execute",
        "move",
        "popup"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-errormessage'",
      "name": "'aria-errormessage'",
      "comment": {
       "raw": [
        "Identifies the element that provides an error message for the object.",
        " @see aria-invalid @see aria-describedby."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-expanded'",
      "name": "'aria-expanded'",
      "comment": {
       "raw": [
        "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-flowto'",
      "name": "'aria-flowto'",
      "comment": {
       "raw": [
        "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,",
        " allows assistive technology to override the general default of reading in document source order."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-grabbed'",
      "name": "'aria-grabbed'",
      "comment": {
       "raw": [
        "Indicates an element's \"grabbed\" state in a drag-and-drop operation.",
        " @deprecated in ARIA 1.1"
       ],
       "tags": {
        "@deprecated": "in ARIA 1.1"
       }
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-haspopup'",
      "name": "'aria-haspopup'",
      "comment": {
       "raw": [
        "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'dialog' | 'menu' | 'true' | 'false' | 'grid' | 'listbox' | 'tree'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "dialog",
        "menu",
        "true",
        "false",
        "grid",
        "listbox",
        "tree"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-hidden'",
      "name": "'aria-hidden'",
      "comment": {
       "raw": [
        "Indicates whether the element is exposed to an accessibility API.",
        " @see aria-disabled."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-invalid'",
      "name": "'aria-invalid'",
      "comment": {
       "raw": [
        "Indicates the entered value does not conform to the format expected by the application.",
        " @see aria-errormessage."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false' | 'grammar' | 'spelling'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false",
        "grammar",
        "spelling"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-keyshortcuts'",
      "name": "'aria-keyshortcuts'",
      "comment": {
       "raw": [
        "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-label'",
      "name": "'aria-label'",
      "comment": {
       "raw": [
        "Defines a string value that labels the current element.",
        " @see aria-labelledby."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-labelledby'",
      "name": "'aria-labelledby'",
      "comment": {
       "raw": [
        "Identifies the element (or elements) that labels the current element.",
        " @see aria-describedby."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-level'",
      "name": "'aria-level'",
      "comment": {
       "raw": [
        "Defines the hierarchical level of an element within a structure."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-live'",
      "name": "'aria-live'",
      "comment": {
       "raw": [
        "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
       ]
      },
      "typeValue": {
       "raw": "'off' | 'assertive' | 'polite'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "off",
        "assertive",
        "polite"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-modal'",
      "name": "'aria-modal'",
      "comment": {
       "raw": [
        "Indicates whether an element is modal when displayed."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-multiline'",
      "name": "'aria-multiline'",
      "comment": {
       "raw": [
        "Indicates whether a text box accepts multiple lines of input or only a single line."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-multiselectable'",
      "name": "'aria-multiselectable'",
      "comment": {
       "raw": [
        "Indicates that the user may select more than one item from the current selectable descendants."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-orientation'",
      "name": "'aria-orientation'",
      "comment": {
       "raw": [
        "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."
       ]
      },
      "typeValue": {
       "raw": "'horizontal' | 'vertical'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "horizontal",
        "vertical"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-owns'",
      "name": "'aria-owns'",
      "comment": {
       "raw": [
        "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship",
        " between DOM elements where the DOM hierarchy cannot be used to represent the relationship.",
        " @see aria-controls."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-placeholder'",
      "name": "'aria-placeholder'",
      "comment": {
       "raw": [
        "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.",
        " A hint could be a sample value or a brief description of the expected format."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-posinset'",
      "name": "'aria-posinset'",
      "comment": {
       "raw": [
        "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.",
        " @see aria-setsize."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-pressed'",
      "name": "'aria-pressed'",
      "comment": {
       "raw": [
        "Indicates the current \"pressed\" state of toggle buttons.",
        " @see aria-checked @see aria-selected."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false' | 'mixed'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false",
        "mixed"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-readonly'",
      "name": "'aria-readonly'",
      "comment": {
       "raw": [
        "Indicates that the element is not editable, but is otherwise operable.",
        " @see aria-disabled."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-relevant'",
      "name": "'aria-relevant'",
      "comment": {
       "raw": [
        "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.",
        " @see aria-atomic."
       ]
      },
      "typeValue": {
       "raw": "'text' | 'additions' | 'additions removals' | 'additions text' | 'all' | 'removals' | 'removals additions' | 'removals text' | 'text additions' | 'text removals'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "text",
        "additions",
        "additions removals",
        "additions text",
        "all",
        "removals",
        "removals additions",
        "removals text",
        "text additions",
        "text removals"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-required'",
      "name": "'aria-required'",
      "comment": {
       "raw": [
        "Indicates that user input is required on the element before a form may be submitted."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-roledescription'",
      "name": "'aria-roledescription'",
      "comment": {
       "raw": [
        "Defines a human-readable, author-localized description for the role of an element."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-rowcount'",
      "name": "'aria-rowcount'",
      "comment": {
       "raw": [
        "Defines the total number of rows in a table, grid, or treegrid.",
        " @see aria-rowindex."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-rowindex'",
      "name": "'aria-rowindex'",
      "comment": {
       "raw": [
        "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.",
        " @see aria-rowcount @see aria-rowspan."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-rowspan'",
      "name": "'aria-rowspan'",
      "comment": {
       "raw": [
        "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.",
        " @see aria-rowindex @see aria-colspan."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-selected'",
      "name": "'aria-selected'",
      "comment": {
       "raw": [
        "Indicates the current \"selected\" state of various widgets.",
        " @see aria-checked @see aria-pressed."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'true' | 'false'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "true",
        "false"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-setsize'",
      "name": "'aria-setsize'",
      "comment": {
       "raw": [
        "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.",
        " @see aria-posinset."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-sort'",
      "name": "'aria-sort'",
      "comment": {
       "raw": [
        "Indicates if items in a table or grid are sorted in ascending or descending order."
       ]
      },
      "typeValue": {
       "raw": "'none' | 'ascending' | 'descending' | 'other'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "none",
        "ascending",
        "descending",
        "other"
       ]
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-valuemax'",
      "name": "'aria-valuemax'",
      "comment": {
       "raw": [
        "Defines the maximum allowed value for a range widget."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-valuemin'",
      "name": "'aria-valuemin'",
      "comment": {
       "raw": [
        "Defines the minimum allowed value for a range widget."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-valuenow'",
      "name": "'aria-valuenow'",
      "comment": {
       "raw": [
        "Defines the current value for a range widget.",
        " @see aria-valuetext."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "'aria-valuetext'",
      "name": "'aria-valuetext'",
      "comment": {
       "raw": [
        "Defines the human readable text alternative of aria-valuenow for a range widget."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@types/react:AriaAttributes",
      "required": false
     },
     {
      "uid": "dangerouslySetInnerHTML",
      "name": "dangerouslySetInnerHTML",
      "typeValue": {
       "raw": "{ __html: string; }"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCopy",
      "name": "onCopy",
      "typeValue": {
       "raw": "React.ClipboardEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCopyCapture",
      "name": "onCopyCapture",
      "typeValue": {
       "raw": "React.ClipboardEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCut",
      "name": "onCut",
      "typeValue": {
       "raw": "React.ClipboardEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCutCapture",
      "name": "onCutCapture",
      "typeValue": {
       "raw": "React.ClipboardEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPaste",
      "name": "onPaste",
      "typeValue": {
       "raw": "React.ClipboardEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPasteCapture",
      "name": "onPasteCapture",
      "typeValue": {
       "raw": "React.ClipboardEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCompositionEnd",
      "name": "onCompositionEnd",
      "typeValue": {
       "raw": "React.CompositionEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCompositionEndCapture",
      "name": "onCompositionEndCapture",
      "typeValue": {
       "raw": "React.CompositionEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCompositionStart",
      "name": "onCompositionStart",
      "typeValue": {
       "raw": "React.CompositionEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCompositionStartCapture",
      "name": "onCompositionStartCapture",
      "typeValue": {
       "raw": "React.CompositionEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCompositionUpdate",
      "name": "onCompositionUpdate",
      "typeValue": {
       "raw": "React.CompositionEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCompositionUpdateCapture",
      "name": "onCompositionUpdateCapture",
      "typeValue": {
       "raw": "React.CompositionEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "typeValue": {
       "raw": "React.FocusEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onFocusCapture",
      "name": "onFocusCapture",
      "typeValue": {
       "raw": "React.FocusEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "typeValue": {
       "raw": "React.FocusEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onBlurCapture",
      "name": "onBlurCapture",
      "typeValue": {
       "raw": "React.FocusEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onChange",
      "name": "onChange",
      "typeValue": {
       "raw": "React.FormEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onChangeCapture",
      "name": "onChangeCapture",
      "typeValue": {
       "raw": "React.FormEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onBeforeInput",
      "name": "onBeforeInput",
      "typeValue": {
       "raw": "React.FormEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onBeforeInputCapture",
      "name": "onBeforeInputCapture",
      "typeValue": {
       "raw": "React.FormEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onInput",
      "name": "onInput",
      "typeValue": {
       "raw": "React.FormEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onInputCapture",
      "name": "onInputCapture",
      "typeValue": {
       "raw": "React.FormEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onReset",
      "name": "onReset",
      "typeValue": {
       "raw": "React.FormEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onResetCapture",
      "name": "onResetCapture",
      "typeValue": {
       "raw": "React.FormEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onSubmit",
      "name": "onSubmit",
      "typeValue": {
       "raw": "React.FormEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onSubmitCapture",
      "name": "onSubmitCapture",
      "typeValue": {
       "raw": "React.FormEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onInvalid",
      "name": "onInvalid",
      "typeValue": {
       "raw": "React.FormEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onInvalidCapture",
      "name": "onInvalidCapture",
      "typeValue": {
       "raw": "React.FormEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onLoad",
      "name": "onLoad",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onLoadCapture",
      "name": "onLoadCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onError",
      "name": "onError",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onErrorCapture",
      "name": "onErrorCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onKeyDown",
      "name": "onKeyDown",
      "typeValue": {
       "raw": "React.KeyboardEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onKeyDownCapture",
      "name": "onKeyDownCapture",
      "typeValue": {
       "raw": "React.KeyboardEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onKeyPress",
      "name": "onKeyPress",
      "comment": {
       "raw": [
        "@deprecated"
       ]
      },
      "typeValue": {
       "raw": "React.KeyboardEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onKeyPressCapture",
      "name": "onKeyPressCapture",
      "comment": {
       "raw": [
        "@deprecated"
       ]
      },
      "typeValue": {
       "raw": "React.KeyboardEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onKeyUp",
      "name": "onKeyUp",
      "typeValue": {
       "raw": "React.KeyboardEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onKeyUpCapture",
      "name": "onKeyUpCapture",
      "typeValue": {
       "raw": "React.KeyboardEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onAbort",
      "name": "onAbort",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onAbortCapture",
      "name": "onAbortCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCanPlay",
      "name": "onCanPlay",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCanPlayCapture",
      "name": "onCanPlayCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCanPlayThrough",
      "name": "onCanPlayThrough",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onCanPlayThroughCapture",
      "name": "onCanPlayThroughCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDurationChange",
      "name": "onDurationChange",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDurationChangeCapture",
      "name": "onDurationChangeCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onEmptied",
      "name": "onEmptied",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onEmptiedCapture",
      "name": "onEmptiedCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onEncrypted",
      "name": "onEncrypted",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onEncryptedCapture",
      "name": "onEncryptedCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onEnded",
      "name": "onEnded",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onEndedCapture",
      "name": "onEndedCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onLoadedData",
      "name": "onLoadedData",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onLoadedDataCapture",
      "name": "onLoadedDataCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onLoadedMetadata",
      "name": "onLoadedMetadata",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onLoadedMetadataCapture",
      "name": "onLoadedMetadataCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onLoadStart",
      "name": "onLoadStart",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onLoadStartCapture",
      "name": "onLoadStartCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPause",
      "name": "onPause",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPauseCapture",
      "name": "onPauseCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPlay",
      "name": "onPlay",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPlayCapture",
      "name": "onPlayCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPlaying",
      "name": "onPlaying",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPlayingCapture",
      "name": "onPlayingCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onProgress",
      "name": "onProgress",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onProgressCapture",
      "name": "onProgressCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onRateChange",
      "name": "onRateChange",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onRateChangeCapture",
      "name": "onRateChangeCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onResize",
      "name": "onResize",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onResizeCapture",
      "name": "onResizeCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onSeeked",
      "name": "onSeeked",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onSeekedCapture",
      "name": "onSeekedCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onSeeking",
      "name": "onSeeking",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onSeekingCapture",
      "name": "onSeekingCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onStalled",
      "name": "onStalled",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onStalledCapture",
      "name": "onStalledCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onSuspend",
      "name": "onSuspend",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onSuspendCapture",
      "name": "onSuspendCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onTimeUpdate",
      "name": "onTimeUpdate",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onTimeUpdateCapture",
      "name": "onTimeUpdateCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onVolumeChange",
      "name": "onVolumeChange",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onVolumeChangeCapture",
      "name": "onVolumeChangeCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onWaiting",
      "name": "onWaiting",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onWaitingCapture",
      "name": "onWaitingCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onAuxClick",
      "name": "onAuxClick",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onAuxClickCapture",
      "name": "onAuxClickCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onClickCapture",
      "name": "onClickCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onContextMenu",
      "name": "onContextMenu",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onContextMenuCapture",
      "name": "onContextMenuCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDoubleClick",
      "name": "onDoubleClick",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDoubleClickCapture",
      "name": "onDoubleClickCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDrag",
      "name": "onDrag",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragCapture",
      "name": "onDragCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragEnd",
      "name": "onDragEnd",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragEndCapture",
      "name": "onDragEndCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragEnter",
      "name": "onDragEnter",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragEnterCapture",
      "name": "onDragEnterCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragExit",
      "name": "onDragExit",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragExitCapture",
      "name": "onDragExitCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragLeave",
      "name": "onDragLeave",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragLeaveCapture",
      "name": "onDragLeaveCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragOver",
      "name": "onDragOver",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragOverCapture",
      "name": "onDragOverCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragStart",
      "name": "onDragStart",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDragStartCapture",
      "name": "onDragStartCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDrop",
      "name": "onDrop",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onDropCapture",
      "name": "onDropCapture",
      "typeValue": {
       "raw": "React.DragEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onMouseDown",
      "name": "onMouseDown",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onMouseDownCapture",
      "name": "onMouseDownCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onMouseEnter",
      "name": "onMouseEnter",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onMouseLeave",
      "name": "onMouseLeave",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onMouseMove",
      "name": "onMouseMove",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onMouseMoveCapture",
      "name": "onMouseMoveCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onMouseOut",
      "name": "onMouseOut",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onMouseOutCapture",
      "name": "onMouseOutCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onMouseOver",
      "name": "onMouseOver",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onMouseOverCapture",
      "name": "onMouseOverCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onMouseUp",
      "name": "onMouseUp",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onMouseUpCapture",
      "name": "onMouseUpCapture",
      "typeValue": {
       "raw": "React.MouseEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onSelect",
      "name": "onSelect",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onSelectCapture",
      "name": "onSelectCapture",
      "typeValue": {
       "raw": "React.ReactEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onTouchCancel",
      "name": "onTouchCancel",
      "typeValue": {
       "raw": "React.TouchEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onTouchCancelCapture",
      "name": "onTouchCancelCapture",
      "typeValue": {
       "raw": "React.TouchEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onTouchEnd",
      "name": "onTouchEnd",
      "typeValue": {
       "raw": "React.TouchEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onTouchEndCapture",
      "name": "onTouchEndCapture",
      "typeValue": {
       "raw": "React.TouchEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onTouchMove",
      "name": "onTouchMove",
      "typeValue": {
       "raw": "React.TouchEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onTouchMoveCapture",
      "name": "onTouchMoveCapture",
      "typeValue": {
       "raw": "React.TouchEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onTouchStart",
      "name": "onTouchStart",
      "typeValue": {
       "raw": "React.TouchEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onTouchStartCapture",
      "name": "onTouchStartCapture",
      "typeValue": {
       "raw": "React.TouchEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerDown",
      "name": "onPointerDown",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerDownCapture",
      "name": "onPointerDownCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerMove",
      "name": "onPointerMove",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerMoveCapture",
      "name": "onPointerMoveCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerUp",
      "name": "onPointerUp",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerUpCapture",
      "name": "onPointerUpCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerCancel",
      "name": "onPointerCancel",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerCancelCapture",
      "name": "onPointerCancelCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerEnter",
      "name": "onPointerEnter",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerEnterCapture",
      "name": "onPointerEnterCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerLeave",
      "name": "onPointerLeave",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerLeaveCapture",
      "name": "onPointerLeaveCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerOver",
      "name": "onPointerOver",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerOverCapture",
      "name": "onPointerOverCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerOut",
      "name": "onPointerOut",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onPointerOutCapture",
      "name": "onPointerOutCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onGotPointerCapture",
      "name": "onGotPointerCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onGotPointerCaptureCapture",
      "name": "onGotPointerCaptureCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onLostPointerCapture",
      "name": "onLostPointerCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onLostPointerCaptureCapture",
      "name": "onLostPointerCaptureCapture",
      "typeValue": {
       "raw": "React.PointerEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onScrollCapture",
      "name": "onScrollCapture",
      "typeValue": {
       "raw": "React.UIEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onWheel",
      "name": "onWheel",
      "typeValue": {
       "raw": "React.WheelEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onWheelCapture",
      "name": "onWheelCapture",
      "typeValue": {
       "raw": "React.WheelEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onAnimationStart",
      "name": "onAnimationStart",
      "typeValue": {
       "raw": "React.AnimationEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onAnimationStartCapture",
      "name": "onAnimationStartCapture",
      "typeValue": {
       "raw": "React.AnimationEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onAnimationEnd",
      "name": "onAnimationEnd",
      "typeValue": {
       "raw": "React.AnimationEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onAnimationEndCapture",
      "name": "onAnimationEndCapture",
      "typeValue": {
       "raw": "React.AnimationEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onAnimationIteration",
      "name": "onAnimationIteration",
      "typeValue": {
       "raw": "React.AnimationEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onAnimationIterationCapture",
      "name": "onAnimationIterationCapture",
      "typeValue": {
       "raw": "React.AnimationEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onTransitionEnd",
      "name": "onTransitionEnd",
      "typeValue": {
       "raw": "React.TransitionEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "onTransitionEndCapture",
      "name": "onTransitionEndCapture",
      "typeValue": {
       "raw": "React.TransitionEventHandler<ReactCustomScrollbars.Scrollbars>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DOMAttributes",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "ReactCustomScrollbars.Scrollbars & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:ScrollbarsApi": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "ScrollbarsApi",
     "nameFull": "ScrollbarsApi"
    },
    "src": "uui-components/src/layout/ScrollBars.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ScrollbarsApi",
     "print": [
      "interface ScrollbarsApi extends Scrollbars {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "scrollTop",
      "name": "scrollTop",
      "typeValue": {
       "raw": "(top: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": "scrollLeft",
      "name": "scrollLeft",
      "typeValue": {
       "raw": "(left: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": "scrollToTop",
      "name": "scrollToTop",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": "scrollToBottom",
      "name": "scrollToBottom",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": "scrollToLeft",
      "name": "scrollToLeft",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": "scrollToRight",
      "name": "scrollToRight",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": "getScrollLeft",
      "name": "getScrollLeft",
      "typeValue": {
       "raw": "() => number"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": "getScrollTop",
      "name": "getScrollTop",
      "typeValue": {
       "raw": "() => number"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": "getScrollWidth",
      "name": "getScrollWidth",
      "typeValue": {
       "raw": "() => number"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": "getScrollHeight",
      "name": "getScrollHeight",
      "typeValue": {
       "raw": "() => number"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": "getClientWidth",
      "name": "getClientWidth",
      "typeValue": {
       "raw": "() => number"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": "getClientHeight",
      "name": "getClientHeight",
      "typeValue": {
       "raw": "() => number"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": "getValues",
      "name": "getValues",
      "typeValue": {
       "raw": "() => ReactCustomScrollbars.positionValues"
      },
      "editor": {
       "type": "func"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": "container",
      "name": "container",
      "typeValue": {
       "raw": "HTMLDivElement"
      },
      "from": "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars",
      "required": true
     },
     {
      "uid": "context",
      "name": "context",
      "comment": {
       "raw": [
        "If using the new style context, re-declare this in your class to be the",
        " `React.ContextType` of your `static contextType`.",
        " Should be used with type annotation or static contextType.",
        "",
        " ```ts",
        " static contextType = MyContext",
        " // For TS pre-3.7:",
        " context!: React.ContextType<typeof MyContext>",
        " // For TS 3.7 and above:",
        " declare context: React.ContextType<typeof MyContext>",
        " ```",
        "",
        " @see https://reactjs.org/docs/context.html"
       ]
      },
      "typeValue": {
       "raw": "unknown"
      },
      "from": "@types/react:Component",
      "required": true
     },
     {
      "uid": "setState",
      "name": "setState",
      "typeValue": {
       "raw": "<K>(state: {} | ((prevState: Readonly<{}>, props: Readonly<ReactCustomScrollbars.ScrollbarProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:Component",
      "required": true
     },
     {
      "uid": "forceUpdate",
      "name": "forceUpdate",
      "typeValue": {
       "raw": "(callback?: (() => void) | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:Component",
      "required": true
     },
     {
      "uid": "render",
      "name": "render",
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@types/react:Component",
      "required": true
     },
     {
      "uid": "props",
      "name": "props",
      "typeValue": {
       "raw": "Readonly<ReactCustomScrollbars.ScrollbarProps>"
      },
      "typeValueRef": "node_modules/typescript/lib/lib.es5.d.ts:Readonly",
      "from": "@types/react:Component",
      "required": true
     },
     {
      "uid": "state",
      "name": "state",
      "typeValue": {
       "raw": "Readonly<{}>"
      },
      "typeValueRef": "node_modules/typescript/lib/lib.es5.d.ts:Readonly",
      "from": "@types/react:Component",
      "required": true
     },
     {
      "uid": "refs",
      "name": "refs",
      "comment": {
       "raw": [
        "@deprecated",
        " https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: React.ReactInstance; }"
      },
      "from": "@types/react:Component",
      "required": true
     },
     {
      "uid": "componentDidMount",
      "name": "componentDidMount",
      "comment": {
       "raw": [
        "Called immediately after a component is mounted. Setting state here will trigger re-rendering."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:ComponentLifecycle",
      "required": false
     },
     {
      "uid": "shouldComponentUpdate",
      "name": "shouldComponentUpdate",
      "comment": {
       "raw": [
        "Called to determine whether the change in props and state should trigger a re-render.",
        "",
        " `Component` always returns true.",
        " `PureComponent` implements a shallow comparison on props and state and returns true if any",
        " props or states have changed.",
        "",
        " If false is returned, `Component#render`, `componentWillUpdate`",
        " and `componentDidUpdate` will not be called."
       ]
      },
      "typeValue": {
       "raw": "(nextProps: Readonly<ReactCustomScrollbars.ScrollbarProps>, nextState: Readonly<{}>, nextContext: any) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:ComponentLifecycle",
      "required": false
     },
     {
      "uid": "componentWillUnmount",
      "name": "componentWillUnmount",
      "comment": {
       "raw": [
        "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as",
        " cancelled network requests, or cleaning up any DOM elements created in `componentDidMount`."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:ComponentLifecycle",
      "required": false
     },
     {
      "uid": "componentDidCatch",
      "name": "componentDidCatch",
      "comment": {
       "raw": [
        "Catches exceptions generated in descendant components. Unhandled exceptions will cause",
        " the entire component tree to unmount."
       ]
      },
      "typeValue": {
       "raw": "(error: Error, errorInfo: React.ErrorInfo) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:ComponentLifecycle",
      "required": false
     },
     {
      "uid": "getSnapshotBeforeUpdate",
      "name": "getSnapshotBeforeUpdate",
      "comment": {
       "raw": [
        "Runs before React applies the result of `render` to the document, and",
        " returns an object to be given to componentDidUpdate. Useful for saving",
        " things such as scroll position before `render` causes changes to it.",
        "",
        " Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated",
        " lifecycle events from running."
       ]
      },
      "typeValue": {
       "raw": "(prevProps: Readonly<ReactCustomScrollbars.ScrollbarProps>, prevState: Readonly<{}>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:NewLifecycle",
      "required": false
     },
     {
      "uid": "componentDidUpdate",
      "name": "componentDidUpdate",
      "comment": {
       "raw": [
        "Called immediately after updating occurs. Not called for the initial render.",
        "",
        " The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null."
       ]
      },
      "typeValue": {
       "raw": "(prevProps: Readonly<ReactCustomScrollbars.ScrollbarProps>, prevState: Readonly<{}>, snapshot?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:NewLifecycle",
      "required": false
     },
     {
      "uid": "componentWillMount",
      "name": "componentWillMount",
      "comment": {
       "raw": [
        "Called immediately before mounting occurs, and before `Component#render`.",
        " Avoid introducing any side-effects or subscriptions in this method.",
        "",
        " Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps",
        " prevents this from being invoked.",
        "",
        " @deprecated 16.3, use componentDidMount or the constructor instead; will stop working in React 17",
        " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state",
        " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
       ],
       "tags": {
        "@deprecated": "16.3, use componentDidMount or the constructor instead; will stop working in React 17"
       }
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DeprecatedLifecycle",
      "required": false
     },
     {
      "uid": "UNSAFE_componentWillMount",
      "name": "UNSAFE_componentWillMount",
      "comment": {
       "raw": [
        "Called immediately before mounting occurs, and before `Component#render`.",
        " Avoid introducing any side-effects or subscriptions in this method.",
        "",
        " This method will not stop working in React 17.",
        "",
        " Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps",
        " prevents this from being invoked.",
        "",
        " @deprecated 16.3, use componentDidMount or the constructor instead",
        " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state",
        " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
       ],
       "tags": {
        "@deprecated": "16.3, use componentDidMount or the constructor instead"
       }
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DeprecatedLifecycle",
      "required": false
     },
     {
      "uid": "componentWillReceiveProps",
      "name": "componentWillReceiveProps",
      "comment": {
       "raw": [
        "Called when the component may be receiving new props.",
        " React may call this even if props have not changed, so be sure to compare new and existing",
        " props if you only want to handle changes.",
        "",
        " Calling `Component#setState` generally does not trigger this method.",
        "",
        " Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps",
        " prevents this from being invoked.",
        "",
        " @deprecated 16.3, use static getDerivedStateFromProps instead; will stop working in React 17",
        " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props",
        " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
       ],
       "tags": {
        "@deprecated": "16.3, use static getDerivedStateFromProps instead; will stop working in React 17"
       }
      },
      "typeValue": {
       "raw": "(nextProps: Readonly<ReactCustomScrollbars.ScrollbarProps>, nextContext: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DeprecatedLifecycle",
      "required": false
     },
     {
      "uid": "UNSAFE_componentWillReceiveProps",
      "name": "UNSAFE_componentWillReceiveProps",
      "comment": {
       "raw": [
        "Called when the component may be receiving new props.",
        " React may call this even if props have not changed, so be sure to compare new and existing",
        " props if you only want to handle changes.",
        "",
        " Calling `Component#setState` generally does not trigger this method.",
        "",
        " This method will not stop working in React 17.",
        "",
        " Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps",
        " prevents this from being invoked.",
        "",
        " @deprecated 16.3, use static getDerivedStateFromProps instead",
        " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props",
        " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
       ],
       "tags": {
        "@deprecated": "16.3, use static getDerivedStateFromProps instead"
       }
      },
      "typeValue": {
       "raw": "(nextProps: Readonly<ReactCustomScrollbars.ScrollbarProps>, nextContext: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DeprecatedLifecycle",
      "required": false
     },
     {
      "uid": "componentWillUpdate",
      "name": "componentWillUpdate",
      "comment": {
       "raw": [
        "Called immediately before rendering when new props or state is received. Not called for the initial render.",
        "",
        " Note: You cannot call `Component#setState` here.",
        "",
        " Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps",
        " prevents this from being invoked.",
        "",
        " @deprecated 16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17",
        " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update",
        " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
       ],
       "tags": {
        "@deprecated": "16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17"
       }
      },
      "typeValue": {
       "raw": "(nextProps: Readonly<ReactCustomScrollbars.ScrollbarProps>, nextState: Readonly<{}>, nextContext: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DeprecatedLifecycle",
      "required": false
     },
     {
      "uid": "UNSAFE_componentWillUpdate",
      "name": "UNSAFE_componentWillUpdate",
      "comment": {
       "raw": [
        "Called immediately before rendering when new props or state is received. Not called for the initial render.",
        "",
        " Note: You cannot call `Component#setState` here.",
        "",
        " This method will not stop working in React 17.",
        "",
        " Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps",
        " prevents this from being invoked.",
        "",
        " @deprecated 16.3, use getSnapshotBeforeUpdate instead",
        " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update",
        " @see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
       ],
       "tags": {
        "@deprecated": "16.3, use getSnapshotBeforeUpdate instead"
       }
      },
      "typeValue": {
       "raw": "(nextProps: Readonly<ReactCustomScrollbars.ScrollbarProps>, nextState: Readonly<{}>, nextContext: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@types/react:DeprecatedLifecycle",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:SelectionContextState": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "SelectionContextState",
     "nameFull": "SelectionContextState<TItem, TId, TFilter>"
    },
    "src": "uui-components/src/table/tableCellsSelection/DataTableSelectionContext.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "SelectionContextState<TItem, TId, TFilter>",
     "print": [
      "interface SelectionContextState<TItem = any, TId = any, TFilter = any> extends Pick<SelectionManager<TItem, TId, TFilter>, 'selectionRange' | 'setSelectionRange' | 'getCellSelectionInfo'> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "selectionRange",
      "name": "selectionRange",
      "typeValue": {
       "raw": "DataTableSelectionRange"
      },
      "from": "@epam/uui-components:SelectionManager",
      "required": true
     },
     {
      "uid": "setSelectionRange",
      "name": "setSelectionRange",
      "typeValue": {
       "raw": "React.Dispatch<React.SetStateAction<DataTableSelectionRange>>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:SelectionManager",
      "required": true
     },
     {
      "uid": "getCellSelectionInfo",
      "name": "getCellSelectionInfo",
      "typeValue": {
       "raw": "(row: number, column: number) => { isSelected: boolean; showTopBorder: boolean; showRightBorder: boolean; showBottomBorder: boolean; showLeftBorder: boolean; canCopyFrom: boolean; canAcceptCopy: boolean; isStartCell: boolean; }"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:SelectionManager",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:SinglePickerProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "SinglePickerProps",
     "nameFull": "SinglePickerProps<TId, TItem>"
    },
    "src": "uui-components/src/pickers/bindingHelpers.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "{ selectionMode: 'single'; valueType: 'id'; } & IEditable<TId> | { selectionMode: 'single'; valueType?: 'entity' | undefined; } & IEditable<TItem>",
     "print": [
      "type SinglePickerProps<TId, TItem> = ({",
      "    selectionMode: 'single';",
      "    valueType: 'id';",
      "} & IEditable<TId>) | ({",
      "    selectionMode: 'single';",
      "    valueType?: 'entity';",
      "} & IEditable<TItem>);"
     ]
    },
    "props": [
     {
      "uid": "selectionMode",
      "name": "selectionMode",
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "required": true
     },
     {
      "uid": "valueType",
      "name": "valueType",
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "required": true
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "valueType_2",
      "name": "valueType",
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "required": false
     },
     {
      "uid": "value_2",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_2",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-components:SliderProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "SliderProps",
     "nameFull": "SliderProps"
    },
    "src": "uui-components/src/inputs/Slider/Slider.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "SliderProps",
     "print": [
      "interface SliderProps extends SliderBaseProps<number> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "min",
      "name": "min",
      "comment": {
       "raw": [
        "Min value (when slider is at leftmost position)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": true
     },
     {
      "uid": "max",
      "name": "max",
      "comment": {
       "raw": [
        "Max value (when slider is at rightmost position)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": true
     },
     {
      "uid": "step",
      "name": "step",
      "comment": {
       "raw": [
        "Value change step"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": true
     },
     {
      "uid": "splitAt",
      "name": "splitAt",
      "comment": {
       "raw": [
        "Slider renders a label at each splitAt position"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": false
     },
     {
      "uid": "renderLabel",
      "name": "renderLabel",
      "comment": {
       "raw": [
        "Overrides rendering of values labels"
       ]
      },
      "typeValue": {
       "raw": "(value: number) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": false
     },
     {
      "uid": "showTooltip",
      "name": "showTooltip",
      "comment": {
       "raw": [
        "Toggles rendering of tooltip with current value"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:SnackbarProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "SnackbarProps",
     "nameFull": "SnackbarProps"
    },
    "src": "uui-components/src/overlays/Snackbar.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "SnackbarProps",
     "print": [
      "interface SnackbarProps extends IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    closeIcon?: Icon;",
      "    notifications?: NotificationOperation[];",
      "}"
     ]
    },
    "props": [
     {
      "uid": "closeIcon",
      "name": "closeIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "notifications",
      "name": "notifications",
      "typeValue": {
       "raw": "NotificationOperation[]"
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:SpinnerProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "SpinnerProps",
     "nameFull": "SpinnerProps"
    },
    "src": "uui-components/src/widgets/Spinner.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "SpinnerProps",
     "print": [
      "interface SpinnerProps extends SpinnerCoreProps {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:SwitchProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "SwitchProps",
     "nameFull": "SwitchProps"
    },
    "src": "uui-components/src/inputs/Switch.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "SwitchProps",
     "print": [
      "interface SwitchProps extends IHasCX, IDisableable, Omit<IEditable<boolean>, 'isInvalid'>, IHasLabel, IAnalyticableOnChange<boolean>, IHasRawProps<React.LabelHTMLAttributes<HTMLLabelElement>>, IHasTabIndex, ICanFocus<HTMLInputElement> {",
      "    /** ID to put on 'input' node */",
      "    id?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "ID to put on 'input' node"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "label",
      "name": "label",
      "comment": {
       "raw": [
        "Component label. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in labels."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasLabel",
      "required": false
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean | null, oldValue: boolean | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.LabelHTMLAttributes<HTMLLabelElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:TextAreaProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "TextAreaProps",
     "nameFull": "TextAreaProps"
    },
    "src": "uui-components/src/inputs/TextArea.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TextAreaProps",
     "print": [
      "interface TextAreaProps extends IHasCX, IEditable<string>, IHasPlaceholder, IDisableable, ICanBeReadonly, IHasRawProps<React.TextareaHTMLAttributes<HTMLDivElement>>, ICanFocus<HTMLTextAreaElement> {",
      "    /** Adjust height to fit specified number or text rows. HTML TextArea attribute. */",
      "    rows?: number;",
      "    /**",
      "     * Enables auto-resizing height to fit text. Rows prop is ignored in this mode",
      "     */",
      "    autoSize?: boolean;",
      "    /** onKeyDown event handler to put on HTML Input  */",
      "    onKeyDown?(e?: any): void;",
      "    /** Automatically sets input focus to component, when its mounted */",
      "    autoFocus?: boolean;",
      "    /** CSS class names to put to the HTML Input element */",
      "    inputCx?: CX;",
      "    /** Maximum text length, in characters */",
      "    maxLength?: number;",
      "    /** HTML id attribute to put on the HTML Input element */",
      "    id?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "rows",
      "name": "rows",
      "comment": {
       "raw": [
        "Adjust height to fit specified number or text rows. HTML TextArea attribute."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "autoSize",
      "name": "autoSize",
      "comment": {
       "raw": [
        "Enables auto-resizing height to fit text. Rows prop is ignored in this mode"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "onKeyDown",
      "name": "onKeyDown",
      "comment": {
       "raw": [
        "onKeyDown event handler to put on HTML Input"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "autoFocus",
      "name": "autoFocus",
      "comment": {
       "raw": [
        "Automatically sets input focus to component, when its mounted"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "inputCx",
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class names to put to the HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "required": false
     },
     {
      "uid": "maxLength",
      "name": "maxLength",
      "comment": {
       "raw": [
        "Maximum text length, in characters"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "HTML id attribute to put on the HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "placeholder",
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.TextareaHTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLTextAreaElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLTextAreaElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:TextInputProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "TextInputProps",
     "nameFull": "TextInputProps"
    },
    "src": "uui-components/src/inputs/TextInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TextInputProps",
     "print": [
      "interface TextInputProps extends TextInputCoreProps {",
      "    /** Overrides accept (check) icon */",
      "    acceptIcon?: Icon;",
      "    /** Overrides cancel (cross) icon */",
      "    cancelIcon?: Icon;",
      "    /** Overrides dropdown (chevron) icon */",
      "    dropdownIcon?: Icon;",
      "    /** CSS class(es) to put to the HTML Input element */",
      "    inputCx?: CX;",
      "    /** overrides rendering of HTML Input element  */",
      "    renderInput?: (props: IRenderInputProps) => JSX.Element;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "acceptIcon",
      "name": "acceptIcon",
      "comment": {
       "raw": [
        "Overrides accept (check) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "cancelIcon",
      "name": "cancelIcon",
      "comment": {
       "raw": [
        "Overrides cancel (cross) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Overrides dropdown (chevron) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "inputCx",
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put to the HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "required": false
     },
     {
      "uid": "renderInput",
      "name": "renderInput",
      "comment": {
       "raw": [
        "overrides rendering of HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "(props: IRenderInputProps) => JSX.Element"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "onCancel",
      "name": "onCancel",
      "comment": {
       "raw": [
        "Enables cancel (cross) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "onAccept",
      "name": "onAccept",
      "comment": {
       "raw": [
        "Enables accept (check) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "onKeyDown",
      "name": "onKeyDown",
      "comment": {
       "raw": [
        "keydown event handler to put on the HTML input element"
       ]
      },
      "typeValue": {
       "raw": "(e?: React.KeyboardEvent<HTMLInputElement> | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "autoFocus",
      "name": "autoFocus",
      "comment": {
       "raw": [
        "Put focus on the element, when component is mounted"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "type",
      "name": "type",
      "comment": {
       "raw": [
        "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "autoComplete",
      "name": "autoComplete",
      "comment": {
       "raw": [
        "Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "name",
      "name": "name",
      "comment": {
       "raw": [
        "Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "maxLength",
      "name": "maxLength",
      "comment": {
       "raw": [
        "Maximum input length in characters"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "inputMode",
      "name": "inputMode",
      "comment": {
       "raw": [
        "Standard [inputMode attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode}"
       ]
      },
      "typeValue": {
       "raw": "'text' | 'search' | 'email' | 'tel' | 'url' | 'none' | 'numeric' | 'decimal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "text",
        "search",
        "email",
        "tel",
        "url",
        "none",
        "numeric",
        "decimal"
       ]
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID attribute for input"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "placeholder",
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | null, oldValue: string | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLInputElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:TextProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "TextProps",
     "nameFull": "TextProps"
    },
    "src": "uui-components/src/typography/Text.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "TextProps",
     "print": [
      "type TextProps = IHasCX & IHasChildren & IClickable & IAnalyticableClick & IHasRawProps<React.HTMLAttributes<HTMLDivElement>> & IHasForwardedRef<HTMLDivElement>;"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:TooltipProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "TooltipProps",
     "nameFull": "TooltipProps"
    },
    "src": "uui-components/src/overlays/Tooltip.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TooltipProps",
     "print": [
      "interface TooltipProps extends TooltipCoreProps {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "content",
      "name": "content",
      "comment": {
       "raw": [
        "Content to show in the tooltip (ReactNode)"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "renderContent",
      "name": "renderContent",
      "comment": {
       "raw": [
        "Alternative to 'content' prop, you can pass a render function.",
        " The function will only be called when content is shown, this can save performance."
       ]
      },
      "typeValue": {
       "raw": "() => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "offset",
      "name": "offset",
      "comment": {
       "raw": [
        "See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/offset/}"
       ]
      },
      "typeValue": {
       "raw": "OffsetsFunction | [number | null | undefined, number | null | undefined]"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "React Node(s) to show tooltip for"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "maxWidth",
      "name": "maxWidth",
      "comment": {
       "raw": [
        "Max width of tooltip"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "onClose",
      "name": "onClose",
      "comment": {
       "raw": [
        "Called when dropdown was closed"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "placement",
      "name": "placement",
      "comment": {
       "raw": [
        "Defines dropdown body placement relative to target"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left' | 'top' | 'bottom' | 'auto' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left",
        "top",
        "bottom",
        "auto",
        "auto-start",
        "auto-end",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "modifiers",
      "name": "modifiers",
      "comment": {
       "raw": [
        "Original popper.js modifiers. See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/}"
       ]
      },
      "typeValue": {
       "raw": "(StrictModifier<any> | Partial<Modifier<any, object>>)[]"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "openDelay",
      "name": "openDelay",
      "comment": {
       "raw": [
        "Defines how much 'ms' user should hold mouse over target to open the dropdown",
        " This prop work only with openOnHover={true}",
        " @default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "closeDelay",
      "name": "closeDelay",
      "comment": {
       "raw": [
        "Defines after which delay dropdown will be closed, if user leave mouse from target.",
        " This prop work only with openOnHover={true}",
        " @default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "closeOnMouseLeave",
      "name": "closeOnMouseLeave",
      "comment": {
       "raw": [
        "Defined when to close dropdown in case of openOnHover={ true }",
        " toggler — dropdown will be closed when a mouse leaves the target component",
        " boundary — will not to close the dropdown when a mouse is on target or in 30px around target area",
        " false — will not close dropdown by mouse move event",
        " @default 'toggler'"
       ],
       "tags": {
        "@default": "toggler"
       }
      },
      "typeValue": {
       "raw": "false | 'toggler' | 'boundary'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        "toggler",
        "boundary"
       ]
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "portalTarget",
      "name": "portalTarget",
      "comment": {
       "raw": [
        "Node of portal target, where to render the dropdown body.",
        " By default, will be used global portal node."
       ]
      },
      "typeValue": {
       "raw": "HTMLElement"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "boundaryElement",
      "name": "boundaryElement",
      "comment": {
       "raw": [
        "Element relative to which dropdown will calculate position"
       ]
      },
      "typeValue": {
       "raw": "HTMLElement | HTMLElement[] | 'clippingParents'"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "closeBodyOnTogglerHidden",
      "name": "closeBodyOnTogglerHidden",
      "comment": {
       "raw": [
        "Pass false, if you do not want to close the dropdown in case Toggler move out of viewport.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:TreeListItem": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "TreeListItem",
     "nameFull": "TreeListItem"
    },
    "src": "uui-components/src/layout/Tree.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TreeListItem",
     "print": [
      "interface TreeListItem {",
      "    id: string;",
      "    data?: TreeListItem;",
      "    parentId?: string;",
      "    name?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "id",
      "name": "id",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": "data",
      "name": "data",
      "typeValue": {
       "raw": "TreeListItem"
      },
      "required": false
     },
     {
      "uid": "parentId",
      "name": "parentId",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "name",
      "name": "name",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:TreeProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "TreeProps",
     "nameFull": "TreeProps<TItem>"
    },
    "src": "uui-components/src/layout/Tree.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TreeProps<TItem>",
     "print": [
      "interface TreeProps<TItem extends TreeListItem> extends IHasCX, IHasChildren {",
      "    items: TreeListItem[];",
      "    renderRow(row: DataRowProps<TItem, string>): void;",
      "    getSearchFields?(item: TItem): string[];",
      "    search?: string;",
      "    /**",
      "     * DataSource state.",
      "     */",
      "    value: DataSourceState<any, TItem['id']>;",
      "    /**",
      "     * DataSource state update handler.",
      "     */",
      "    onValueChange: SetDataSourceState<any, TItem['id']>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "items",
      "name": "items",
      "typeValue": {
       "raw": "TreeListItem[]"
      },
      "required": true
     },
     {
      "uid": "renderRow",
      "name": "renderRow",
      "typeValue": {
       "raw": "(row: DataRowProps<TItem, string>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "getSearchFields",
      "name": "getSearchFields",
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "search",
      "name": "search",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "DataSource state."
       ]
      },
      "typeValue": {
       "raw": "DataSourceState<any, TItem['id']>"
      },
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "DataSource state update handler."
       ]
      },
      "typeValue": {
       "raw": "SetDataSourceState<any, TItem['id']>"
      },
      "typeValueRef": "@epam/uui-core:SetDataSourceState",
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:UsePickerInputProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "UsePickerInputProps",
     "nameFull": "UsePickerInputProps<TItem, TId, TProps>"
    },
    "src": "uui-components/src/pickers/hooks/types.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType?: 'id' | undefined; } & IEditable<TId> & IAnalyticableOnChange<any> & PickerShowSelectedOnly & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & { editMode?: PickerInputEditMode | undefined; maxItems?: number | undefined; minBodyWidth?: number | undefined; isSingleLine?: boolean | undefined; dropdownPlacement?: Placement | undefined; renderToggler?: ((props: PickerTogglerProps<TItem, TId>) => React.ReactNode) | undefined; searchPosition?: PickerInputSearchPosition | undefined; disableClear?: boolean | undefined; minCharsToSearch?: number | undefined; dropdownHeight?: number | undefined; autoFocus?: boolean | undefined; rawProps?: { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; } | undefined; renderFooter?: ((props: PickerInputFooterProps<TItem, TId>) => React.ReactNode) | undefined; fixedBodyPosition?: boolean | undefined; portalTarget?: HTMLElement | undefined; inputCx?: ClassValue; bodyCx?: ClassValue; highlightSearchMatches?: boolean | undefined; searchDebounceDelay?: number | undefined; id?: string | undefined; } & TProps & { toggleModalOpening?(opened: boolean): void; shouldShowBody?(): boolean; } | PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType: 'entity'; } & IEditable<TItem> & IAnalyticableOnChange<any> & PickerShowSelectedOnly & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & { editMode?: PickerInputEditMode | undefined; maxItems?: number | undefined; minBodyWidth?: number | undefined; isSingleLine?: boolean | undefined; dropdownPlacement?: Placement | undefined; renderToggler?: ((props: PickerTogglerProps<TItem, TId>) => React.ReactNode) | undefined; searchPosition?: PickerInputSearchPosition | undefined; disableClear?: boolean | undefined; minCharsToSearch?: number | undefined; dropdownHeight?: number | undefined; autoFocus?: boolean | undefined; rawProps?: { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; } | undefined; renderFooter?: ((props: PickerInputFooterProps<TItem, TId>) => React.ReactNode) | undefined; fixedBodyPosition?: boolean | undefined; portalTarget?: HTMLElement | undefined; inputCx?: ClassValue; bodyCx?: ClassValue; highlightSearchMatches?: boolean | undefined; searchDebounceDelay?: number | undefined; id?: string | undefined; } & TProps & { toggleModalOpening?(opened: boolean): void; shouldShowBody?(): boolean; } | PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType?: 'id' | undefined; emptyValue?: [] | null | undefined; } & IEditable<TId[]> & IAnalyticableOnChange<any> & PickerShowSelectedOnly & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & { editMode?: PickerInputEditMode | undefined; maxItems?: number | undefined; minBodyWidth?: number | undefined; isSingleLine?: boolean | undefined; dropdownPlacement?: Placement | undefined; renderToggler?: ((props: PickerTogglerProps<TItem, TId>) => React.ReactNode) | undefined; searchPosition?: PickerInputSearchPosition | undefined; disableClear?: boolean | undefined; minCharsToSearch?: number | undefined; dropdownHeight?: number | undefined; autoFocus?: boolean | undefined; rawProps?: { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; } | undefined; renderFooter?: ((props: PickerInputFooterProps<TItem, TId>) => React.ReactNode) | undefined; fixedBodyPosition?: boolean | undefined; portalTarget?: HTMLElement | undefined; inputCx?: ClassValue; bodyCx?: ClassValue; highlightSearchMatches?: boolean | undefined; searchDebounceDelay?: number | undefined; id?: string | undefined; } & TProps & { toggleModalOpening?(opened: boolean): void; shouldShowBody?(): boolean; } | PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]> & IAnalyticableOnChange<any> & PickerShowSelectedOnly & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & { editMode?: PickerInputEditMode | undefined; maxItems?: number | undefined; minBodyWidth?: number | undefined; isSingleLine?: boolean | undefined; dropdownPlacement?: Placement | undefined; renderToggler?: ((props: PickerTogglerProps<TItem, TId>) => React.ReactNode) | undefined; searchPosition?: PickerInputSearchPosition | undefined; disableClear?: boolean | undefined; minCharsToSearch?: number | undefined; dropdownHeight?: number | undefined; autoFocus?: boolean | undefined; rawProps?: { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; } | undefined; renderFooter?: ((props: PickerInputFooterProps<TItem, TId>) => React.ReactNode) | undefined; fixedBodyPosition?: boolean | undefined; portalTarget?: HTMLElement | undefined; inputCx?: ClassValue; bodyCx?: ClassValue; highlightSearchMatches?: boolean | undefined; searchDebounceDelay?: number | undefined; id?: string | undefined; } & TProps & { toggleModalOpening?(opened: boolean): void; shouldShowBody?(): boolean; }",
     "print": [
      "type UsePickerInputProps<TItem, TId, TProps> = PickerInputBaseProps<TItem, TId> & TProps & {",
      "    toggleModalOpening?(opened: boolean): void;",
      "    shouldShowBody?(): boolean;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "entityName",
      "name": "entityName",
      "comment": {
       "raw": [
        "Name of the entity being selected. Affects wording like \"Please select [entity]\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "entityPluralName",
      "name": "entityPluralName",
      "comment": {
       "raw": [
        "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "dataSource",
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<TItem, TId, any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": true
     },
     {
      "uid": "getName",
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "renderRow",
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<TItem, TId>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "getRowOptions",
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "renderNotFound",
      "name": "renderNotFound",
      "comment": {
       "raw": [
        "Overrides the default 'no records found' banner.",
        " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
       ]
      },
      "typeValue": {
       "raw": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "emptyValue",
      "name": "emptyValue",
      "comment": {
       "raw": [
        "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
       ]
      },
      "typeValue": {
       "raw": "null | []"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "sortBy",
      "name": "sortBy",
      "comment": {
       "raw": [
        "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "comment": {
       "raw": [
        "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "sorting",
      "name": "sorting",
      "comment": {
       "raw": [
        "Defines sorting to pass to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "cascadeSelection",
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "isFoldedByDefault",
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "You can return true for all, or some items to fold them."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "getSearchFields",
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "ref",
      "name": "ref",
      "comment": {
       "raw": [
        "Component ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: PickerInputElement | null) => void | React.RefObject<PickerInputElement>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "selectionMode",
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": "valueType",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: any, oldValue: any) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "showSelectedOnly",
      "name": "showSelectedOnly",
      "comment": {
       "raw": [
        "Enables/disables selected rows only in Picker."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PickerShowSelectedOnly",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "placeholder",
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "editMode",
      "name": "editMode",
      "comment": {
       "raw": [
        "dropdown (default) - show selection in dropdown; modal - opens modal window to select items"
       ]
      },
      "typeValue": {
       "raw": "'dropdown' | 'modal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "dropdown",
        "modal"
       ]
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "maxItems",
      "name": "maxItems",
      "comment": {
       "raw": [
        "Maximum number of tags to display in input, before collapsing to \"N items selected\" mode"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "minBodyWidth",
      "name": "minBodyWidth",
      "comment": {
       "raw": [
        "Minimum width of dropdown body"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "isSingleLine",
      "name": "isSingleLine",
      "comment": {
       "raw": [
        "Prevents selected items tags to occupy multiple lines"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "dropdownPlacement",
      "name": "dropdownPlacement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'right' | 'left' | 'top' | 'bottom' | 'auto' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "right",
        "left",
        "top",
        "bottom",
        "auto",
        "auto-start",
        "auto-end",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "renderToggler",
      "name": "renderToggler",
      "comment": {
       "raw": [
        "Replaces default 'toggler' - an input to which Picker attaches dropdown"
       ]
      },
      "typeValue": {
       "raw": "(props: PickerTogglerProps<TItem, TId>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "searchPosition",
      "name": "searchPosition",
      "comment": {
       "raw": [
        "Defines where search field is:",
        " 'input' - try to place search inside the toggler (default for single-select),",
        " 'body' - put search inside the dropdown (default for multi-select)",
        " 'none' - disables search completely",
        "",
        " Note: 'searchPosition' cannot be 'input' if 'editMode' is 'modal'"
       ]
      },
      "typeValue": {
       "raw": "'body' | 'input' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "body",
        "input",
        "none"
       ]
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "disableClear",
      "name": "disableClear",
      "comment": {
       "raw": [
        "Disallow to clear Picker value (cross icon)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "minCharsToSearch",
      "name": "minCharsToSearch",
      "comment": {
       "raw": [
        "Minimum characters to type, before search will trigger. If input characters number is less then 'minCharsToSearch', it will disable opening dropdown body.",
        " By default search triggers after input value is changed.",
        "",
        " Note: defined minCharsToSearch isn't compatible with searchPosition=body."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "dropdownHeight",
      "name": "dropdownHeight",
      "comment": {
       "raw": [
        "Overrides default height of the dropdown body"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "autoFocus",
      "name": "autoFocus",
      "comment": {
       "raw": [
        "Sets focus to component when it's mounted"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "HTML attributes to put directly to the PickerInput parts"
       ]
      },
      "typeValue": {
       "raw": "{ input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "renderFooter",
      "name": "renderFooter",
      "comment": {
       "raw": [
        "Adds custom footer to the dropdown body"
       ]
      },
      "typeValue": {
       "raw": "(props: PickerInputFooterProps<TItem, TId>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "fixedBodyPosition",
      "name": "fixedBodyPosition",
      "comment": {
       "raw": [
        "Disables moving the dropdown body, when togglers is moved. Used in filters panel, to prevent filter selection to 'jump' after adding a filter."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "portalTarget",
      "name": "portalTarget",
      "comment": {
       "raw": [
        "Node of portal target, where to render the dropdown body.",
        " By default, will be used global portal node."
       ]
      },
      "typeValue": {
       "raw": "HTMLElement"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "inputCx",
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on input-part component. See https://github.com/JedWatson/classnames#usage for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "bodyCx",
      "name": "bodyCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on body-part component. See https://github.com/JedWatson/classnames#usage for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "highlightSearchMatches",
      "name": "highlightSearchMatches",
      "comment": {
       "raw": [
        "Enables highlighting of the items' text with search-matching results."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "searchDebounceDelay",
      "name": "searchDebounceDelay",
      "comment": {
       "raw": [
        "Search input debounce delay in ms. Default value is 500ms"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID attribute for the input in toggler"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "toggleModalOpening",
      "name": "toggleModalOpening",
      "typeValue": {
       "raw": "(opened: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "shouldShowBody",
      "name": "shouldShowBody",
      "typeValue": {
       "raw": "() => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "valueType_2",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": "value_2",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_2",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "selectionMode_3",
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": "valueType_3",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": false
     },
     {
      "uid": "value_3",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_3",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "valueType_4",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": "value_4",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_4",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-components:UsePickerListProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "UsePickerListProps",
     "nameFull": "UsePickerListProps<TItem, TId, TProps>"
    },
    "src": "uui-components/src/pickers/hooks/types.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType?: 'id' | undefined; } & IEditable<TId> & IAnalyticableOnChange<any> & PickerShowSelectedOnly & { maxDefaultItems?: number | undefined; maxTotalItems?: number | undefined; defaultIds?: TId[] | undefined; settingsKey?: string | undefined; sortBy?(item: TItem, sorting: SortingOption<any>): string; } & TProps | PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType: 'entity'; } & IEditable<TItem> & IAnalyticableOnChange<any> & PickerShowSelectedOnly & { maxDefaultItems?: number | undefined; maxTotalItems?: number | undefined; defaultIds?: TId[] | undefined; settingsKey?: string | undefined; sortBy?(item: TItem, sorting: SortingOption<any>): string; } & TProps | PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType?: 'id' | undefined; emptyValue?: [] | null | undefined; } & IEditable<TId[]> & IAnalyticableOnChange<any> & PickerShowSelectedOnly & { maxDefaultItems?: number | undefined; maxTotalItems?: number | undefined; defaultIds?: TId[] | undefined; settingsKey?: string | undefined; sortBy?(item: TItem, sorting: SortingOption<any>): string; } & TProps | PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]> & IAnalyticableOnChange<any> & PickerShowSelectedOnly & { maxDefaultItems?: number | undefined; maxTotalItems?: number | undefined; defaultIds?: TId[] | undefined; settingsKey?: string | undefined; sortBy?(item: TItem, sorting: SortingOption<any>): string; } & TProps",
     "print": [
      "type UsePickerListProps<TItem, TId, TProps> = PickerListBaseProps<TItem, TId> & TProps & {};"
     ]
    },
    "props": [
     {
      "uid": "entityName",
      "name": "entityName",
      "comment": {
       "raw": [
        "Name of the entity being selected. Affects wording like \"Please select [entity]\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "entityPluralName",
      "name": "entityPluralName",
      "comment": {
       "raw": [
        "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "dataSource",
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<TItem, TId, any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": true
     },
     {
      "uid": "getName",
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "renderRow",
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<TItem, TId>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "getRowOptions",
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "renderNotFound",
      "name": "renderNotFound",
      "comment": {
       "raw": [
        "Overrides the default 'no records found' banner.",
        " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
       ]
      },
      "typeValue": {
       "raw": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "emptyValue",
      "name": "emptyValue",
      "comment": {
       "raw": [
        "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
       ]
      },
      "typeValue": {
       "raw": "null | []"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "sortBy",
      "name": "sortBy",
      "comment": {
       "raw": [
        "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "((item: TItem, sorting: SortingOption<any>) => any) & ((item: TItem, sorting: SortingOption<any>) => string)"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "comment": {
       "raw": [
        "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "sorting",
      "name": "sorting",
      "comment": {
       "raw": [
        "Defines sorting to pass to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "cascadeSelection",
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "isFoldedByDefault",
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "You can return true for all, or some items to fold them."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "getSearchFields",
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "ref",
      "name": "ref",
      "comment": {
       "raw": [
        "Component ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: PickerInputElement | null) => void | React.RefObject<PickerInputElement>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "selectionMode",
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": "valueType",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: any, oldValue: any) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "showSelectedOnly",
      "name": "showSelectedOnly",
      "comment": {
       "raw": [
        "Enables/disables selected rows only in Picker."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PickerShowSelectedOnly",
      "required": false
     },
     {
      "uid": "maxDefaultItems",
      "name": "maxDefaultItems",
      "comment": {
       "raw": [
        "Number of default items to show initially, when nothing is selected.",
        " @default 10"
       ],
       "tags": {
        "@default": 10
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerListBaseProps",
      "required": false
     },
     {
      "uid": "maxTotalItems",
      "name": "maxTotalItems",
      "comment": {
       "raw": [
        "Maximum total number of items to show, including selected",
        " @default 50"
       ],
       "tags": {
        "@default": 50
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerListBaseProps",
      "required": false
     },
     {
      "uid": "defaultIds",
      "name": "defaultIds",
      "comment": {
       "raw": [
        "Ids of items to show first.",
        " If not specified, top props.maxDefaultItems will be shown according to the DataSource sorting settings (default is 10)"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-components:PickerListBaseProps",
      "required": false
     },
     {
      "uid": "settingsKey",
      "name": "settingsKey",
      "comment": {
       "raw": [
        "If provided, top picks will be automatically adjusted based on last user selection, and stored as user setting under provided key"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:PickerListBaseProps",
      "required": false
     },
     {
      "uid": "valueType_2",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": "value_2",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_2",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "selectionMode_3",
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": "valueType_3",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": false
     },
     {
      "uid": "value_3",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_3",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "valueType_4",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": "value_4",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_4",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-components:UsePickerModalProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "UsePickerModalProps",
     "nameFull": "UsePickerModalProps<TItem, TId>"
    },
    "src": "uui-components/src/pickers/hooks/types.ts",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "PickerBaseOptions<TItem, TId> & IHasCaption & { selectionMode: 'single'; valueType: 'id'; initialValue: TId; } & IModal<TId, any> & PickerModalOptions<TItem, TId> | PickerBaseOptions<TItem, TId> & IHasCaption & { selectionMode: 'single'; valueType: 'entity'; initialValue: TItem; } & IModal<TItem, any> & PickerModalOptions<TItem, TId> | PickerBaseOptions<TItem, TId> & IHasCaption & { selectionMode: 'multi'; valueType: 'id'; initialValue: TId[]; } & IModal<TId[], any> & PickerModalOptions<TItem, TId> | PickerBaseOptions<TItem, TId> & IHasCaption & { selectionMode: 'multi'; valueType: 'entity'; initialValue: TItem[]; } & IModal<TItem[], any> & PickerModalOptions<TItem, TId>",
     "print": [
      "type UsePickerModalProps<TItem, TId> = PickerBaseOptions<TItem, TId> & IHasCaption & (PickerModalScalarProps<TId, TItem> | PickerModalArrayProps<TId, TItem>) & PickerModalOptions<TItem, TId>;"
     ]
    },
    "props": [
     {
      "uid": "entityName",
      "name": "entityName",
      "comment": {
       "raw": [
        "Name of the entity being selected. Affects wording like \"Please select [entity]\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "entityPluralName",
      "name": "entityPluralName",
      "comment": {
       "raw": [
        "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "dataSource",
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<TItem, TId, any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": true
     },
     {
      "uid": "getName",
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "renderRow",
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<TItem, TId>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "getRowOptions",
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "renderNotFound",
      "name": "renderNotFound",
      "comment": {
       "raw": [
        "Overrides the default 'no records found' banner.",
        " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
       ]
      },
      "typeValue": {
       "raw": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "emptyValue",
      "name": "emptyValue",
      "comment": {
       "raw": [
        "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
       ]
      },
      "typeValue": {
       "raw": "null | []"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "sortBy",
      "name": "sortBy",
      "comment": {
       "raw": [
        "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "comment": {
       "raw": [
        "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "sorting",
      "name": "sorting",
      "comment": {
       "raw": [
        "Defines sorting to pass to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "cascadeSelection",
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "isFoldedByDefault",
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "You can return true for all, or some items to fold them."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "getSearchFields",
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "ref",
      "name": "ref",
      "comment": {
       "raw": [
        "Component ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: PickerInputElement | null) => void | React.RefObject<PickerInputElement>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "selectionMode",
      "name": "selectionMode",
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "from": "@epam/uui-components:PickerModalScalarProps",
      "required": true
     },
     {
      "uid": "valueType",
      "name": "valueType",
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-components:PickerModalScalarProps",
      "required": true
     },
     {
      "uid": "initialValue",
      "name": "initialValue",
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-components:PickerModalScalarProps",
      "required": true
     },
     {
      "uid": "isActive",
      "name": "isActive",
      "comment": {
       "raw": [
        "Indicates whether the modal is currently displayed"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the modal"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "zIndex",
      "name": "zIndex",
      "comment": {
       "raw": [
        "Modal zIndex value. Calculated via LayoutContext."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "success",
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "abort",
      "name": "abort",
      "comment": {
       "raw": [
        "Call to close the modal with abort action. It's rejects `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "parameters",
      "name": "parameters",
      "comment": {
       "raw": [
        "Parameters that provided via second param of `modalContext.show` method"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": "depth",
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of current modal layer"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": "renderFilter",
      "name": "renderFilter",
      "comment": {
       "raw": [
        "Render callback for custom filters block. This block will be rendered befor the items list.",
        "     If omitted, nothing will be rendered."
       ]
      },
      "typeValue": {
       "raw": "(editableFilter: IEditable<any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:PickerModalOptions",
      "required": false
     },
     {
      "uid": "renderFooter",
      "name": "renderFooter",
      "comment": {
       "raw": [
        "Render callback for modal footer.",
        "     If omitted, default footer will be rendered."
       ]
      },
      "typeValue": {
       "raw": "(props: PickerFooterProps<TItem, TId> & Partial<IModal<any, any>>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:PickerModalOptions",
      "required": false
     },
     {
      "uid": "disallowClickOutside",
      "name": "disallowClickOutside",
      "comment": {
       "raw": [
        "If true, prevent modal window closing by click outside modal",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerModalOptions",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "valueType_2",
      "name": "valueType",
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-components:PickerModalScalarProps",
      "required": true
     },
     {
      "uid": "initialValue_2",
      "name": "initialValue",
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-components:PickerModalScalarProps",
      "required": true
     },
     {
      "uid": "success_2",
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "selectionMode_3",
      "name": "selectionMode",
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "from": "@epam/uui-components:PickerModalArrayProps",
      "required": true
     },
     {
      "uid": "valueType_3",
      "name": "valueType",
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-components:PickerModalArrayProps",
      "required": true
     },
     {
      "uid": "initialValue_3",
      "name": "initialValue",
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-components:PickerModalArrayProps",
      "required": true
     },
     {
      "uid": "success_3",
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "valueType_4",
      "name": "valueType",
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-components:PickerModalArrayProps",
      "required": true
     },
     {
      "uid": "initialValue_4",
      "name": "initialValue",
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-components:PickerModalArrayProps",
      "required": true
     },
     {
      "uid": "success_4",
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-components:YearSelectionProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "YearSelectionProps",
     "nameFull": "YearSelectionProps"
    },
    "src": "uui-components/src/inputs/DatePicker/YearSelection.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "YearSelectionProps",
     "print": [
      "interface YearSelectionProps extends IEditable<Dayjs>, IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    selectedDate: Dayjs;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "selectedDate",
      "name": "selectedDate",
      "typeValue": {
       "raw": "Dayjs"
      },
      "required": true
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "Dayjs"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: Dayjs) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-components:DropSpotState": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "DropSpotState",
     "nameFull": "DropSpotState"
    },
    "src": "uui-components/src/widgets/DropSpot.tsx",
    "exported": false
   }
  },
  "@epam/uui-components:GeneralAccordionProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "GeneralAccordionProps",
     "nameFull": "GeneralAccordionProps"
    },
    "src": "uui-components/src/layout/Accordion.tsx",
    "exported": false
   }
  },
  "@epam/uui-components:GroupedDataColumnProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "GroupedDataColumnProps",
     "nameFull": "GroupedDataColumnProps"
    },
    "src": "uui-components/src/table/columnsConfigurationModal/types.ts",
    "exported": false
   }
  },
  "@epam/uui-components:SelectionManager": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "SelectionManager",
     "nameFull": "SelectionManager<TItem, TId, TFilter>"
    },
    "src": "uui-components/src/table/tableCellsSelection/types.ts",
    "exported": false
   }
  },
  "@epam/uui-components:SliderBaseProps": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "SliderBaseProps",
     "nameFull": "SliderBaseProps<TSelection>"
    },
    "src": "uui-components/src/inputs/Slider/SliderBase.tsx",
    "exported": false
   }
  },
  "@epam/uui-components:TColumnPinPosition": {
   "summary": {
    "module": "@epam/uui-components",
    "typeName": {
     "name": "TColumnPinPosition",
     "nameFull": "TColumnPinPosition"
    },
    "src": "uui-components/src/table/columnsConfigurationModal/types.ts",
    "exported": false
   }
  },
  "@epam/uui:AccordionModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "AccordionModsOverride",
     "nameFull": "AccordionModsOverride"
    },
    "src": "uui/components/layout/Accordion.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "AccordionModsOverride",
     "print": [
      "interface AccordionModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:AccordionProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "AccordionProps",
     "nameFull": "AccordionProps"
    },
    "src": "uui/components/layout/Accordion.tsx",
    "comment": {
     "raw": [
      "Represents the properties of the Accordion component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "Omit<AccordionMods, never> & AccordionModsOverride & GeneralAccordionProps | Omit<AccordionMods, never> & AccordionModsOverride & GeneralAccordionProps & IControlled<boolean>",
     "print": [
      "/** Represents the properties of the Accordion component. */",
      "type AccordionProps = Overwrite<AccordionMods, AccordionModsOverride> & uuiComponents.AccordionProps;"
     ]
    },
    "props": [
     {
      "uid": "mode",
      "name": "mode",
      "comment": {
       "raw": [
        "Defines component displaying mode.",
        " @default 'block'"
       ],
       "tags": {
        "@default": "block"
       }
      },
      "typeValue": {
       "raw": "'block' | 'inline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "block",
        "inline"
       ]
      },
      "from": "@epam/uui:AccordionMods",
      "required": false
     },
     {
      "uid": "padding",
      "name": "padding",
      "typeValue": {
       "raw": "'0' | '6' | '12' | '18'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "0",
        "6",
        "12",
        "18"
       ]
      },
      "from": "@epam/uui:AccordionMods",
      "required": false
     },
     {
      "uid": "title",
      "name": "title",
      "comment": {
       "raw": [
        "Accordion title"
       ]
      },
      "typeValue": {
       "raw": "string | React.ReactElement<any, string | React.JSXElementConstructor<any>>"
      },
      "from": "@epam/uui-components:GeneralAccordionProps",
      "required": false
     },
     {
      "uid": "renderTitle",
      "name": "renderTitle",
      "comment": {
       "raw": [
        "Overrides default title rendering."
       ]
      },
      "typeValue": {
       "raw": "(isOpen: boolean) => React.ReactElement<any, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:GeneralAccordionProps",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Overrides the default dropdown (folding) icon.Pass null to disable the folding icon completely"
       ]
      },
      "typeValue": {
       "raw": "null | Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:GeneralAccordionProps",
      "required": false
     },
     {
      "uid": "renderAdditionalItems",
      "name": "renderAdditionalItems",
      "comment": {
       "raw": [
        "Renders additional items to component's header (after the title, and before the folding icon)"
       ]
      },
      "typeValue": {
       "raw": "(isOpen: boolean) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:GeneralAccordionProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui:AlertCoreProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "AlertCoreProps",
     "nameFull": "AlertCoreProps"
    },
    "src": "uui/components/overlays/Alert.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "AlertCoreProps",
     "print": [
      "interface AlertCoreProps extends IHasChildren, IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    /** List of actions to display in the alert. Each action has name and 'action' callback */",
      "    actions?: AlertNotificationAction[];",
      "    /** When specified, a close icon is rendered. onClose callback will be called on clicking the close icon */",
      "    onClose?(): void;",
      "    /** An optional icon to show on the left of the alert */",
      "    icon?: Icon;",
      "    /**",
      "     * Component size. If omitted, 48 size will be used.",
      "     * @default '48'",
      "     */",
      "    size?: '36' | '48';",
      "}"
     ]
    },
    "props": [
     {
      "uid": "actions",
      "name": "actions",
      "comment": {
       "raw": [
        "List of actions to display in the alert. Each action has name and 'action' callback"
       ]
      },
      "typeValue": {
       "raw": "AlertNotificationAction[]"
      },
      "required": false
     },
     {
      "uid": "onClose",
      "name": "onClose",
      "comment": {
       "raw": [
        "When specified, a close icon is rendered. onClose callback will be called on clicking the close icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "An optional icon to show on the left of the alert"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Component size. If omitted, 48 size will be used.",
        " @default '48'"
       ],
       "tags": {
        "@default": "48"
       }
      },
      "typeValue": {
       "raw": "'36' | '48'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "36",
        "48"
       ]
      },
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:AlertProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "AlertProps",
     "nameFull": "AlertProps"
    },
    "src": "uui/components/overlays/Alert.tsx",
    "comment": {
     "raw": [
      "Represents the properties of the Alert component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "AlertProps",
     "print": [
      "/** Represents the properties of the Alert component. */",
      "interface AlertProps extends AlertCoreProps, AlertMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "actions",
      "name": "actions",
      "comment": {
       "raw": [
        "List of actions to display in the alert. Each action has name and 'action' callback"
       ]
      },
      "typeValue": {
       "raw": "AlertNotificationAction[]"
      },
      "from": "@epam/uui:AlertCoreProps",
      "required": false
     },
     {
      "uid": "onClose",
      "name": "onClose",
      "comment": {
       "raw": [
        "When specified, a close icon is rendered. onClose callback will be called on clicking the close icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui:AlertCoreProps",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "An optional icon to show on the left of the alert"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:AlertCoreProps",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Component size. If omitted, 48 size will be used.",
        " @default '48'"
       ],
       "tags": {
        "@default": "48"
       }
      },
      "typeValue": {
       "raw": "'36' | '48'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "36",
        "48"
       ]
      },
      "from": "@epam/uui:AlertCoreProps",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Alert color"
       ]
      },
      "typeValue": {
       "raw": "'info' | 'success' | 'warning' | 'error'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "info",
        "success",
        "warning",
        "error"
       ]
      },
      "from": "@epam/uui:AlertMods",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:BadgeCoreProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "BadgeCoreProps",
     "nameFull": "BadgeCoreProps"
    },
    "src": "uui/components/widgets/Badge.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "BadgeCoreProps",
     "print": [
      "interface BadgeCoreProps extends ClickableComponentProps, IDropdownToggler, IHasIcon, IHasCaption {",
      "    /** Pass true to display an indicator. It shows only if fill = 'outline'. */",
      "    indicator?: boolean;",
      "    /**",
      "     * Position of the icon (left of right)",
      "     * @default 'left'",
      "     */",
      "    iconPosition?: 'left' | 'right';",
      "    /** Icon for drop-down toggler */",
      "    dropdownIcon?: Icon;",
      "    /** Count value to be placed in component */",
      "    count?: React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "indicator",
      "name": "indicator",
      "comment": {
       "raw": [
        "Pass true to display an indicator. It shows only if fill = 'outline'."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)",
        " @default 'left'"
       ],
       "tags": {
        "@default": "left"
       }
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "count",
      "name": "count",
      "comment": {
       "raw": [
        "Count value to be placed in component"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:BadgeModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "BadgeModsOverride",
     "nameFull": "BadgeModsOverride"
    },
    "src": "uui/components/widgets/Badge.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "BadgeModsOverride",
     "print": [
      "interface BadgeModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:BadgeProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "BadgeProps",
     "nameFull": "BadgeProps"
    },
    "src": "uui/components/widgets/Badge.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a Badge component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "BadgeProps",
     "print": [
      "/** Represents the properties of a Badge component. */",
      "interface BadgeProps extends BadgeCoreProps, Overwrite<BadgeMods, BadgeModsOverride> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "indicator",
      "name": "indicator",
      "comment": {
       "raw": [
        "Pass true to display an indicator. It shows only if fill = 'outline'."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:BadgeCoreProps",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)",
        " @default 'left'"
       ],
       "tags": {
        "@default": "left"
       }
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui:BadgeCoreProps",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:BadgeCoreProps",
      "required": false
     },
     {
      "uid": "count",
      "name": "count",
      "comment": {
       "raw": [
        "Count value to be placed in component"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui:BadgeCoreProps",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color."
       ]
      },
      "typeValue": {
       "raw": "'info' | 'success' | 'warning' | 'critical' | 'neutral'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "info",
        "success",
        "warning",
        "critical",
        "neutral"
       ]
      },
      "from": "@epam/uui:BadgeMods",
      "required": false
     },
     {
      "uid": "fill",
      "name": "fill",
      "comment": {
       "raw": [
        "Defines component fill style.",
        " @default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline"
       ]
      },
      "from": "@epam/uui:BadgeMods",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'18' | '36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:BadgeMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:BurgerButtonProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "BurgerButtonProps",
     "nameFull": "BurgerButtonProps"
    },
    "src": "uui/components/navigation/MainMenu/Burger/BurgerButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "BurgerButtonProps",
     "print": [
      "type BurgerButtonProps = ButtonProps & BurgerButtonMods;"
     ]
    },
    "props": [
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "onClear",
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": "clearIcon",
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": "type",
      "name": "type",
      "typeValue": {
       "raw": "'primary' | 'secondary'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "primary",
        "secondary"
       ]
      },
      "from": "@epam/uui:BurgerButtonMods",
      "required": false
     },
     {
      "uid": "indentLevel",
      "name": "indentLevel",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui:BurgerButtonMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:ButtonCoreProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ButtonCoreProps",
     "nameFull": "ButtonCoreProps"
    },
    "src": "uui/components/buttons/Button.tsx",
    "comment": {
     "raw": [
      "Represents the 'Core properties' for the Button component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "ButtonProps",
     "print": [
      "/** Represents the 'Core properties' for the Button component. */",
      "type ButtonCoreProps = uuiComponents.ButtonProps;"
     ]
    },
    "props": [
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "onClear",
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": "clearIcon",
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:ButtonModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ButtonModsOverride",
     "nameFull": "ButtonModsOverride"
    },
    "src": "uui/components/buttons/Button.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ButtonModsOverride",
     "print": [
      "interface ButtonModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:ButtonProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ButtonProps",
     "nameFull": "ButtonProps"
    },
    "src": "uui/components/buttons/Button.tsx",
    "comment": {
     "raw": [
      "Represents the props for a Button component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ButtonProps",
     "print": [
      "/** Represents the props for a Button component. */",
      "interface ButtonProps extends ButtonCoreProps, Overwrite<ButtonMods, ButtonModsOverride> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "onClear",
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": "clearIcon",
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'primary'"
       ],
       "tags": {
        "@default": "primary"
       }
      },
      "typeValue": {
       "raw": "'critical' | 'neutral' | 'primary' | 'secondary' | 'accent' | 'white'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "critical",
        "neutral",
        "primary",
        "secondary",
        "accent",
        "white"
       ]
      },
      "from": "@epam/uui:ButtonMods",
      "required": false
     },
     {
      "uid": "fill",
      "name": "fill",
      "comment": {
       "raw": [
        "Defines component fill style.",
        " @default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline' | 'ghost' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline",
        "ghost",
        "none"
       ]
      },
      "from": "@epam/uui:ButtonMods",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'18' | '36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:ButtonMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:CheckboxGroupProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "CheckboxGroupProps",
     "nameFull": "CheckboxGroupProps<TValue>"
    },
    "src": "uui/components/layout/CheckboxGroup.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "CheckboxGroupProps<TValue>",
     "print": [
      "interface CheckboxGroupProps<TValue> extends ICanBeInvalid, IHasCX, IEditable<TValue[]>, IDisableable, IHasDirection, ICanBeReadonly, IHasRawProps<React.FieldsetHTMLAttributes<HTMLFieldSetElement>>, IHasForwardedRef<HTMLFieldSetElement> {",
      "    /** Array of checkbox items to be rendered in group */",
      "    items: CheckboxGroupItem<TValue>[];",
      "    /** Defines group components size */",
      "    size?: CheckboxProps['size'];",
      "}"
     ]
    },
    "props": [
     {
      "uid": "items",
      "name": "items",
      "comment": {
       "raw": [
        "Array of checkbox items to be rendered in group"
       ]
      },
      "typeValue": {
       "raw": "CheckboxGroupItem<TValue>[]"
      },
      "required": true
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines group components size"
       ]
      },
      "typeValue": {
       "raw": "'12' | '18'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18"
       ]
      },
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TValue[]"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TValue[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "direction",
      "name": "direction",
      "comment": {
       "raw": [
        "Direction of child components."
       ]
      },
      "typeValue": {
       "raw": "'vertical' | 'horizontal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "vertical",
        "horizontal"
       ]
      },
      "from": "@epam/uui-core:IHasDirection",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.FieldsetHTMLAttributes<HTMLFieldSetElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLFieldSetElement | null) => void | React.MutableRefObject<HTMLFieldSetElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:CheckboxModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "CheckboxModsOverride",
     "nameFull": "CheckboxModsOverride"
    },
    "src": "uui/components/inputs/Checkbox.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "CheckboxModsOverride",
     "print": [
      "interface CheckboxModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:CheckboxProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "CheckboxProps",
     "nameFull": "CheckboxProps"
    },
    "src": "uui/components/inputs/Checkbox.tsx",
    "comment": {
     "raw": [
      "Represents the properties of the Checkbox component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "CheckboxProps",
     "print": [
      "/** Represents the properties of the Checkbox component. */",
      "interface CheckboxProps extends uuiComponents.CheckboxProps, Overwrite<CheckboxMods, CheckboxModsOverride> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "renderLabel",
      "name": "renderLabel",
      "comment": {
       "raw": [
        "Render callback for checkbox label.",
        " If omitted, 'label' prop value will be rendered."
       ]
      },
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:CheckboxProps",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "ID to put on 'input' node"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:CheckboxProps",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Check icon.",
        " Usually it has a default implementation in skins, so providing this is only necessary if you want to replace the default icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:CheckboxProps",
      "required": false
     },
     {
      "uid": "indeterminateIcon",
      "name": "indeterminateIcon",
      "comment": {
       "raw": [
        "Indeterminate state icon.",
        " Usually it has a default implementation in skins, so providing this is only necessary if you want to replace the default icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:CheckboxProps",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "indeterminate",
      "name": "indeterminate",
      "comment": {
       "raw": [
        "Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICheckable",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "label",
      "name": "label",
      "comment": {
       "raw": [
        "Component label. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in labels."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasLabel",
      "required": false
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean | null, oldValue: boolean | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.LabelHTMLAttributes<HTMLLabelElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "mode",
      "name": "mode",
      "comment": {
       "raw": [
        "Defines the different edit modes.",
        " @default 'form'"
       ],
       "tags": {
        "@default": "form"
       }
      },
      "typeValue": {
       "raw": "'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "form",
        "cell"
       ]
      },
      "from": "@epam/uui:CheckboxMods",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '18'"
       ],
       "tags": {
        "@default": "18"
       }
      },
      "typeValue": {
       "raw": "'12' | '18'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18"
       ]
      },
      "from": "@epam/uui:CheckboxMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:ColumnsConfigurationModalProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ColumnsConfigurationModalProps",
     "nameFull": "ColumnsConfigurationModalProps<TItem, TId, TFilter>"
    },
    "src": "uui/components/tables/columnsConfigurationModal/ColumnsConfigurationModal.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ColumnsConfigurationModalProps<TItem, TId, TFilter>",
     "print": [
      "interface ColumnsConfigurationModalProps<TItem, TId, TFilter> extends IModal<ColumnsConfig> {",
      "    columnsConfig?: ColumnsConfig;",
      "    defaultConfig: ColumnsConfig;",
      "    columns: DataColumnProps<TItem, TId, TFilter>[];",
      "    renderItem?: (column: DataColumnProps<TItem, TId, TFilter>) => React.ReactNode;",
      "    getSearchFields?: (column: DataColumnProps<TItem, TId, TFilter>) => string[];",
      "}"
     ]
    },
    "props": [
     {
      "uid": "columnsConfig",
      "name": "columnsConfig",
      "typeValue": {
       "raw": "ColumnsConfig"
      },
      "required": false
     },
     {
      "uid": "defaultConfig",
      "name": "defaultConfig",
      "typeValue": {
       "raw": "ColumnsConfig"
      },
      "typeValueRef": "@epam/uui-core:ColumnsConfig",
      "required": true
     },
     {
      "uid": "columns",
      "name": "columns",
      "typeValue": {
       "raw": "DataColumnProps<TItem, TId, TFilter>[]"
      },
      "required": true
     },
     {
      "uid": "renderItem",
      "name": "renderItem",
      "typeValue": {
       "raw": "(column: DataColumnProps<TItem, TId, TFilter>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "getSearchFields",
      "name": "getSearchFields",
      "typeValue": {
       "raw": "(column: DataColumnProps<TItem, TId, TFilter>) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "isActive",
      "name": "isActive",
      "comment": {
       "raw": [
        "Indicates whether the modal is currently displayed"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the modal"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "zIndex",
      "name": "zIndex",
      "comment": {
       "raw": [
        "Modal zIndex value. Calculated via LayoutContext."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "success",
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: ColumnsConfig) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "abort",
      "name": "abort",
      "comment": {
       "raw": [
        "Call to close the modal with abort action. It's rejects `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "parameters",
      "name": "parameters",
      "comment": {
       "raw": [
        "Parameters that provided via second param of `modalContext.show` method"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": "depth",
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of current modal layer"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:ConfirmationModalWindowProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ConfirmationModalWindowProps",
     "nameFull": "ConfirmationModalWindowProps"
    },
    "src": "uui/components/overlays/ConfirmationModal.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ConfirmationModalWindowProps",
     "print": [
      "interface ConfirmationModalWindowProps extends IModal<any> {",
      "    /** Confirmation modal title */",
      "    caption: any;",
      "    /** Confirmation modal content */",
      "    bodyContent?: any;",
      "    /** Pass true, to hide cancel button */",
      "    hideCancelButton?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Confirmation modal title"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "required": true
     },
     {
      "uid": "bodyContent",
      "name": "bodyContent",
      "comment": {
       "raw": [
        "Confirmation modal content"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "required": false
     },
     {
      "uid": "hideCancelButton",
      "name": "hideCancelButton",
      "comment": {
       "raw": [
        "Pass true, to hide cancel button"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "isActive",
      "name": "isActive",
      "comment": {
       "raw": [
        "Indicates whether the modal is currently displayed"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the modal"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "zIndex",
      "name": "zIndex",
      "comment": {
       "raw": [
        "Modal zIndex value. Calculated via LayoutContext."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "success",
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "abort",
      "name": "abort",
      "comment": {
       "raw": [
        "Call to close the modal with abort action. It's rejects `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "parameters",
      "name": "parameters",
      "comment": {
       "raw": [
        "Parameters that provided via second param of `modalContext.show` method"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": "depth",
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of current modal layer"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:CountIndicatorCoreProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "CountIndicatorCoreProps",
     "nameFull": "CountIndicatorCoreProps"
    },
    "src": "uui/components/widgets/CountIndicator.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "CountIndicatorCoreProps",
     "print": [
      "type CountIndicatorCoreProps = IHasCaption & IHasCX & {",
      "    /**",
      "     * Defines component size.",
      "     * @default '24'",
      "     */",
      "    size?: '24' | '18' | '12';",
      "};"
     ]
    },
    "props": [
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '24'"
       ],
       "tags": {
        "@default": "24"
       }
      },
      "typeValue": {
       "raw": "'12' | '18' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:CountIndicatorProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "CountIndicatorProps",
     "nameFull": "CountIndicatorProps"
    },
    "src": "uui/components/widgets/CountIndicator.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "CountIndicatorProps",
     "print": [
      "type CountIndicatorProps = CountIndicatorCoreProps & CountIndicatorMods;"
     ]
    },
    "props": [
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '24'"
       ],
       "tags": {
        "@default": "24"
       }
      },
      "typeValue": {
       "raw": "'12' | '18' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:CountIndicatorCoreProps",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color."
       ]
      },
      "typeValue": {
       "raw": "'info' | 'success' | 'warning' | 'critical' | 'neutral' | 'white'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "info",
        "success",
        "warning",
        "critical",
        "neutral",
        "white"
       ]
      },
      "from": "@epam/uui:CountIndicatorMods",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DataPickerBodyModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataPickerBodyModsOverride",
     "nameFull": "DataPickerBodyModsOverride"
    },
    "src": "uui/components/pickers/DataPickerBody.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataPickerBodyModsOverride",
     "print": [
      "interface DataPickerBodyModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:DataPickerBodyProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataPickerBodyProps",
     "nameFull": "DataPickerBodyProps"
    },
    "src": "uui/components/pickers/DataPickerBody.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataPickerBodyProps",
     "print": [
      "interface DataPickerBodyProps extends Overwrite<DataPickerBodyMods, DataPickerBodyModsOverride>, PickerBodyBaseProps {",
      "    maxHeight?: number;",
      "    editMode?: 'dropdown' | 'modal';",
      "    selectionMode?: 'single' | 'multi';",
      "    maxWidth?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "maxHeight",
      "name": "maxHeight",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "editMode",
      "name": "editMode",
      "typeValue": {
       "raw": "'dropdown' | 'modal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "dropdown",
        "modal"
       ]
      },
      "required": false
     },
     {
      "uid": "selectionMode",
      "name": "selectionMode",
      "typeValue": {
       "raw": "'single' | 'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single",
        "multi"
       ]
      },
      "required": false
     },
     {
      "uid": "maxWidth",
      "name": "maxWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "searchSize",
      "name": "searchSize",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:DataPickerBodyMods",
      "required": false
     },
     {
      "uid": "onKeyDown",
      "name": "onKeyDown",
      "typeValue": {
       "raw": "(e: React.KeyboardEvent<HTMLElement>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:PickerBodyBaseProps",
      "required": false
     },
     {
      "uid": "renderNotFound",
      "name": "renderNotFound",
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:PickerBodyBaseProps",
      "required": false
     },
     {
      "uid": "rows",
      "name": "rows",
      "typeValue": {
       "raw": "React.ReactNode[]"
      },
      "from": "@epam/uui-components:PickerBodyBaseProps",
      "required": true
     },
     {
      "uid": "scheduleUpdate",
      "name": "scheduleUpdate",
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:PickerBodyBaseProps",
      "required": false
     },
     {
      "uid": "search",
      "name": "search",
      "typeValue": {
       "raw": "IEditable<string>"
      },
      "from": "@epam/uui-components:PickerBodyBaseProps",
      "required": true
     },
     {
      "uid": "showSearch",
      "name": "showSearch",
      "typeValue": {
       "raw": "boolean | 'auto'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "auto"
       ]
      },
      "from": "@epam/uui-components:PickerBodyBaseProps",
      "required": false
     },
     {
      "uid": "fixedBodyPosition",
      "name": "fixedBodyPosition",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerBodyBaseProps",
      "required": false
     },
     {
      "uid": "searchDebounceDelay",
      "name": "searchDebounceDelay",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerBodyBaseProps",
      "required": false
     },
     {
      "uid": "selectAll",
      "name": "selectAll",
      "comment": {
       "raw": [
        "ICheckable object for Select All behavior.",
        " If omitted, Select All action will be absent."
       ]
      },
      "typeValue": {
       "raw": "ICheckable"
      },
      "from": "@epam/uui-core:DataSourceListProps",
      "required": false
     },
     {
      "uid": "isReloading",
      "name": "isReloading",
      "comment": {
       "raw": [
        "Signals that data is reloading on search/sort/filter/reload."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataSourceListProps",
      "required": false
     },
     {
      "uid": "rowsCount",
      "name": "rowsCount",
      "comment": {
       "raw": [
        "Count of rows, after applying filter, and folding on tree nodes.",
        " Obsolete! Please switch to exactRowsCount / knownRowsCount"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": "exactRowsCount",
      "name": "exactRowsCount",
      "comment": {
       "raw": [
        "Count of rows, if all rows loaded. Can be null while initial loading, or if API doesn't return count"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": "knownRowsCount",
      "name": "knownRowsCount",
      "comment": {
       "raw": [
        "There's at least knownRowsCount rows. There can be more if list is lazy loaded.",
        " Equals to exactRowsCount if all rows are loaded, or if API returns rows count",
        " Otherwise, exactRowsCount will be null, and knownRowsCount will specify number of loaded rows."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": "totalCount",
      "name": "totalCount",
      "comment": {
       "raw": [
        "Total count of items, before applying the filter. If there's a tree, it counts all nodes, including folded children"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "DataSourceState<Record<string, any>, any>"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: DataSourceState<Record<string, any>, any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DataPickerFooterModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataPickerFooterModsOverride",
     "nameFull": "DataPickerFooterModsOverride"
    },
    "src": "uui/components/pickers/DataPickerFooter.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataPickerFooterModsOverride",
     "print": [
      "interface DataPickerFooterModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:DataPickerRowModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataPickerRowModsOverride",
     "nameFull": "DataPickerRowModsOverride"
    },
    "src": "uui/components/pickers/DataPickerRow.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataPickerRowModsOverride",
     "print": [
      "interface DataPickerRowModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:DataPickerRowProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataPickerRowProps",
     "nameFull": "DataPickerRowProps<TItem, TId>"
    },
    "src": "uui/components/pickers/DataPickerRow.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataPickerRowProps<TItem, TId>",
     "print": [
      "interface DataPickerRowProps<TItem, TId> extends Overwrite<DataPickerRowMods, DataPickerRowModsOverride>, DataRowProps<TItem, TId> {",
      "    renderItem(item: TItem, rowProps: DataRowProps<TItem, TId>): React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "renderItem",
      "name": "renderItem",
      "typeValue": {
       "raw": "(item: TItem, rowProps: DataRowProps<TItem, TId>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": true
     },
     {
      "uid": "padding",
      "name": "padding",
      "typeValue": {
       "raw": "'12' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "24"
       ]
      },
      "from": "@epam/uui:DataPickerRowMods",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "60"
       ]
      },
      "from": "@epam/uui:DataPickerRowMods",
      "required": false
     },
     {
      "uid": "alignActions",
      "name": "alignActions",
      "typeValue": {
       "raw": "'top' | 'center'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "center"
       ]
      },
      "from": "@epam/uui:DataPickerRowMods",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "((e?: any) => void) & ((rowProps: DataRowProps<TItem, TId>) => void) & ((rowProps: DataRowProps<TItem, TId>) => void)"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "alignItems",
      "name": "alignItems",
      "comment": {
       "raw": [
        "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)",
        " @default 'center'"
       ],
       "tags": {
        "@default": "center"
       }
      },
      "typeValue": {
       "raw": "'top' | 'center' | 'bottom' | 'stretch'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "center",
        "bottom",
        "stretch"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "justifyContent",
      "name": "justifyContent",
      "comment": {
       "raw": [
        "Flexbox justifyContent property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
       ]
      },
      "typeValue": {
       "raw": "'center' | 'space-between' | 'space-around' | 'space-evenly' | 'start' | 'end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "center",
        "space-between",
        "space-around",
        "space-evenly",
        "start",
        "end"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "columnGap",
      "name": "columnGap",
      "comment": {
       "raw": [
        "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '36' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "36"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "rowGap",
      "name": "rowGap",
      "comment": {
       "raw": [
        "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '36' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "36"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "checkbox",
      "name": "checkbox",
      "comment": {
       "raw": [
        "If row needs a checkbox, this field should be specified, and it props can be configured here"
       ]
      },
      "typeValue": {
       "raw": "{ isVisible: boolean; } & IDisableable & ICanBeInvalid"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "isSelectable",
      "name": "isSelectable",
      "comment": {
       "raw": [
        "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "dnd",
      "name": "dnd",
      "comment": {
       "raw": [
        "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
       ]
      },
      "typeValue": {
       "raw": "IDndActor<any, any>"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Can be specified to make row act as a link (plain or SPA)"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "pin",
      "name": "pin",
      "comment": {
       "raw": [
        "A pure function that gets pinned state for each row.",
        " If row pinned, it means that it will be sticky inside their parent section."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "validationMessage",
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasValidationMessage",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "ID of the TItem rows displays"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": "rowKey",
      "name": "rowKey",
      "comment": {
       "raw": [
        "Key to be used as component's key when rendering. Usually, it's stringified ID"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": "index",
      "name": "index",
      "comment": {
       "raw": [
        "Index of the row, from the top of the list. This doesn't account any hierarchy."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": "parentId",
      "name": "parentId",
      "comment": {
       "raw": [
        "ID of the parent TItem"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "path",
      "name": "path",
      "comment": {
       "raw": [
        "Hierarchical path from the root node to the item (excluding the item itself)"
       ]
      },
      "typeValue": {
       "raw": "DataRowPathItem<TId, TItem>[]"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "depth",
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of the row in tree, 0 for the top-level"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "indent",
      "name": "indent",
      "comment": {
       "raw": [
        "Indent of the item, to show hierarchy.",
        "  Unlike depth, it contains additional logic, to not add unnecessary indents:",
        "  if all children of node has no children, all nodes would get the same indent as parent."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isLoading",
      "name": "isLoading",
      "comment": {
       "raw": [
        "True if row is in loading state. 'value' is empty in this case"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isUnknown",
      "name": "isUnknown",
      "comment": {
       "raw": [
        "True if item doesn't exist in a dataSource"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isFoldable",
      "name": "isFoldable",
      "comment": {
       "raw": [
        "True if row be folded or unfolded (usually because it contains children)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isFolded",
      "name": "isFolded",
      "comment": {
       "raw": [
        "True if row is currently folded"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isChecked",
      "name": "isChecked",
      "comment": {
       "raw": [
        "True if row is checked with checkbox"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isCheckable",
      "name": "isCheckable",
      "comment": {
       "raw": [
        "True if row has checkbox and can be checkable"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isChildrenChecked",
      "name": "isChildrenChecked",
      "comment": {
       "raw": [
        "True if some of row's children are checked.",
        " Used to show 'indefinite' checkbox state, to show user that something inside is checked"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isSelected",
      "name": "isSelected",
      "comment": {
       "raw": [
        "True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isChildrenSelected",
      "name": "isChildrenSelected",
      "comment": {
       "raw": [
        "True if any of row's children is selected."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isFocused",
      "name": "isFocused",
      "comment": {
       "raw": [
        "True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isLastChild",
      "name": "isLastChild",
      "comment": {
       "raw": [
        "True if row is the last child of his parent"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "onFold",
      "name": "onFold",
      "comment": {
       "raw": [
        "Handles row folding change.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "onCheck",
      "name": "onCheck",
      "comment": {
       "raw": [
        "Handles row checkbox change.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "onSelect",
      "name": "onSelect",
      "comment": {
       "raw": [
        "Handles row selection.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Handles row focusing."
       ]
      },
      "typeValue": {
       "raw": "(focusedIndex: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isPinned",
      "name": "isPinned",
      "comment": {
       "raw": [
        "True if row pinned, it means that it will be sticky inside his nesting level"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DataRowAddonsProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataRowAddonsProps",
     "nameFull": "DataRowAddonsProps<TItem, TId>"
    },
    "src": "uui/components/widgets/DataRowAddons.tsx",
    "comment": {
     "raw": [
      "Props of DataRowAddons."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataRowAddonsProps<TItem, TId>",
     "print": [
      "/**",
      " * Props of DataRowAddons.",
      " */",
      "interface DataRowAddonsProps<TItem, TId> {",
      "    /** DataRowProps object for the row where an addon is placed. */",
      "    rowProps: DataRowProps<TItem, TId>;",
      "    /** HTML tabIndex attribute to set on the cell. */",
      "    tabIndex?: React.HTMLAttributes<HTMLElement>['tabIndex'];",
      "    /** Controls size. */",
      "    size?: ControlSize | '60';",
      "    /**",
      "     * Drag'n'drop marker event handlers.",
      "     */",
      "    eventHandlers?: DndEventHandlers;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "rowProps",
      "name": "rowProps",
      "comment": {
       "raw": [
        "DataRowProps object for the row where an addon is placed."
       ]
      },
      "typeValue": {
       "raw": "DataRowProps<TItem, TId>"
      },
      "typeValueRef": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "HTML tabIndex attribute to set on the cell."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Controls size."
       ]
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "60"
       ]
      },
      "required": false
     },
     {
      "uid": "eventHandlers",
      "name": "eventHandlers",
      "comment": {
       "raw": [
        "Drag'n'drop marker event handlers."
       ]
      },
      "typeValue": {
       "raw": "DndEventHandlers"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DataRowsContainerProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataRowsContainerProps",
     "nameFull": "DataRowsContainerProps<TItem, TId, List>"
    },
    "src": "uui/components/tables/DataRowsContainer/DataRowsContainer.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataRowsContainerProps<TItem, TId, List>",
     "print": [
      "interface DataRowsContainerProps<TItem, TId, List extends HTMLDivElement = any> extends VirtualListRenderRowsParams<List> {",
      "    rows: DataRowProps<TItem, TId>[];",
      "    renderRow: (row: DataRowProps<TItem, TId>) => React.ReactNode;",
      "    headerRef?: React.MutableRefObject<HTMLDivElement>;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "rows",
      "name": "rows",
      "typeValue": {
       "raw": "DataRowProps<TItem, TId>[]"
      },
      "required": true
     },
     {
      "uid": "renderRow",
      "name": "renderRow",
      "typeValue": {
       "raw": "(row: DataRowProps<TItem, TId>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": true
     },
     {
      "uid": "headerRef",
      "name": "headerRef",
      "typeValue": {
       "raw": "React.MutableRefObject<HTMLDivElement>"
      },
      "required": false
     },
     {
      "uid": "listContainerRef",
      "name": "listContainerRef",
      "typeValue": {
       "raw": "React.MutableRefObject<List>"
      },
      "from": "@epam/uui:VirtualListRenderRowsParams",
      "required": true
     },
     {
      "uid": "estimatedHeight",
      "name": "estimatedHeight",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui:VirtualListRenderRowsParams",
      "required": true
     },
     {
      "uid": "offsetY",
      "name": "offsetY",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui:VirtualListRenderRowsParams",
      "required": true
     },
     {
      "uid": "scrollShadows",
      "name": "scrollShadows",
      "typeValue": {
       "raw": "{ verticalTop: boolean; verticalBottom: boolean; horizontalLeft: boolean; horizontalRight: boolean; }"
      },
      "from": "@epam/uui:VirtualListRenderRowsParams",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DataTableCellMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataTableCellMods",
     "nameFull": "DataTableCellMods"
    },
    "src": "uui/components/tables/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataTableCellMods",
     "print": [
      "interface DataTableCellMods extends TableSizesAndPositionMods {",
      "    border?: boolean;",
      "    /**",
      "     * Defines table columns gap size",
      "     * @default '24'",
      "     * */",
      "    columnsGap?: '12' | '24';",
      "}"
     ]
    },
    "props": [
     {
      "uid": "border",
      "name": "border",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "columnsGap",
      "name": "columnsGap",
      "comment": {
       "raw": [
        "Defines table columns gap size",
        " @default '24'"
       ],
       "tags": {
        "@default": "24"
       }
      },
      "typeValue": {
       "raw": "'12' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "24"
       ]
      },
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "60"
       ]
      },
      "from": "@epam/uui:TableSizesAndPositionMods",
      "required": false
     },
     {
      "uid": "padding",
      "name": "padding",
      "typeValue": {
       "raw": "'0' | '12' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "0",
        "12",
        "24"
       ]
      },
      "from": "@epam/uui:TableSizesAndPositionMods",
      "required": false
     },
     {
      "uid": "alignActions",
      "name": "alignActions",
      "typeValue": {
       "raw": "'top' | 'center'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "center"
       ]
      },
      "from": "@epam/uui:TableSizesAndPositionMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DataTableHeaderCellMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataTableHeaderCellMods",
     "nameFull": "DataTableHeaderCellMods"
    },
    "src": "uui/components/tables/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataTableHeaderCellMods",
     "print": [
      "interface DataTableHeaderCellMods extends BaseRowMods {",
      "    textCase?: 'upper' | 'normal';",
      "    /**",
      "     * Defines table columns gap size",
      "     * @default '24'",
      "     * */",
      "    columnsGap?: '12' | '24';",
      "}"
     ]
    },
    "props": [
     {
      "uid": "textCase",
      "name": "textCase",
      "typeValue": {
       "raw": "'upper' | 'normal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "upper",
        "normal"
       ]
      },
      "required": false
     },
     {
      "uid": "columnsGap",
      "name": "columnsGap",
      "comment": {
       "raw": [
        "Defines table columns gap size",
        " @default '24'"
       ],
       "tags": {
        "@default": "24"
       }
      },
      "typeValue": {
       "raw": "'12' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "24"
       ]
      },
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "60"
       ]
      },
      "from": "@epam/uui:BaseRowMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DataTableHeaderRowMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataTableHeaderRowMods",
     "nameFull": "DataTableHeaderRowMods"
    },
    "src": "uui/components/tables/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataTableHeaderRowMods",
     "print": [
      "interface DataTableHeaderRowMods extends BaseRowMods {",
      "    textCase?: 'upper' | 'normal';",
      "    /**",
      "     * Defines table columns gap size",
      "     * @default '24'",
      "     * */",
      "    columnsGap?: '12' | '24';",
      "}"
     ]
    },
    "props": [
     {
      "uid": "textCase",
      "name": "textCase",
      "typeValue": {
       "raw": "'upper' | 'normal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "upper",
        "normal"
       ]
      },
      "required": false
     },
     {
      "uid": "columnsGap",
      "name": "columnsGap",
      "comment": {
       "raw": [
        "Defines table columns gap size",
        " @default '24'"
       ],
       "tags": {
        "@default": "24"
       }
      },
      "typeValue": {
       "raw": "'12' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "24"
       ]
      },
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "60"
       ]
      },
      "from": "@epam/uui:BaseRowMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DataTableHeaderRowProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataTableHeaderRowProps",
     "nameFull": "DataTableHeaderRowProps"
    },
    "src": "uui/components/tables/DataTableHeaderRow.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "DataTableHeaderRowProps",
     "print": [
      "type DataTableHeaderRowProps = CoreDataTableHeaderRowProps & DataTableHeaderRowMods;"
     ]
    },
    "props": [
     {
      "uid": "columns",
      "name": "columns",
      "typeValue": {
       "raw": "DataColumnProps<any, any, any>[]"
      },
      "from": "@epam/uui-core:DataTableHeaderRowProps",
      "required": true
     },
     {
      "uid": "selectAll",
      "name": "selectAll",
      "typeValue": {
       "raw": "ICheckable"
      },
      "from": "@epam/uui-core:DataTableHeaderRowProps",
      "required": false
     },
     {
      "uid": "showFoldAll",
      "name": "showFoldAll",
      "comment": {
       "raw": [
        "Enables collapse/expand all functionality."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataTableHeaderRowProps",
      "required": false
     },
     {
      "uid": "onConfigButtonClick",
      "name": "onConfigButtonClick",
      "typeValue": {
       "raw": "(params: DataTableConfigModalParams) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataTableHeaderRowProps",
      "required": false
     },
     {
      "uid": "renderCell",
      "name": "renderCell",
      "typeValue": {
       "raw": "(props: DataTableHeaderCellProps<any, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:DataTableHeaderRowProps",
      "required": false
     },
     {
      "uid": "renderConfigButton",
      "name": "renderConfigButton",
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:DataTableHeaderRowProps",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "DataTableState<any, any>"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: DataTableState<any, any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "allowColumnsReordering",
      "name": "allowColumnsReordering",
      "comment": {
       "raw": [
        "If true, allows user to change columns order",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataTableColumnsConfigOptions",
      "required": false
     },
     {
      "uid": "allowColumnsResizing",
      "name": "allowColumnsResizing",
      "comment": {
       "raw": [
        "If true, allows user to change columns width",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataTableColumnsConfigOptions",
      "required": false
     },
     {
      "uid": "textCase",
      "name": "textCase",
      "typeValue": {
       "raw": "'upper' | 'normal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "upper",
        "normal"
       ]
      },
      "from": "@epam/uui:DataTableHeaderRowMods",
      "required": false
     },
     {
      "uid": "columnsGap",
      "name": "columnsGap",
      "comment": {
       "raw": [
        "Defines table columns gap size",
        " @default '24'"
       ],
       "tags": {
        "@default": "24"
       }
      },
      "typeValue": {
       "raw": "'12' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "24"
       ]
      },
      "from": "@epam/uui:DataTableHeaderRowMods",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "60"
       ]
      },
      "from": "@epam/uui:BaseRowMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DataTableMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataTableMods",
     "nameFull": "DataTableMods"
    },
    "src": "uui/components/tables/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataTableMods",
     "print": [
      "interface DataTableMods {",
      "    /** Min height of table rows and header */",
      "    size?: ControlSize;",
      "    /** Pass true, to turn row bottom border */",
      "    border?: boolean;",
      "    /** Configure column header text case",
      "     * @default 'normal'",
      "     * */",
      "    headerTextCase?: 'upper' | 'normal';",
      "}"
     ]
    },
    "props": [
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Min height of table rows and header"
       ]
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "required": false
     },
     {
      "uid": "border",
      "name": "border",
      "comment": {
       "raw": [
        "Pass true, to turn row bottom border"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "headerTextCase",
      "name": "headerTextCase",
      "comment": {
       "raw": [
        "Configure column header text case",
        " @default 'normal'"
       ],
       "tags": {
        "@default": "normal"
       }
      },
      "typeValue": {
       "raw": "'upper' | 'normal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "upper",
        "normal"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DataTableProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataTableProps",
     "nameFull": "DataTableProps<TItem, TId, TFilter>"
    },
    "src": "uui/components/tables/DataTable.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataTableProps<TItem, TId, TFilter>",
     "print": [
      "interface DataTableProps<TItem, TId, TFilter = any> extends IEditable<DataTableState>, DataSourceListProps, DataTableColumnsConfigOptions, Pick<VirtualListProps, 'onScroll'> {",
      "    /** Callback to get rows that will be rendered in table */",
      "    getRows?(): DataRowProps<TItem, TId>[];",
      "    /** Rows that should be rendered in table */",
      "    rows?: DataRowProps<TItem, TId>[];",
      "    /** Array of all possible columns for the table */",
      "    columns: DataColumnProps<TItem, TId>[];",
      "    /** Render callback for the table row.",
      "     * If omitted, default DataTableRow implementation will be rendered.",
      "     * */",
      "    renderRow?(props: DataTableRowProps<TItem, TId>): React.ReactNode;",
      "    /** Render callback for the 'No results' block. Will be rendered when table doesn't have rows for displaying, e.g. after search applying.",
      "     * If omitted, default implementation will be rendered.",
      "     * */",
      "    renderNoResultsBlock?(): React.ReactNode;",
      "    /** Pass true to enable the column configuration button in the last column header. On this button click will show the columns configuration modal.",
      "     * Note that you need to have at least one column fixed to the right for proper display",
      "     * */",
      "    showColumnsConfig?: boolean;",
      "    /** Array of filters to be added to the column header.",
      "     * For each filter, you need to specify the `columnKey` of the column where it will be attached.",
      "     * */",
      "    filters?: TableFiltersConfig<any>[];",
      "    /** Called when cell content is copied to other cells via the DataTable cell copying mechanism.",
      "     * This callback is typically used to update the state according to the changes.",
      "     * To enable cell copying, provide the canCopy prop for the column.",
      "     * */",
      "    onCopy?: (copyFrom: DataTableSelectedCellData<TItem, TId, TFilter>, selectedCells: DataTableSelectedCellData<TItem, TId, TFilter>[]) => void;",
      "    /** Render callback for column configuration modal.",
      "     * If omitted, default `ColumnsConfigurationModal` implementation will be rendered.",
      "     */",
      "    renderColumnsConfigurationModal?: (props: ColumnsConfigurationModalProps<TItem, TId, TFilter>) => React.ReactNode;",
      "    dataTableFocusManager?: DataTableFocusManager<TId>;",
      "    /**",
      "     * Enables collapse/expand all functionality.",
      "     * */",
      "    showFoldAll?: boolean;",
      "    /**",
      "     * Defines table header size",
      "     * @default '36'",
      "     * */",
      "    headerSize?: '36' | '48' | '60';",
      "    /**",
      "     * Defines table columns gap size",
      "     * @default '24'",
      "     * */",
      "    columnsGap?: '12' | '24';",
      "}"
     ]
    },
    "props": [
     {
      "uid": "getRows",
      "name": "getRows",
      "comment": {
       "raw": [
        "Callback to get rows that will be rendered in table"
       ]
      },
      "typeValue": {
       "raw": "() => DataRowProps<TItem, TId>[]"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "rows",
      "name": "rows",
      "comment": {
       "raw": [
        "Rows that should be rendered in table"
       ]
      },
      "typeValue": {
       "raw": "DataRowProps<TItem, TId>[]"
      },
      "required": false
     },
     {
      "uid": "columns",
      "name": "columns",
      "comment": {
       "raw": [
        "Array of all possible columns for the table"
       ]
      },
      "typeValue": {
       "raw": "DataColumnProps<TItem, TId, any>[]"
      },
      "required": true
     },
     {
      "uid": "renderRow",
      "name": "renderRow",
      "comment": {
       "raw": [
        "Render callback for the table row.",
        " If omitted, default DataTableRow implementation will be rendered."
       ]
      },
      "typeValue": {
       "raw": "(props: DataTableRowProps<TItem, TId>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "renderNoResultsBlock",
      "name": "renderNoResultsBlock",
      "comment": {
       "raw": [
        "Render callback for the 'No results' block. Will be rendered when table doesn't have rows for displaying, e.g. after search applying.",
        " If omitted, default implementation will be rendered."
       ]
      },
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "showColumnsConfig",
      "name": "showColumnsConfig",
      "comment": {
       "raw": [
        "Pass true to enable the column configuration button in the last column header. On this button click will show the columns configuration modal.",
        " Note that you need to have at least one column fixed to the right for proper display"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "filters",
      "name": "filters",
      "comment": {
       "raw": [
        "Array of filters to be added to the column header.",
        " For each filter, you need to specify the `columnKey` of the column where it will be attached."
       ]
      },
      "typeValue": {
       "raw": "TableFiltersConfig<any>[]"
      },
      "required": false
     },
     {
      "uid": "onCopy",
      "name": "onCopy",
      "comment": {
       "raw": [
        "Called when cell content is copied to other cells via the DataTable cell copying mechanism.",
        " This callback is typically used to update the state according to the changes.",
        " To enable cell copying, provide the canCopy prop for the column."
       ]
      },
      "typeValue": {
       "raw": "(copyFrom: DataTableSelectedCellData<TItem, TId, TFilter>, selectedCells: DataTableSelectedCellData<TItem, TId, TFilter>[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "renderColumnsConfigurationModal",
      "name": "renderColumnsConfigurationModal",
      "comment": {
       "raw": [
        "Render callback for column configuration modal.",
        " If omitted, default `ColumnsConfigurationModal` implementation will be rendered."
       ]
      },
      "typeValue": {
       "raw": "(props: ColumnsConfigurationModalProps<TItem, TId, TFilter>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "dataTableFocusManager",
      "name": "dataTableFocusManager",
      "typeValue": {
       "raw": "DataTableFocusManager<TId>"
      },
      "required": false
     },
     {
      "uid": "showFoldAll",
      "name": "showFoldAll",
      "comment": {
       "raw": [
        "Enables collapse/expand all functionality."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "headerSize",
      "name": "headerSize",
      "comment": {
       "raw": [
        "Defines table header size",
        " @default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "36",
        "48",
        "60"
       ]
      },
      "required": false
     },
     {
      "uid": "columnsGap",
      "name": "columnsGap",
      "comment": {
       "raw": [
        "Defines table columns gap size",
        " @default '24'"
       ],
       "tags": {
        "@default": "24"
       }
      },
      "typeValue": {
       "raw": "'12' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "24"
       ]
      },
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "DataTableState<any, any>"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: DataTableState<any, any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "selectAll",
      "name": "selectAll",
      "comment": {
       "raw": [
        "ICheckable object for Select All behavior.",
        " If omitted, Select All action will be absent."
       ]
      },
      "typeValue": {
       "raw": "ICheckable"
      },
      "from": "@epam/uui-core:DataSourceListProps",
      "required": false
     },
     {
      "uid": "isReloading",
      "name": "isReloading",
      "comment": {
       "raw": [
        "Signals that data is reloading on search/sort/filter/reload."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataSourceListProps",
      "required": false
     },
     {
      "uid": "rowsCount",
      "name": "rowsCount",
      "comment": {
       "raw": [
        "Count of rows, after applying filter, and folding on tree nodes.",
        " Obsolete! Please switch to exactRowsCount / knownRowsCount"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": "exactRowsCount",
      "name": "exactRowsCount",
      "comment": {
       "raw": [
        "Count of rows, if all rows loaded. Can be null while initial loading, or if API doesn't return count"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": "knownRowsCount",
      "name": "knownRowsCount",
      "comment": {
       "raw": [
        "There's at least knownRowsCount rows. There can be more if list is lazy loaded.",
        " Equals to exactRowsCount if all rows are loaded, or if API returns rows count",
        " Otherwise, exactRowsCount will be null, and knownRowsCount will specify number of loaded rows."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": "totalCount",
      "name": "totalCount",
      "comment": {
       "raw": [
        "Total count of items, before applying the filter. If there's a tree, it counts all nodes, including folded children"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataSourceListCounts",
      "required": false
     },
     {
      "uid": "allowColumnsReordering",
      "name": "allowColumnsReordering",
      "comment": {
       "raw": [
        "If true, allows user to change columns order",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataTableColumnsConfigOptions",
      "required": false
     },
     {
      "uid": "allowColumnsResizing",
      "name": "allowColumnsResizing",
      "comment": {
       "raw": [
        "If true, allows user to change columns width",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataTableColumnsConfigOptions",
      "required": false
     },
     {
      "uid": "onScroll",
      "name": "onScroll",
      "comment": {
       "raw": [
        "Called when list was scrolled"
       ]
      },
      "typeValue": {
       "raw": "(value: HTMLElement) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:UseVirtualListProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DataTableRowMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataTableRowMods",
     "nameFull": "DataTableRowMods"
    },
    "src": "uui/components/tables/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DataTableRowMods",
     "print": [
      "interface DataTableRowMods extends TableSizesAndPositionMods {",
      "    borderBottom?: any;",
      "    /**",
      "     * Defines columns gap size",
      "     * @default '24'",
      "     * */",
      "    columnsGap?: '12' | '24';",
      "}"
     ]
    },
    "props": [
     {
      "uid": "borderBottom",
      "name": "borderBottom",
      "typeValue": {
       "raw": "any"
      },
      "required": false
     },
     {
      "uid": "columnsGap",
      "name": "columnsGap",
      "comment": {
       "raw": [
        "Defines columns gap size",
        " @default '24'"
       ],
       "tags": {
        "@default": "24"
       }
      },
      "typeValue": {
       "raw": "'12' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "24"
       ]
      },
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "60"
       ]
      },
      "from": "@epam/uui:TableSizesAndPositionMods",
      "required": false
     },
     {
      "uid": "padding",
      "name": "padding",
      "typeValue": {
       "raw": "'0' | '12' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "0",
        "12",
        "24"
       ]
      },
      "from": "@epam/uui:TableSizesAndPositionMods",
      "required": false
     },
     {
      "uid": "alignActions",
      "name": "alignActions",
      "typeValue": {
       "raw": "'top' | 'center'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "center"
       ]
      },
      "from": "@epam/uui:TableSizesAndPositionMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DataTableRowProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataTableRowProps",
     "nameFull": "DataTableRowProps"
    },
    "src": "uui/components/tables/DataTableRow.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "DataTableRowProps",
     "print": [
      "type DataTableRowProps = CoreDataTableRowProps & DataTableRowMods;"
     ]
    },
    "props": [
     {
      "uid": "columns",
      "name": "columns",
      "comment": {
       "raw": [
        "Array of visible columns"
       ]
      },
      "typeValue": {
       "raw": "DataColumnProps<any, any, any>[]"
      },
      "from": "@epam/uui-core:DataTableRowProps",
      "required": false
     },
     {
      "uid": "renderCell",
      "name": "renderCell",
      "comment": {
       "raw": [
        "Render callback for each cell at row.",
        " If omitted, default cell renderer will be used."
       ]
      },
      "typeValue": {
       "raw": "(props: DataTableCellProps<any, any, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:DataTableRowProps",
      "required": false
     },
     {
      "uid": "renderDropMarkers",
      "name": "renderDropMarkers",
      "comment": {
       "raw": [
        "Render callback for the drop marker. Rendered only if 'dnd' option was provided via getRowProps.",
        " If omitted, default renderer will be used."
       ]
      },
      "typeValue": {
       "raw": "(props: DndActorRenderParams) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:DataTableRowProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "((e?: any) => void) & ((rowProps: DataRowProps<any, any>) => void) & ((rowProps: DataRowProps<any, any>) => void)"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "alignItems",
      "name": "alignItems",
      "comment": {
       "raw": [
        "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)",
        " @default 'center'"
       ],
       "tags": {
        "@default": "center"
       }
      },
      "typeValue": {
       "raw": "'top' | 'center' | 'bottom' | 'stretch'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "center",
        "bottom",
        "stretch"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "justifyContent",
      "name": "justifyContent",
      "comment": {
       "raw": [
        "Flexbox justifyContent property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
       ]
      },
      "typeValue": {
       "raw": "'center' | 'space-between' | 'space-around' | 'space-evenly' | 'start' | 'end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "center",
        "space-between",
        "space-around",
        "space-evenly",
        "start",
        "end"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "columnGap",
      "name": "columnGap",
      "comment": {
       "raw": [
        "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '36' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "36"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "rowGap",
      "name": "rowGap",
      "comment": {
       "raw": [
        "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '36' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "36"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "checkbox",
      "name": "checkbox",
      "comment": {
       "raw": [
        "If row needs a checkbox, this field should be specified, and it props can be configured here"
       ]
      },
      "typeValue": {
       "raw": "{ isVisible: boolean; } & IDisableable & ICanBeInvalid"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "isSelectable",
      "name": "isSelectable",
      "comment": {
       "raw": [
        "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "dnd",
      "name": "dnd",
      "comment": {
       "raw": [
        "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
       ]
      },
      "typeValue": {
       "raw": "IDndActor<any, any>"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Can be specified to make row act as a link (plain or SPA)"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "pin",
      "name": "pin",
      "comment": {
       "raw": [
        "A pure function that gets pinned state for each row.",
        " If row pinned, it means that it will be sticky inside their parent section."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<any, any>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "validationMessage",
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasValidationMessage",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "ID of the TItem rows displays"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": "rowKey",
      "name": "rowKey",
      "comment": {
       "raw": [
        "Key to be used as component's key when rendering. Usually, it's stringified ID"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": "index",
      "name": "index",
      "comment": {
       "raw": [
        "Index of the row, from the top of the list. This doesn't account any hierarchy."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": "parentId",
      "name": "parentId",
      "comment": {
       "raw": [
        "ID of the parent TItem"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "path",
      "name": "path",
      "comment": {
       "raw": [
        "Hierarchical path from the root node to the item (excluding the item itself)"
       ]
      },
      "typeValue": {
       "raw": "DataRowPathItem<any, any>[]"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "depth",
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of the row in tree, 0 for the top-level"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "indent",
      "name": "indent",
      "comment": {
       "raw": [
        "Indent of the item, to show hierarchy.",
        "  Unlike depth, it contains additional logic, to not add unnecessary indents:",
        "  if all children of node has no children, all nodes would get the same indent as parent."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isLoading",
      "name": "isLoading",
      "comment": {
       "raw": [
        "True if row is in loading state. 'value' is empty in this case"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isUnknown",
      "name": "isUnknown",
      "comment": {
       "raw": [
        "True if item doesn't exist in a dataSource"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isFoldable",
      "name": "isFoldable",
      "comment": {
       "raw": [
        "True if row be folded or unfolded (usually because it contains children)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isFolded",
      "name": "isFolded",
      "comment": {
       "raw": [
        "True if row is currently folded"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isChecked",
      "name": "isChecked",
      "comment": {
       "raw": [
        "True if row is checked with checkbox"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isCheckable",
      "name": "isCheckable",
      "comment": {
       "raw": [
        "True if row has checkbox and can be checkable"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isChildrenChecked",
      "name": "isChildrenChecked",
      "comment": {
       "raw": [
        "True if some of row's children are checked.",
        " Used to show 'indefinite' checkbox state, to show user that something inside is checked"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isSelected",
      "name": "isSelected",
      "comment": {
       "raw": [
        "True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isChildrenSelected",
      "name": "isChildrenSelected",
      "comment": {
       "raw": [
        "True if any of row's children is selected."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isFocused",
      "name": "isFocused",
      "comment": {
       "raw": [
        "True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isLastChild",
      "name": "isLastChild",
      "comment": {
       "raw": [
        "True if row is the last child of his parent"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "onFold",
      "name": "onFold",
      "comment": {
       "raw": [
        "Handles row folding change.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<any, any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "onCheck",
      "name": "onCheck",
      "comment": {
       "raw": [
        "Handles row checkbox change.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<any, any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "onSelect",
      "name": "onSelect",
      "comment": {
       "raw": [
        "Handles row selection.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<any, any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Handles row focusing."
       ]
      },
      "typeValue": {
       "raw": "(focusedIndex: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isPinned",
      "name": "isPinned",
      "comment": {
       "raw": [
        "True if row pinned, it means that it will be sticky inside his nesting level"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "borderBottom",
      "name": "borderBottom",
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui:DataTableRowMods",
      "required": false
     },
     {
      "uid": "columnsGap",
      "name": "columnsGap",
      "comment": {
       "raw": [
        "Defines columns gap size",
        " @default '24'"
       ],
       "tags": {
        "@default": "24"
       }
      },
      "typeValue": {
       "raw": "'12' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "24"
       ]
      },
      "from": "@epam/uui:DataTableRowMods",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "60"
       ]
      },
      "from": "@epam/uui:TableSizesAndPositionMods",
      "required": false
     },
     {
      "uid": "padding",
      "name": "padding",
      "typeValue": {
       "raw": "'0' | '12' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "0",
        "12",
        "24"
       ]
      },
      "from": "@epam/uui:TableSizesAndPositionMods",
      "required": false
     },
     {
      "uid": "alignActions",
      "name": "alignActions",
      "typeValue": {
       "raw": "'top' | 'center'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "center"
       ]
      },
      "from": "@epam/uui:TableSizesAndPositionMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DatePickerBodyProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DatePickerBodyProps",
     "nameFull": "DatePickerBodyProps"
    },
    "src": "uui/components/datePickers/DatePickerBody.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DatePickerBodyProps",
     "print": [
      "interface DatePickerBodyProps extends CommonDatePickerBodyProps, IControlled<string | null> {",
      "    /**",
      "     * Manually handles holidays",
      "     */",
      "    isHoliday?: (day: Dayjs) => boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "isHoliday",
      "name": "isHoliday",
      "comment": {
       "raw": [
        "Manually handles holidays"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui:CommonDatePickerBodyProps",
      "required": false
     },
     {
      "uid": "presets",
      "name": "presets",
      "typeValue": {
       "raw": "RangeDatePickerPresets"
      },
      "from": "@epam/uui:CommonDatePickerBodyProps",
      "required": false
     },
     {
      "uid": "renderDay",
      "name": "renderDay",
      "typeValue": {
       "raw": "(renderProps: DayProps) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:CommonDatePickerBodyProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | null) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DatePickerProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DatePickerProps",
     "nameFull": "DatePickerProps"
    },
    "src": "uui/components/datePickers/types.ts",
    "comment": {
     "raw": [
      "Represents the properties of the DatePicker component"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DatePickerProps",
     "print": [
      "/**",
      " * Represents the properties of the DatePicker component",
      " */",
      "interface DatePickerProps extends Overwrite<DatePickerMods, DatePickerModsOverride>, CommonDatePickerProps, IHasEditMode, ICanFocus<HTMLInputElement>, IEditable<string | null>, IAnalyticableOnChange<string>, IHasPlaceholder {",
      "    /**",
      "     * Defines where to place calendar icon",
      "     */",
      "    iconPosition?: 'left' | 'right';",
      "    /**",
      "     * Render prop to add a custom footer inside the DatePicker dropdown body",
      "     */",
      "    renderFooter?(): ReactNode;",
      "    /**",
      "     * Overrides rendering of the single day. For example, to highlight certain days",
      "     */",
      "    renderDay?: (renderProps: DayProps) => ReactElement<Element>;",
      "    /**",
      "     * Any HTML attributes (native or 'data-') to put on date picker parts",
      "     */",
      "    rawProps?: {",
      "        /**",
      "         * Any HTML attributes (native or 'data-') to put on date picker input",
      "         */",
      "        input?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
      "        /**",
      "         * Any HTML attributes (native or 'data-') to put on date picker body",
      "         */",
      "        body?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
      "    };",
      "}"
     ]
    },
    "props": [
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Defines where to place calendar icon"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "required": false
     },
     {
      "uid": "renderFooter",
      "name": "renderFooter",
      "comment": {
       "raw": [
        "Render prop to add a custom footer inside the DatePicker dropdown body"
       ]
      },
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "renderDay",
      "name": "renderDay",
      "comment": {
       "raw": [
        "Overrides rendering of the single day. For example, to highlight certain days"
       ]
      },
      "typeValue": {
       "raw": "(renderProps: DayProps) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on date picker parts"
       ]
      },
      "typeValue": {
       "raw": "{ input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
      },
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size."
       ]
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:DatePickerMods",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID attribute for the toggler input"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     },
     {
      "uid": "format",
      "name": "format",
      "comment": {
       "raw": [
        "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "comment": {
       "raw": [
        "Filter selectable days. Days, for which this callback returns false - will be disabled"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     },
     {
      "uid": "renderTarget",
      "name": "renderTarget",
      "comment": {
       "raw": [
        "Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach DatePicker to other components, e.g. Buttons"
       ]
      },
      "typeValue": {
       "raw": "(props: IDropdownToggler) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     },
     {
      "uid": "disableClear",
      "name": "disableClear",
      "comment": {
       "raw": [
        "Disable clearing date value (e.g. via cross icon)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     },
     {
      "uid": "placement",
      "name": "placement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'top' | 'bottom' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "top",
        "bottom",
        "auto-start",
        "auto-end",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     },
     {
      "uid": "isHoliday",
      "name": "isHoliday",
      "comment": {
       "raw": [
        "If this function returns true, the day will be highlighted as holiday"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     },
     {
      "uid": "inputCx",
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on datepicker input"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     },
     {
      "uid": "bodyCx",
      "name": "bodyCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on datepicker body"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "mode",
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'inline' | 'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "inline",
        "form",
        "cell"
       ]
      },
      "from": "@epam/uui:IHasEditMode",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | null) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | null, oldValue: string | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "placeholder",
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DropdownContainerProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DropdownContainerProps",
     "nameFull": "DropdownContainerProps"
    },
    "src": "uui/components/overlays/DropdownContainer.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a DropdownContainer component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DropdownContainerProps",
     "print": [
      "/** Represents the properties of a DropdownContainer component. */",
      "interface DropdownContainerProps extends uuiComponents.DropdownContainerProps, DropdownContainerMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "width",
      "name": "width",
      "comment": {
       "raw": [
        "Defines width in 'px' or 'auto'. If 'auto' provided, will be used width of the content."
       ]
      },
      "typeValue": {
       "raw": "number | 'auto'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "auto"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": "maxWidth",
      "name": "maxWidth",
      "comment": {
       "raw": [
        "Defines maximum width in 'px'. If 'auto' provided, will be used width of the content."
       ]
      },
      "typeValue": {
       "raw": "number | 'auto'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "auto"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": "height",
      "name": "height",
      "comment": {
       "raw": [
        "Defines height in 'px'."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": "maxHeight",
      "name": "maxHeight",
      "comment": {
       "raw": [
        "Defines maxHeight in 'px'. If 'auto' provided, will be used height of the content."
       ]
      },
      "typeValue": {
       "raw": "number | 'auto'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "auto"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": "showArrow",
      "name": "showArrow",
      "comment": {
       "raw": [
        "If true, arrow tip will be shown",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": "focusLock",
      "name": "focusLock",
      "comment": {
       "raw": [
        "Pass true to wrap DropdownContainer with FocusLock component to support keyboard navigation.",
        " If omitted, true value will be used.",
        "",
        " After DropdownContainer appeared the focus will be set on the first focusable element inside.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": "returnFocus",
      "name": "returnFocus",
      "comment": {
       "raw": [
        "Pass true to return focus into initial position on unmount.",
        " If omitted, true value will be used. It's used if focusLock=true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": "persistentFocus",
      "name": "persistentFocus",
      "comment": {
       "raw": [
        "Pass true to lock focus within DropdownContainer.",
        " If omitted, true value will be used. It's used if focusLock=true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": "lockProps",
      "name": "lockProps",
      "comment": {
       "raw": [
        "Pass any extra props to the FocusLock wrapper."
       ]
      },
      "typeValue": {
       "raw": "Record<string, any>"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": "closeOnEsc",
      "name": "closeOnEsc",
      "comment": {
       "raw": [
        "Pass true to handle Escape key press and call props.onClose().",
        " If omitted, true value will be used. It's used if focusLock=true."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": "onKeyDown",
      "name": "onKeyDown",
      "comment": {
       "raw": [
        "Called on keyDown event in DropdownContainer.",
        "     Can be used to provide your own handlers."
       ]
      },
      "typeValue": {
       "raw": "(e: React.KeyboardEvent<HTMLElement>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "style",
      "name": "style",
      "comment": {
       "raw": [
        "CSS style prop to put on the component"
       ]
      },
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-core:IHasStyleAttrs",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": "onClose",
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the Dropdown body"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "togglerWidth",
      "name": "togglerWidth",
      "comment": {
       "raw": [
        "The width of the toggler, which can be used to adjust the body width to it"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "togglerHeight",
      "name": "togglerHeight",
      "comment": {
       "raw": [
        "The height of the toggler"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "scheduleUpdate",
      "name": "scheduleUpdate",
      "comment": {
       "raw": [
        "Call to force recompute dropdown position"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "Indicates that dropdown is open"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "arrowProps",
      "name": "arrowProps",
      "comment": {
       "raw": [
        "Props that should be provided to the arrow component"
       ]
      },
      "typeValue": {
       "raw": "PopperArrowProps"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "placement",
      "name": "placement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'top' | 'bottom' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "top",
        "bottom",
        "auto-start",
        "auto-end",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "autoFocus",
      "name": "autoFocus",
      "comment": {
       "raw": [
        "enables or disables autoFocusing feature.",
        " If enabled - will move focus inside Lock, selecting the first or autoFocusable element",
        " If disable - will blur any focus on Lock activation.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "node_modules/react-focus-lock/interfaces.d.ts:ReactFocusLockProps",
      "required": false
     },
     {
      "uid": "as",
      "name": "as",
      "comment": {
       "raw": [
        "Component to use, defaults to 'div'"
       ]
      },
      "typeValue": {
       "raw": "string | React.ComponentClass<Record<string, any> & { children: React.ReactNode; }, any> | React.FunctionComponent<Record<string, any> & { children: React.ReactNode; }>"
      },
      "from": "node_modules/react-focus-lock/interfaces.d.ts:ReactFocusLockProps",
      "required": false
     },
     {
      "uid": "shards",
      "name": "shards",
      "comment": {
       "raw": [
        "Shards forms a scattered lock, same as `group` does, but in more \"low\" and controlled way"
       ]
      },
      "typeValue": {
       "raw": "(HTMLElement | React.RefObject<any>)[]"
      },
      "from": "node_modules/react-focus-lock/interfaces.d.ts:ReactFocusLockProps",
      "required": false
     },
     {
      "uid": "vPadding",
      "name": "vPadding",
      "comment": {
       "raw": [
        "Defines vertical padding."
       ]
      },
      "typeValue": {
       "raw": "'6' | '12' | '18' | '48' | '24' | '30'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "30",
        "48"
       ]
      },
      "from": "@epam/uui:DropdownContainerMods",
      "required": false
     },
     {
      "uid": "padding",
      "name": "padding",
      "comment": {
       "raw": [
        "Defines horizontal padding."
       ]
      },
      "typeValue": {
       "raw": "'6' | '12' | '18' | '24' | '30'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "30"
       ]
      },
      "from": "@epam/uui:DropdownContainerMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DropdownMenuContainerProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DropdownMenuContainerProps",
     "nameFull": "DropdownMenuContainerProps"
    },
    "src": "uui/components/overlays/DropdownMenu.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DropdownMenuContainerProps",
     "print": [
      "interface DropdownMenuContainerProps extends VPanelProps, IHasChildren, DropdownBodyProps, Pick<DropdownContainerProps, 'focusLock'> {",
      "    closeOnKey?: React.KeyboardEvent<HTMLElement>['key'];",
      "    minWidth?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "closeOnKey",
      "name": "closeOnKey",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "minWidth",
      "name": "minWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "style",
      "name": "style",
      "comment": {
       "raw": [
        "Native style attributes"
       ]
      },
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-core:VPanelProps",
      "required": false
     },
     {
      "uid": "onClose",
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the Dropdown body"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "togglerWidth",
      "name": "togglerWidth",
      "comment": {
       "raw": [
        "The width of the toggler, which can be used to adjust the body width to it"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "togglerHeight",
      "name": "togglerHeight",
      "comment": {
       "raw": [
        "The height of the toggler"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "scheduleUpdate",
      "name": "scheduleUpdate",
      "comment": {
       "raw": [
        "Call to force recompute dropdown position"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "Indicates that dropdown is open"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "arrowProps",
      "name": "arrowProps",
      "comment": {
       "raw": [
        "Props that should be provided to the arrow component"
       ]
      },
      "typeValue": {
       "raw": "PopperArrowProps"
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "placement",
      "name": "placement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'top' | 'bottom' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "top",
        "bottom",
        "auto-start",
        "auto-end",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:IDropdownBodyProps",
      "required": false
     },
     {
      "uid": "focusLock",
      "name": "focusLock",
      "comment": {
       "raw": [
        "Pass true to wrap DropdownContainer with FocusLock component to support keyboard navigation.",
        " If omitted, true value will be used.",
        "",
        " After DropdownContainer appeared the focus will be set on the first focusable element inside.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:DropdownContainerProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:DropSpotProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DropSpotProps",
     "nameFull": "DropSpotProps"
    },
    "src": "uui/components/fileUpload/DropSpot.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "DropSpotProps",
     "print": [
      "interface DropSpotProps extends IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasCX {",
      "    /**",
      "    * Defines the infoText. InfoText is additional information that can be rendered at the bottom of the AttachmentArea.",
      "    */",
      "    infoText?: React.ReactNode;",
      "    /**",
      "    * Called when files was added to the DropSpot.",
      "    */",
      "    onUploadFiles(files: File[]): any;",
      "    /**",
      "    * Hint for expected file type in file upload controls. See {@link https://developer.mozilla.org/en-US/docs/web/html/element/input#accept} for details",
      "    */",
      "    accept?: string;",
      "    /**",
      "    * Whether to allow single or multiple values. See {@link https://developer.mozilla.org/en-US/docs/web/html/element/input#multiple} for details",
      "    */",
      "    single?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "infoText",
      "name": "infoText",
      "comment": {
       "raw": [
        "Defines the infoText. InfoText is additional information that can be rendered at the bottom of the AttachmentArea."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": "onUploadFiles",
      "name": "onUploadFiles",
      "comment": {
       "raw": [
        "Called when files was added to the DropSpot."
       ]
      },
      "typeValue": {
       "raw": "(files: File[]) => any"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "accept",
      "name": "accept",
      "comment": {
       "raw": [
        "Hint for expected file type in file upload controls. See {@link https://developer.mozilla.org/en-US/docs/web/html/element/input#accept} for details"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "single",
      "name": "single",
      "comment": {
       "raw": [
        "Whether to allow single or multiple values. See {@link https://developer.mozilla.org/en-US/docs/web/html/element/input#multiple} for details"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:ErrorHandlerProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ErrorHandlerProps",
     "nameFull": "ErrorHandlerProps"
    },
    "src": "uui/components/errors/ErrorHandler.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ErrorHandlerProps",
     "print": [
      "interface ErrorHandlerProps extends IHasCX, IHasChildren {",
      "    /** Pure function to get error info for display based on error.",
      "     * If omitted, error info from default config will be used.",
      "     */",
      "    getErrorInfo?: (uuiError: UuiError | Error | ApiCallInfo, defaultErrorInfo: ErrorPageInfo) => ErrorPageInfo;",
      "    /** Callback to handle notification error.",
      "     * If omitted, default implementation with ErrorNotification will be used.",
      "     * */",
      "    onNotificationError?: (errors: ApiCallInfo) => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "getErrorInfo",
      "name": "getErrorInfo",
      "comment": {
       "raw": [
        "Pure function to get error info for display based on error.",
        " If omitted, error info from default config will be used."
       ]
      },
      "typeValue": {
       "raw": "(uuiError: UuiError | Error | ApiCallInfo, defaultErrorInfo: ErrorPageInfo) => ErrorPageInfo"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "onNotificationError",
      "name": "onNotificationError",
      "comment": {
       "raw": [
        "Callback to handle notification error.",
        " If omitted, default implementation with ErrorNotification will be used."
       ]
      },
      "typeValue": {
       "raw": "(errors: ApiCallInfo) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:FileCardItem": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "FileCardItem",
     "nameFull": "FileCardItem"
    },
    "src": "uui/components/fileUpload/FileCard.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "FileCardItem",
     "print": [
      "interface FileCardItem extends Partial<File & FileUploadResponse> {",
      "    /**",
      "    * Defines upload progress. It should be numbered value in range from 0 to 100', where 100 means that file fully loaded.",
      "    */",
      "    progress?: number;",
      "    /**",
      "    * Callback to handle aborted event which fired when a request has been aborted.",
      "    * See {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort_event} for details",
      "    */",
      "    abortXHR?: () => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "progress",
      "name": "progress",
      "comment": {
       "raw": [
        "Defines upload progress. It should be numbered value in range from 0 to 100', where 100 means that file fully loaded."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "abortXHR",
      "name": "abortXHR",
      "comment": {
       "raw": [
        "Callback to handle aborted event which fired when a request has been aborted.",
        " See {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort_event} for details"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "lastModified",
      "name": "lastModified",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/File/lastModified)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:File",
      "required": false
     },
     {
      "uid": "name",
      "name": "name",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/File/name)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:File",
      "required": false
     },
     {
      "uid": "webkitRelativePath",
      "name": "webkitRelativePath",
      "comment": {
       "raw": [
        "[MDN Reference](https://developer.mozilla.org/docs/Web/API/File/webkitRelativePath)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:File",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Blob",
      "required": false
     },
     {
      "uid": "type",
      "name": "type",
      "typeValue": {
       "raw": "'iframe' | 'image' | 'attachment'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "iframe",
        "image",
        "attachment"
       ]
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Blob",
      "required": false
     },
     {
      "uid": "arrayBuffer",
      "name": "arrayBuffer",
      "typeValue": {
       "raw": "(() => Promise<ArrayBuffer>) | undefined"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Blob",
      "required": false
     },
     {
      "uid": "slice",
      "name": "slice",
      "typeValue": {
       "raw": "((start?: number | undefined, end?: number | undefined, contentType?: string | undefined) => Blob) | undefined"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Blob",
      "required": false
     },
     {
      "uid": "stream",
      "name": "stream",
      "typeValue": {
       "raw": "(() => ReadableStream<Uint8Array>) | undefined"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Blob",
      "required": false
     },
     {
      "uid": "text",
      "name": "text",
      "typeValue": {
       "raw": "(() => Promise<string>) | undefined"
      },
      "from": "node_modules/typescript/lib/lib.dom.d.ts:Blob",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "ID of the file"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:FileUploadResponse",
      "required": false
     },
     {
      "uid": "path",
      "name": "path",
      "comment": {
       "raw": [
        "Path to the file source"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:FileUploadResponse",
      "required": false
     },
     {
      "uid": "extension",
      "name": "extension",
      "comment": {
       "raw": [
        "Extension of the file"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:FileUploadResponse",
      "required": false
     },
     {
      "uid": "error",
      "name": "error",
      "comment": {
       "raw": [
        "Upload error"
       ]
      },
      "typeValue": {
       "raw": "{ isError: boolean; message?: string | undefined; }"
      },
      "from": "@epam/uui-core:FileUploadResponse",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:FileCardProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "FileCardProps",
     "nameFull": "FileCardProps"
    },
    "src": "uui/components/fileUpload/FileCard.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "FileCardProps",
     "print": [
      "interface FileCardProps extends IClickable, IHasCX {",
      "    /** Defines file card item */",
      "    file: FileCardItem;",
      "    /**",
      "     * Defines card width",
      "     * @default '100%'",
      "     */",
      "    width?: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "file",
      "name": "file",
      "comment": {
       "raw": [
        "Defines file card item"
       ]
      },
      "typeValue": {
       "raw": "FileCardItem"
      },
      "required": true
     },
     {
      "uid": "width",
      "name": "width",
      "comment": {
       "raw": [
        "Defines card width",
        " @default '100%'"
       ],
       "tags": {
        "@default": "100%"
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:FiltersPanelModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "FiltersPanelModsOverride",
     "nameFull": "FiltersPanelModsOverride"
    },
    "src": "uui/components/filters/FiltersPanel.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "FiltersPanelModsOverride",
     "print": [
      "interface FiltersPanelModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:FiltersPanelProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "FiltersPanelProps",
     "nameFull": "FiltersPanelProps<TFilter>"
    },
    "src": "uui/components/filters/FiltersPanel.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "FiltersPanelProps<TFilter>",
     "print": [
      "interface FiltersPanelProps<TFilter> extends Overwrite<FiltersPanelMods, FiltersPanelModsOverride> {",
      "    /** Filters config to get data how to render filters */",
      "    filters: TableFiltersConfig<TFilter>[];",
      "    /** Current state value of the table(list) */",
      "    tableState: DataTableState;",
      "    /** Called when state needs to be changed */",
      "    setTableState: (newState: DataTableState) => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "filters",
      "name": "filters",
      "comment": {
       "raw": [
        "Filters config to get data how to render filters"
       ]
      },
      "typeValue": {
       "raw": "TableFiltersConfig<TFilter>[]"
      },
      "required": true
     },
     {
      "uid": "tableState",
      "name": "tableState",
      "comment": {
       "raw": [
        "Current state value of the table(list)"
       ]
      },
      "typeValue": {
       "raw": "DataTableState<any, any>"
      },
      "required": true
     },
     {
      "uid": "setTableState",
      "name": "setTableState",
      "comment": {
       "raw": [
        "Called when state needs to be changed"
       ]
      },
      "typeValue": {
       "raw": "(newState: DataTableState<any, any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines size(height) of filter panel and filters"
       ]
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:FiltersPanelMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:FlexCellProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "FlexCellProps",
     "nameFull": "FlexCellProps"
    },
    "src": "uui/components/layout/FlexItems/FlexCell.tsx",
    "comment": {
     "raw": [
      "Represents the properties of the FlexCell component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "FlexCellProps",
     "print": [
      "/** Represents the properties of the FlexCell component. */",
      "type FlexCellProps = uuiCore.FlexCellProps & FlexCellMods;"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "width",
      "name": "width",
      "comment": {
       "raw": [
        "CSS width. Set to 'auto' to make FlexCell resize to it's content"
       ]
      },
      "typeValue": {
       "raw": "number | 'auto' | '100%'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "auto",
        "100%"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/uui-core:FlexCellProps",
      "required": false
     },
     {
      "uid": "minWidth",
      "name": "minWidth",
      "comment": {
       "raw": [
        "CSS min-width"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:FlexCellProps",
      "required": false
     },
     {
      "uid": "grow",
      "name": "grow",
      "comment": {
       "raw": [
        "Flexbox flex-grow property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-grow)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:FlexCellProps",
      "required": false
     },
     {
      "uid": "shrink",
      "name": "shrink",
      "comment": {
       "raw": [
        "Flexbox shrink property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-shrink)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:FlexCellProps",
      "required": false
     },
     {
      "uid": "textAlign",
      "name": "textAlign",
      "comment": {
       "raw": [
        "CSS text-align property"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'center'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "center"
       ]
      },
      "from": "@epam/uui-core:FlexCellProps",
      "required": false
     },
     {
      "uid": "alignSelf",
      "name": "alignSelf",
      "comment": {
       "raw": [
        "Flexbox align-self property. Aligns items vertically for horizontal flexbox. [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-align-self)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:FlexCellProps",
      "required": false
     },
     {
      "uid": "style",
      "name": "style",
      "comment": {
       "raw": [
        "Standard style attribute. Styles are added to element style, overriding supplied flex styles"
       ]
      },
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-core:FlexCellProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:FlexRowProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "FlexRowProps",
     "nameFull": "FlexRowProps"
    },
    "src": "uui/components/layout/FlexItems/FlexRow.tsx",
    "comment": {
     "raw": [
      "Represents the properties of the FlexRow component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "FlexRowProps",
     "print": [
      "/** Represents the properties of the FlexRow component. */",
      "interface FlexRowProps extends uuiFlexRowProps, RowMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "alignItems",
      "name": "alignItems",
      "comment": {
       "raw": [
        "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)",
        " @default 'center'"
       ],
       "tags": {
        "@default": "center"
       }
      },
      "typeValue": {
       "raw": "'top' | 'center' | 'bottom' | 'stretch'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "center",
        "bottom",
        "stretch"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "justifyContent",
      "name": "justifyContent",
      "comment": {
       "raw": [
        "Flexbox justifyContent property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
       ]
      },
      "typeValue": {
       "raw": "'center' | 'space-between' | 'space-around' | 'space-evenly' | 'start' | 'end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "center",
        "space-between",
        "space-around",
        "space-evenly",
        "start",
        "end"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "columnGap",
      "name": "columnGap",
      "comment": {
       "raw": [
        "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '36' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "36"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "rowGap",
      "name": "rowGap",
      "comment": {
       "raw": [
        "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '36' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "36"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines row size"
       ]
      },
      "typeValue": {
       "raw": "null | '36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        null
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "borderTop",
      "name": "borderTop",
      "comment": {
       "raw": [
        "Pass true, to enable row top border"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "borderBottom",
      "name": "borderBottom",
      "comment": {
       "raw": [
        "Pass true, to enable row bottom border"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "margin",
      "name": "margin",
      "comment": {
       "raw": [
        "Defines row margin"
       ]
      },
      "typeValue": {
       "raw": "'12' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "24"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "padding",
      "name": "padding",
      "comment": {
       "raw": [
        "Defines horizontal row padding"
       ]
      },
      "typeValue": {
       "raw": "'6' | '12' | '18' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "spacing",
      "name": "spacing",
      "comment": {
       "raw": [
        "Defines row spacing"
       ]
      },
      "typeValue": {
       "raw": "'6' | '12' | '18'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "topShadow",
      "name": "topShadow",
      "comment": {
       "raw": [
        "Pass true, to show a top shadow"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "vPadding",
      "name": "vPadding",
      "comment": {
       "raw": [
        "Defines vertical row padding"
       ]
      },
      "typeValue": {
       "raw": "'12' | '18' | '36' | '48' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "36",
        "48"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "background",
      "name": "background",
      "comment": {
       "raw": [
        "Defines row background"
       ]
      },
      "typeValue": {
       "raw": "'surface-main'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "surface-main"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:GlobalMenuProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "GlobalMenuProps",
     "nameFull": "GlobalMenuProps"
    },
    "src": "uui/components/navigation/MainMenu/GlobalMenu.tsx",
    "comment": {
     "raw": [
      "Represents the properties of the GlobalMenu component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "GlobalMenuProps",
     "print": [
      "/** Represents the properties of the GlobalMenu component. */",
      "interface GlobalMenuProps extends IAdaptiveItem, IHasCX, IHasRawProps<React.HTMLAttributes<HTMLButtonElement>> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "estimatedWidth",
      "name": "estimatedWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "priority",
      "name": "priority",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "showInBurgerMenu",
      "name": "showInBurgerMenu",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "collapseToMore",
      "name": "collapseToMore",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "collapsedContainer",
      "name": "collapsedContainer",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:IconButtonCoreProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "IconButtonCoreProps",
     "nameFull": "IconButtonCoreProps"
    },
    "src": "uui/components/buttons/IconButton.tsx",
    "comment": {
     "raw": [
      "Represents the Core properties of the IconButton component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "IconButtonCoreProps",
     "print": [
      "/** Represents the Core properties of the IconButton component. */",
      "type IconButtonCoreProps = Omit<uuiComponents.IconButtonProps, 'size'> & {",
      "    /**",
      "     * Defines component size.",
      "     */",
      "    size?: '18' | '24' | '30' | '36';",
      "};"
     ]
    },
    "props": [
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:IconButtonProps",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:IconButtonProps",
      "required": false
     },
     {
      "uid": "showDropdownIcon",
      "name": "showDropdownIcon",
      "comment": {
       "raw": [
        "Pass true to enable dropdown icon."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:IconButtonProps",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size."
       ]
      },
      "typeValue": {
       "raw": "'18' | '36' | '24' | '30'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:IconButtonModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "IconButtonModsOverride",
     "nameFull": "IconButtonModsOverride"
    },
    "src": "uui/components/buttons/IconButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IconButtonModsOverride",
     "print": [
      "interface IconButtonModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:IconButtonProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "IconButtonProps",
     "nameFull": "IconButtonProps"
    },
    "src": "uui/components/buttons/IconButton.tsx",
    "comment": {
     "raw": [
      "Represents the properties of the IconButton component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IconButtonProps",
     "print": [
      "/** Represents the properties of the IconButton component. */",
      "interface IconButtonProps extends IconButtonCoreProps, Overwrite<IconButtonMods, IconButtonModsOverride> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:IconButtonProps",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:IconButtonProps",
      "required": false
     },
     {
      "uid": "showDropdownIcon",
      "name": "showDropdownIcon",
      "comment": {
       "raw": [
        "Pass true to enable dropdown icon."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:IconButtonProps",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size."
       ]
      },
      "typeValue": {
       "raw": "'18' | '36' | '24' | '30'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36"
       ]
      },
      "from": "@epam/uui:IconButtonCoreProps",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'neutral'"
       ],
       "tags": {
        "@default": "neutral"
       }
      },
      "typeValue": {
       "raw": "'info' | 'success' | 'warning' | 'error' | 'critical' | 'neutral' | 'primary' | 'secondary' | 'accent' | 'white'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "info",
        "success",
        "warning",
        "error",
        "critical",
        "neutral",
        "primary",
        "secondary",
        "accent",
        "white"
       ]
      },
      "from": "@epam/uui:IconButtonMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:IDropdownMenuItemProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "IDropdownMenuItemProps",
     "nameFull": "IDropdownMenuItemProps"
    },
    "src": "uui/components/overlays/DropdownMenu.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IDropdownMenuItemProps",
     "print": [
      "interface IDropdownMenuItemProps extends IDropdownTogglerProps, IHasCaption, IHasIcon, ICanRedirect, IHasCX, IDisableable, IAnalyticableClick {",
      "    isSelected?: boolean;",
      "    isActive?: boolean;",
      "    indent?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "isSelected",
      "name": "isSelected",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "isActive",
      "name": "isActive",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "indent",
      "name": "indent",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "toggleDropdownOpening",
      "name": "toggleDropdownOpening",
      "comment": {
       "raw": [
        "Called when associated dropdown should open or close"
       ]
      },
      "typeValue": {
       "raw": "(value: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownTogglerProps",
      "required": false
     },
     {
      "uid": "isInteractedOutside",
      "name": "isInteractedOutside",
      "comment": {
       "raw": [
        "Called when component is interacted outside, to close the dropdown"
       ]
      },
      "typeValue": {
       "raw": "(event: Event) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IDropdownTogglerProps",
      "required": false
     },
     {
      "uid": "ref",
      "name": "ref",
      "comment": {
       "raw": [
        "Toggler component ref"
       ]
      },
      "typeValue": {
       "raw": "null | React.RefObject<any> | (instance: any) => void"
      },
      "from": "@epam/uui-core:IDropdownTogglerProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:IndeterminateBarMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "IndeterminateBarMods",
     "nameFull": "IndeterminateBarMods"
    },
    "src": "uui/components/widgets/IndeterminateBar.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "IndeterminateBarMods",
     "print": [
      "interface IndeterminateBarMods extends IHasCX {",
      "    /** Component size */",
      "    size?: '12' | '18' | '24';",
      "}"
     ]
    },
    "props": [
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Component size"
       ]
      },
      "typeValue": {
       "raw": "'12' | '18' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24"
       ]
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:ITextPlaceholderProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ITextPlaceholderProps",
     "nameFull": "ITextPlaceholderProps"
    },
    "src": "uui/components/typography/TextPlaceholder.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ITextPlaceholderProps",
     "print": [
      "interface ITextPlaceholderProps extends IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasCX {",
      "    /** Number of placeholder worlds to render in block */",
      "    wordsCount?: number;",
      "    /** Pass true, to turn off the placeholder animation */",
      "    isNotAnimated?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "wordsCount",
      "name": "wordsCount",
      "comment": {
       "raw": [
        "Number of placeholder worlds to render in block"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "isNotAnimated",
      "name": "isNotAnimated",
      "comment": {
       "raw": [
        "Pass true, to turn off the placeholder animation"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:LabeledInputModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "LabeledInputModsOverride",
     "nameFull": "LabeledInputModsOverride"
    },
    "src": "uui/components/layout/LabeledInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "LabeledInputModsOverride",
     "print": [
      "interface LabeledInputModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:LabeledInputProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "LabeledInputProps",
     "nameFull": "LabeledInputProps"
    },
    "src": "uui/components/layout/LabeledInput.tsx",
    "comment": {
     "raw": [
      "Represents the properties of the LabeledInput component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "LabeledInputProps",
     "print": [
      "/** Represents the properties of the LabeledInput component. */",
      "interface LabeledInputProps extends uuiComponents.LabeledInputProps, Overwrite<LabeledInputMods, LabeledInputModsOverride> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "Tooltip",
      "name": "Tooltip",
      "comment": {
       "raw": [
        "Overrides the default Tooltip component to use for info tooltip"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<TooltipProps, any> | React.FunctionComponent<TooltipProps>"
      },
      "from": "@epam/uui-components:LabeledInputProps",
      "required": false
     },
     {
      "uid": "infoIcon",
      "name": "infoIcon",
      "comment": {
       "raw": [
        "Overrides the default info icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:LabeledInputProps",
      "required": false
     },
     {
      "uid": "labelPosition",
      "name": "labelPosition",
      "comment": {
       "raw": [
        "Position of the label, relative to the wrapped component (top of left)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'top'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "top"
       ]
      },
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": "info",
      "name": "info",
      "comment": {
       "raw": [
        "Info hint text to show in tooltip"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": "isOptional",
      "name": "isOptional",
      "comment": {
       "raw": [
        "Marks related field as optional"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": "htmlFor",
      "name": "htmlFor",
      "comment": {
       "raw": [
        "HTML 'for' tag to bind the label to a component.",
        " Can be used when component can't be wrapped by the LabeledInput, e.g. when form is layed out as table with labels and inputs placed into different columns"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "A value from LabeledInput children"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": "maxLength",
      "name": "maxLength",
      "comment": {
       "raw": [
        "Maximum text length, in characters"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": "charCounter",
      "name": "charCounter",
      "comment": {
       "raw": [
        "Showing current text length, in characters and maxLength"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": "footnote",
      "name": "footnote",
      "comment": {
       "raw": [
        "Additional info positioned at the bottom of LabeledInput"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": "sidenote",
      "name": "sidenote",
      "comment": {
       "raw": [
        "Additional info positioned to the right side of label"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:LabeledInputCoreProps",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "label",
      "name": "label",
      "comment": {
       "raw": [
        "Component label. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in labels."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasLabel",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "validationMessage",
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasValidationMessage",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size."
       ]
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:LabeledInputMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:LinkButtonCoreProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "LinkButtonCoreProps",
     "nameFull": "LinkButtonCoreProps"
    },
    "src": "uui/components/buttons/LinkButton.tsx",
    "comment": {
     "raw": [
      "Represents the Core properties of the LinkButton component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "LinkButtonCoreProps",
     "print": [
      "/** Represents the Core properties of the LinkButton component. */",
      "interface LinkButtonCoreProps extends ClickableComponentProps, IDropdownToggler, IHasIcon, IHasCaption {",
      "    /** Icon for drop-down toggler */",
      "    dropdownIcon?: Icon;",
      "    /**",
      "     * Defines component size.",
      "     * @default '36'",
      "     */",
      "    size?: types.ControlSize | '42';",
      "    /**",
      "     * Defines component font-weight",
      "     * @default 'semibold'",
      "     */",
      "    weight?: 'semibold' | 'regular';",
      "    /**",
      "     * Defines component underline style",
      "     */",
      "    underline?: 'solid' | 'dashed';",
      "}"
     ]
    },
    "props": [
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "required": false
     },
     {
      "uid": "weight",
      "name": "weight",
      "comment": {
       "raw": [
        "Defines component font-weight",
        " @default 'semibold'"
       ],
       "tags": {
        "@default": "semibold"
       }
      },
      "typeValue": {
       "raw": "'semibold' | 'regular'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "semibold",
        "regular"
       ]
      },
      "required": false
     },
     {
      "uid": "underline",
      "name": "underline",
      "comment": {
       "raw": [
        "Defines component underline style"
       ]
      },
      "typeValue": {
       "raw": "'solid' | 'dashed'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "dashed"
       ]
      },
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:LinkButtonModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "LinkButtonModsOverride",
     "nameFull": "LinkButtonModsOverride"
    },
    "src": "uui/components/buttons/LinkButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "LinkButtonModsOverride",
     "print": [
      "interface LinkButtonModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:LinkButtonProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "LinkButtonProps",
     "nameFull": "LinkButtonProps"
    },
    "src": "uui/components/buttons/LinkButton.tsx",
    "comment": {
     "raw": [
      "Represents the properties of the LinkButton component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "LinkButtonProps",
     "print": [
      "/** Represents the properties of the LinkButton component. */",
      "interface LinkButtonProps extends LinkButtonCoreProps, Overwrite<LinkButtonMods, LinkButtonModsOverride> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:LinkButtonCoreProps",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:LinkButtonCoreProps",
      "required": false
     },
     {
      "uid": "weight",
      "name": "weight",
      "comment": {
       "raw": [
        "Defines component font-weight",
        " @default 'semibold'"
       ],
       "tags": {
        "@default": "semibold"
       }
      },
      "typeValue": {
       "raw": "'semibold' | 'regular'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "semibold",
        "regular"
       ]
      },
      "from": "@epam/uui:LinkButtonCoreProps",
      "required": false
     },
     {
      "uid": "underline",
      "name": "underline",
      "comment": {
       "raw": [
        "Defines component underline style"
       ]
      },
      "typeValue": {
       "raw": "'solid' | 'dashed'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "dashed"
       ]
      },
      "from": "@epam/uui:LinkButtonCoreProps",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color",
        " @default 'primary'"
       ],
       "tags": {
        "@default": "primary"
       }
      },
      "typeValue": {
       "raw": "'critical' | 'primary' | 'secondary' | 'accent' | 'white' | 'contrast'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "critical",
        "primary",
        "secondary",
        "accent",
        "white",
        "contrast"
       ]
      },
      "from": "@epam/uui:LinkButtonMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:MainMenuAvatarProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "MainMenuAvatarProps",
     "nameFull": "MainMenuAvatarProps"
    },
    "src": "uui/components/navigation/MainMenu/MainMenuAvatar.tsx",
    "comment": {
     "raw": [
      "Represents the properties of the MainMenuAvatar component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "MainMenuAvatarProps",
     "print": [
      "/** Represents the properties of the MainMenuAvatar component. */",
      "interface MainMenuAvatarProps extends IClickable, IAdaptiveItem, IDropdownToggler, IHasCX {",
      "    avatarUrl?: string;",
      "    icon?: Icon;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "avatarUrl",
      "name": "avatarUrl",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "estimatedWidth",
      "name": "estimatedWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "priority",
      "name": "priority",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "showInBurgerMenu",
      "name": "showInBurgerMenu",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "collapseToMore",
      "name": "collapseToMore",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "collapsedContainer",
      "name": "collapsedContainer",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:MainMenuButtonProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "MainMenuButtonProps",
     "nameFull": "MainMenuButtonProps"
    },
    "src": "uui/components/navigation/MainMenu/MainMenuButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "MainMenuButtonProps",
     "print": [
      "type MainMenuButtonProps = MainMenuButtonMods & IAdaptiveItem & IDropdownToggler & Omit<ClickableComponentProps, 'isDisabled'> & IHasIcon & IHasCaption & {",
      "    /** Icon for drop-down toggler */",
      "    dropdownIcon?: Icon;",
      "    /** Count value to be placed in component */",
      "    count?: React.ReactNode;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "type",
      "name": "type",
      "comment": {
       "raw": [
        "Defines component type. The primary button leads to the main pages of the site, and the secondary to the others."
       ]
      },
      "typeValue": {
       "raw": "'primary' | 'secondary'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "primary",
        "secondary"
       ]
      },
      "from": "@epam/uui:MainMenuButtonMods",
      "required": false
     },
     {
      "uid": "estimatedWidth",
      "name": "estimatedWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "priority",
      "name": "priority",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "showInBurgerMenu",
      "name": "showInBurgerMenu",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "collapseToMore",
      "name": "collapseToMore",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "collapsedContainer",
      "name": "collapsedContainer",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "count",
      "name": "count",
      "comment": {
       "raw": [
        "Count value to be placed in component"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:MainMenuIconProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "MainMenuIconProps",
     "nameFull": "MainMenuIconProps"
    },
    "src": "uui/components/navigation/MainMenu/MainMenuIcon.tsx",
    "comment": {
     "raw": [
      "Represents the properties of the MainMenuIcon component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "MainMenuIconProps",
     "print": [
      "/** Represents the properties of the MainMenuIcon component. */",
      "type MainMenuIconProps = ButtonProps & IAdaptiveItem & {",
      "    /*",
      "    * Defines component icon.",
      "    */",
      "    icon: Icon;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "onClear",
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": "clearIcon",
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": "estimatedWidth",
      "name": "estimatedWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "priority",
      "name": "priority",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "showInBurgerMenu",
      "name": "showInBurgerMenu",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "collapseToMore",
      "name": "collapseToMore",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "collapsedContainer",
      "name": "collapsedContainer",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:MainMenuProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "MainMenuProps",
     "nameFull": "MainMenuProps"
    },
    "src": "uui/components/navigation/MainMenu/MainMenu.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "MainMenuProps",
     "print": [
      "type MainMenuProps = uuiComponents.MainMenuProps;"
     ]
    },
    "props": [
     {
      "uid": "items",
      "name": "items",
      "comment": {
       "raw": [
        "Array of menu items to be rendered"
       ]
      },
      "typeValue": {
       "raw": "{ render: (item: any, hiddenItems?: any[] | undefined, displayedItems?: any[] | undefined) => any; priority: number; collapsedContainer?: boolean | undefined; id: string; }[]"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "@deprecated",
        " Use 'items' prop to define menu content"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": "appLogoUrl",
      "name": "appLogoUrl",
      "comment": {
       "raw": [
        "Path to the logo source"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": "logoLink",
      "name": "logoLink",
      "comment": {
       "raw": [
        "SPA link to navigate on logo click"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": "logoHref",
      "name": "logoHref",
      "comment": {
       "raw": [
        "Href to navigate on logo click"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": "onLogoClick",
      "name": "onLogoClick",
      "comment": {
       "raw": [
        "Called when logo is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e: React.MouseEvent<Element, MouseEvent>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": "customerLogoUrl",
      "name": "customerLogoUrl",
      "comment": {
       "raw": [
        "Path to the customer logo source"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": "customerLogoLink",
      "name": "customerLogoLink",
      "comment": {
       "raw": [
        "SPA link to navigate on customer logo click"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": "customerLogoHref",
      "name": "customerLogoHref",
      "comment": {
       "raw": [
        "Href to navigate on customer logo click"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": "customerLogoBgColor",
      "name": "customerLogoBgColor",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": "isTransparent",
      "name": "isTransparent",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": "renderBurger",
      "name": "renderBurger",
      "comment": {
       "raw": [
        "Render callback for burger menu content.",
        " Burger will appear, which some items don't fit the menu width."
       ]
      },
      "typeValue": {
       "raw": "(props: { onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": "alwaysShowBurger",
      "name": "alwaysShowBurger",
      "comment": {
       "raw": [
        "If true, Burger button will be always visible"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": "serverBadge",
      "name": "serverBadge",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": "MainMenuDropdown",
      "name": "MainMenuDropdown",
      "comment": {
       "raw": [
        "Internal prop to define component for MainMenuDropdown"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<MainMenuDropdownProps, any> | React.FunctionComponent<MainMenuDropdownProps>"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": "Burger",
      "name": "Burger",
      "comment": {
       "raw": [
        "Internal prop to define component for Burger"
       ]
      },
      "typeValue": {
       "raw": "React.ComponentClass<BurgerProps, any> | React.FunctionComponent<BurgerProps>"
      },
      "from": "@epam/uui-components:MainMenuProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:MainMenuSearchProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "MainMenuSearchProps",
     "nameFull": "MainMenuSearchProps"
    },
    "src": "uui/components/navigation/MainMenu/MainMenuSearch.tsx",
    "comment": {
     "raw": [
      "Represents the properties of the MainMenuSearch component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "MainMenuSearchProps",
     "print": [
      "/** Represents the properties of the MainMenuSearch component. */",
      "interface MainMenuSearchProps extends TextInputProps, IAdaptiveItem {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "acceptIcon",
      "name": "acceptIcon",
      "comment": {
       "raw": [
        "Overrides accept (check) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": "cancelIcon",
      "name": "cancelIcon",
      "comment": {
       "raw": [
        "Overrides cancel (cross) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Overrides dropdown (chevron) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": "inputCx",
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put to the HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": "renderInput",
      "name": "renderInput",
      "comment": {
       "raw": [
        "overrides rendering of HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "(props: IRenderInputProps) => JSX.Element"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": "onCancel",
      "name": "onCancel",
      "comment": {
       "raw": [
        "Enables cancel (cross) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "onAccept",
      "name": "onAccept",
      "comment": {
       "raw": [
        "Enables accept (check) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "onKeyDown",
      "name": "onKeyDown",
      "comment": {
       "raw": [
        "keydown event handler to put on the HTML input element"
       ]
      },
      "typeValue": {
       "raw": "(e?: React.KeyboardEvent<HTMLInputElement> | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "autoFocus",
      "name": "autoFocus",
      "comment": {
       "raw": [
        "Put focus on the element, when component is mounted"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "type",
      "name": "type",
      "comment": {
       "raw": [
        "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "autoComplete",
      "name": "autoComplete",
      "comment": {
       "raw": [
        "Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "name",
      "name": "name",
      "comment": {
       "raw": [
        "Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "maxLength",
      "name": "maxLength",
      "comment": {
       "raw": [
        "Maximum input length in characters"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "inputMode",
      "name": "inputMode",
      "comment": {
       "raw": [
        "Standard [inputMode attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode}"
       ]
      },
      "typeValue": {
       "raw": "'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "none",
        "text",
        "tel",
        "url",
        "email",
        "numeric",
        "decimal",
        "search"
       ]
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID attribute for input"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "placeholder",
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | null, oldValue: string | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLInputElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "estimatedWidth",
      "name": "estimatedWidth",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "priority",
      "name": "priority",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "showInBurgerMenu",
      "name": "showInBurgerMenu",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "collapseToMore",
      "name": "collapseToMore",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     },
     {
      "uid": "collapsedContainer",
      "name": "collapsedContainer",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IAdaptiveItem",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:ModalFooterProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ModalFooterProps",
     "nameFull": "ModalFooterProps"
    },
    "src": "uui/components/overlays/Modals.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ModalFooterProps",
     "print": [
      "interface ModalFooterProps extends FlexRowProps, ModalFooterCoreProps {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "alignItems",
      "name": "alignItems",
      "comment": {
       "raw": [
        "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)",
        " @default 'center'"
       ],
       "tags": {
        "@default": "center"
       }
      },
      "typeValue": {
       "raw": "'top' | 'center' | 'bottom' | 'stretch'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "center",
        "bottom",
        "stretch"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "justifyContent",
      "name": "justifyContent",
      "comment": {
       "raw": [
        "Flexbox justifyContent property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
       ]
      },
      "typeValue": {
       "raw": "'center' | 'space-between' | 'space-around' | 'space-evenly' | 'start' | 'end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "center",
        "space-between",
        "space-around",
        "space-evenly",
        "start",
        "end"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "columnGap",
      "name": "columnGap",
      "comment": {
       "raw": [
        "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '36' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "36"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "rowGap",
      "name": "rowGap",
      "comment": {
       "raw": [
        "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '36' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "36"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines row size"
       ]
      },
      "typeValue": {
       "raw": "null | '36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        null
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "borderTop",
      "name": "borderTop",
      "comment": {
       "raw": [
        "Pass true, to enable row top border"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "borderBottom",
      "name": "borderBottom",
      "comment": {
       "raw": [
        "Pass true, to enable row bottom border"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "margin",
      "name": "margin",
      "comment": {
       "raw": [
        "Defines row margin"
       ]
      },
      "typeValue": {
       "raw": "'12' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "24"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "padding",
      "name": "padding",
      "comment": {
       "raw": [
        "Defines horizontal row padding"
       ]
      },
      "typeValue": {
       "raw": "'6' | '12' | '18' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "spacing",
      "name": "spacing",
      "comment": {
       "raw": [
        "Defines row spacing"
       ]
      },
      "typeValue": {
       "raw": "'6' | '12' | '18'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "topShadow",
      "name": "topShadow",
      "comment": {
       "raw": [
        "Pass true, to show a top shadow"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "vPadding",
      "name": "vPadding",
      "comment": {
       "raw": [
        "Defines vertical row padding"
       ]
      },
      "typeValue": {
       "raw": "'12' | '18' | '36' | '48' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "36",
        "48"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "background",
      "name": "background",
      "comment": {
       "raw": [
        "Defines row background"
       ]
      },
      "typeValue": {
       "raw": "'surface-main'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "surface-main"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:ModalHeaderProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ModalHeaderProps",
     "nameFull": "ModalHeaderProps"
    },
    "src": "uui/components/overlays/Modals.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ModalHeaderProps",
     "print": [
      "interface ModalHeaderProps extends RowMods, ModalHeaderCoreProps {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines row size"
       ]
      },
      "typeValue": {
       "raw": "null | '36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        null
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "borderTop",
      "name": "borderTop",
      "comment": {
       "raw": [
        "Pass true, to enable row top border"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "borderBottom",
      "name": "borderBottom",
      "comment": {
       "raw": [
        "Pass true, to enable row bottom border"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "margin",
      "name": "margin",
      "comment": {
       "raw": [
        "Defines row margin"
       ]
      },
      "typeValue": {
       "raw": "'12' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "24"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "padding",
      "name": "padding",
      "comment": {
       "raw": [
        "Defines horizontal row padding"
       ]
      },
      "typeValue": {
       "raw": "'6' | '12' | '18' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "spacing",
      "name": "spacing",
      "comment": {
       "raw": [
        "Defines row spacing"
       ]
      },
      "typeValue": {
       "raw": "'6' | '12' | '18'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "topShadow",
      "name": "topShadow",
      "comment": {
       "raw": [
        "Pass true, to show a top shadow"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "vPadding",
      "name": "vPadding",
      "comment": {
       "raw": [
        "Defines vertical row padding"
       ]
      },
      "typeValue": {
       "raw": "'12' | '18' | '36' | '48' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "36",
        "48"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "background",
      "name": "background",
      "comment": {
       "raw": [
        "Defines row background"
       ]
      },
      "typeValue": {
       "raw": "'surface-main'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "surface-main"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "onClose",
      "name": "onClose",
      "comment": {
       "raw": [
        "Called when cross icon in ModalHeader is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ModalHeaderCoreProps",
      "required": false
     },
     {
      "uid": "title",
      "name": "title",
      "comment": {
       "raw": [
        "Modal title to display in header"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:ModalHeaderCoreProps",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:ModalWindowCoreProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ModalWindowCoreProps",
     "nameFull": "ModalWindowCoreProps"
    },
    "src": "uui/components/overlays/Modals.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ModalWindowCoreProps",
     "print": [
      "interface ModalWindowCoreProps extends uuiModalWindowProps {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "style",
      "name": "style",
      "comment": {
       "raw": [
        "Native style attributes"
       ]
      },
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-core:VPanelProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:ModalWindowProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ModalWindowProps",
     "nameFull": "ModalWindowProps"
    },
    "src": "uui/components/overlays/Modals.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ModalWindowProps",
     "print": [
      "interface ModalWindowProps extends ModalWindowCoreProps, ModalWindowMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "style",
      "name": "style",
      "comment": {
       "raw": [
        "Native style attributes"
       ]
      },
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-core:VPanelProps",
      "required": false
     },
     {
      "uid": "width",
      "name": "width",
      "comment": {
       "raw": [
        "Defines component width.",
        " @default '420px'"
       ],
       "tags": {
        "@default": "420px"
       }
      },
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@epam/uui:ModalWindowMods",
      "required": false
     },
     {
      "uid": "height",
      "name": "height",
      "comment": {
       "raw": [
        "Defines component height.",
        " @default 'auto'"
       ],
       "tags": {
        "@default": "auto"
       }
      },
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@epam/uui:ModalWindowMods",
      "required": false
     },
     {
      "uid": "maxHeight",
      "name": "maxHeight",
      "comment": {
       "raw": [
        "Defines component max-height.",
        " @default '80vh'"
       ],
       "tags": {
        "@default": "80vh"
       }
      },
      "typeValue": {
       "raw": "string | number"
      },
      "from": "@epam/uui:ModalWindowMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:MultiSwitchCoreProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "MultiSwitchCoreProps",
     "nameFull": "MultiSwitchCoreProps<TValue>"
    },
    "src": "uui/components/inputs/MultiSwitch.tsx",
    "comment": {
     "raw": [
      "Represents the 'Core properties' for the MultiSwitch component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "MultiSwitchCoreProps<TValue>",
     "print": [
      "/** Represents the 'Core properties' for the MultiSwitch component. */",
      "type MultiSwitchCoreProps<TValue> = IEditable<TValue> & SizeMod & IHasRawProps<React.HTMLAttributes<HTMLDivElement>> & {",
      "    /**",
      "     * Defines an array of MultiSwitchItems.",
      "     */",
      "    items: MultiSwitchItem<TValue>[];",
      "};"
     ]
    },
    "props": [
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TValue"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size."
       ]
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:SizeMod",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "items",
      "name": "items",
      "comment": {
       "raw": [
        "Defines an array of MultiSwitchItems."
       ]
      },
      "typeValue": {
       "raw": "MultiSwitchItem<TValue>[]"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:MultiSwitchProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "MultiSwitchProps",
     "nameFull": "MultiSwitchProps<TValue>"
    },
    "src": "uui/components/inputs/MultiSwitch.tsx",
    "comment": {
     "raw": [
      "Represents the properties for the MultiSwitch component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "MultiSwitchProps<TValue>",
     "print": [
      "/** Represents the properties for the MultiSwitch component. */",
      "type MultiSwitchProps<TValue = unknown> = MultiSwitchCoreProps<TValue> & MultiSwitchMods;"
     ]
    },
    "props": [
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TValue"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size."
       ]
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:SizeMod",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "items",
      "name": "items",
      "comment": {
       "raw": [
        "Defines an array of MultiSwitchItems."
       ]
      },
      "typeValue": {
       "raw": "MultiSwitchItem<TValue>[]"
      },
      "from": "@epam/uui:MultiSwitchCoreProps",
      "required": true
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'primary'"
       ],
       "tags": {
        "@default": "primary"
       }
      },
      "typeValue": {
       "raw": "'primary' | 'secondary'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "primary",
        "secondary"
       ]
      },
      "from": "@epam/uui:MultiSwitchMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:NotificationCardCoreProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "NotificationCardCoreProps",
     "nameFull": "NotificationCardCoreProps"
    },
    "src": "uui/components/overlays/NotificationCard.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "NotificationCardCoreProps",
     "print": [
      "interface NotificationCardCoreProps extends INotification, IHasChildren, IHasCX, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    /** Array of Notification actions. If provided will be displayed as LinkButtons in the end of notification. */",
      "    actions?: NotificationAction[];",
      "    /** NotificationCard icon */",
      "    icon?: Icon;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "actions",
      "name": "actions",
      "comment": {
       "raw": [
        "Array of Notification actions. If provided will be displayed as LinkButtons in the end of notification."
       ]
      },
      "typeValue": {
       "raw": "NotificationAction[]"
      },
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "NotificationCard icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "onClose",
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the notification with abort action. It's rejects `notificationContext.show()` promise."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": "onSuccess",
      "name": "onSuccess",
      "comment": {
       "raw": [
        "Call to close the notification with success action. It's resolved `notificationContext.show()` promise."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": "clearTimer",
      "name": "clearTimer",
      "comment": {
       "raw": [
        "Cancel notification closing timer"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": "refreshTimer",
      "name": "refreshTimer",
      "comment": {
       "raw": [
        "Reinitialize notification closing timer. It will be set to the provided notification duration."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "Unique id of the notification"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:INotification",
      "required": true
     },
     {
      "uid": "key",
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the notification"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:INotification",
      "required": true
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:NotificationCardProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "NotificationCardProps",
     "nameFull": "NotificationCardProps"
    },
    "src": "uui/components/overlays/NotificationCard.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "NotificationCardProps",
     "print": [
      "interface NotificationCardProps extends NotificationCardCoreProps, NotificationMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "actions",
      "name": "actions",
      "comment": {
       "raw": [
        "Array of Notification actions. If provided will be displayed as LinkButtons in the end of notification."
       ]
      },
      "typeValue": {
       "raw": "NotificationAction[]"
      },
      "from": "@epam/uui:NotificationCardCoreProps",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "NotificationCard icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:NotificationCardCoreProps",
      "required": false
     },
     {
      "uid": "onClose",
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the notification with abort action. It's rejects `notificationContext.show()` promise."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": "onSuccess",
      "name": "onSuccess",
      "comment": {
       "raw": [
        "Call to close the notification with success action. It's resolved `notificationContext.show()` promise."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": "clearTimer",
      "name": "clearTimer",
      "comment": {
       "raw": [
        "Cancel notification closing timer"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": "refreshTimer",
      "name": "refreshTimer",
      "comment": {
       "raw": [
        "Reinitialize notification closing timer. It will be set to the provided notification duration."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "Unique id of the notification"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:INotification",
      "required": true
     },
     {
      "uid": "key",
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the notification"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:INotification",
      "required": true
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "NotificationCard color"
       ]
      },
      "typeValue": {
       "raw": "'info' | 'success' | 'warning' | 'error'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "info",
        "success",
        "warning",
        "error"
       ]
      },
      "from": "@epam/uui:NotificationMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:NumericInputModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "NumericInputModsOverride",
     "nameFull": "NumericInputModsOverride"
    },
    "src": "uui/components/inputs/NumericInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "NumericInputModsOverride",
     "print": [
      "interface NumericInputModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:NumericInputProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "NumericInputProps",
     "nameFull": "NumericInputProps"
    },
    "src": "uui/components/inputs/NumericInput.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a NumericInput component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "NumericInputProps",
     "print": [
      "/** Represents the properties of a NumericInput component. */",
      "interface NumericInputProps extends uuiNumericInputProps, Overwrite<NumericInputMods, NumericInputModsOverride> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "max",
      "name": "max",
      "comment": {
       "raw": [
        "Maximum value (default is Number.MAX_SAFE_INTEGER)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:NumericInputProps",
      "required": false
     },
     {
      "uid": "min",
      "name": "min",
      "comment": {
       "raw": [
        "Minimum value (default is 0)",
        " @default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:NumericInputProps",
      "required": false
     },
     {
      "uid": "upIcon",
      "name": "upIcon",
      "comment": {
       "raw": [
        "Overrides the up/increase icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:NumericInputProps",
      "required": false
     },
     {
      "uid": "downIcon",
      "name": "downIcon",
      "comment": {
       "raw": [
        "Overrides the down/decrease icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:NumericInputProps",
      "required": false
     },
     {
      "uid": "step",
      "name": "step",
      "comment": {
       "raw": [
        "Increase/decrease step on up/down icons clicks and up/down arrow keys"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:NumericInputProps",
      "required": false
     },
     {
      "uid": "inputCx",
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS classes to put directly on the Input element"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:NumericInputProps",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:NumericInputProps",
      "required": false
     },
     {
      "uid": "disableArrows",
      "name": "disableArrows",
      "comment": {
       "raw": [
        "Turn off up/down (increase/decrease) buttons"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:NumericInputProps",
      "required": false
     },
     {
      "uid": "align",
      "name": "align",
      "comment": {
       "raw": [
        "Align text inside the component. Useful for tables (in cell-mode) - to align numbers in table column"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-components:NumericInputProps",
      "required": false
     },
     {
      "uid": "disableLocaleFormatting",
      "name": "disableLocaleFormatting",
      "comment": {
       "raw": [
        "Turns off locale-based formatting, standard Number.toString() is used instead",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:NumericInputProps",
      "required": false
     },
     {
      "uid": "formatOptions",
      "name": "formatOptions",
      "comment": {
       "raw": [
        "Number formatting options. See #{link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat}"
       ]
      },
      "typeValue": {
       "raw": "Intl.NumberFormatOptions"
      },
      "from": "@epam/uui-components:NumericInputProps",
      "required": false
     },
     {
      "uid": "formatValue",
      "name": "formatValue",
      "comment": {
       "raw": [
        "A function to convert current input value to displayed text.",
        " Overrides standard Intl-based formatting.",
        " If passed, only maximumFractionDigits considered from formatOptions when both properties provided.",
        " Formatting is applied only when input is not focused."
       ]
      },
      "typeValue": {
       "raw": "(value: number) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:NumericInputProps",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "null | number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: number | null) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "placeholder",
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: number | null, oldValue: number | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "mode",
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'inline' | 'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "inline",
        "form",
        "cell"
       ]
      },
      "from": "@epam/uui:IHasEditMode",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size",
        " @default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:NumericInputMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:PanelProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PanelProps",
     "nameFull": "PanelProps"
    },
    "src": "uui/components/layout/FlexItems/Panel.tsx",
    "comment": {
     "raw": [
      "Represents the properties of the Panel component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "PanelProps",
     "print": [
      "/** Represents the properties of the Panel component. */",
      "type PanelProps = VPanelProps & PanelMods;"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "style",
      "name": "style",
      "comment": {
       "raw": [
        "Native style attributes"
       ]
      },
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-core:VPanelProps",
      "required": false
     },
     {
      "uid": "shadow",
      "name": "shadow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:PanelMods",
      "required": false
     },
     {
      "uid": "margin",
      "name": "margin",
      "typeValue": {
       "raw": "'24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24"
       ]
      },
      "from": "@epam/uui:PanelMods",
      "required": false
     },
     {
      "uid": "background",
      "name": "background",
      "typeValue": {
       "raw": "'surface-main'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "surface-main"
       ]
      },
      "from": "@epam/uui:PanelMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:PickerInputModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PickerInputModsOverride",
     "nameFull": "PickerInputModsOverride"
    },
    "src": "uui/components/pickers/PickerInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerInputModsOverride",
     "print": [
      "interface PickerInputModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:PickerInputProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PickerInputProps",
     "nameFull": "PickerInputProps<TItem, TId>"
    },
    "src": "uui/components/pickers/PickerInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "Omit<PickerInputMods, never> & PickerInputModsOverride & IHasEditMode & PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType?: 'id' | undefined; } & IEditable<TId> & IAnalyticableOnChange<any> & PickerShowSelectedOnly & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & { editMode?: PickerInputEditMode | undefined; maxItems?: number | undefined; minBodyWidth?: number | undefined; isSingleLine?: boolean | undefined; dropdownPlacement?: Placement | undefined; renderToggler?: ((props: PickerTogglerProps<TItem, TId>) => React.ReactNode) | undefined; searchPosition?: PickerInputSearchPosition | undefined; disableClear?: boolean | undefined; minCharsToSearch?: number | undefined; dropdownHeight?: number | undefined; autoFocus?: boolean | undefined; rawProps?: { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; } | undefined; renderFooter?: ((props: PickerInputFooterProps<TItem, TId>) => React.ReactNode) | undefined; fixedBodyPosition?: boolean | undefined; portalTarget?: HTMLElement | undefined; inputCx?: ClassValue; bodyCx?: ClassValue; highlightSearchMatches?: boolean | undefined; searchDebounceDelay?: number | undefined; id?: string | undefined; } & { renderTag?: ((props: PickerTogglerRenderItemParams<TItem, TId>) => JSX.Element) | undefined; } | Omit<PickerInputMods, never> & PickerInputModsOverride & IHasEditMode & PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType: 'entity'; } & IEditable<TItem> & IAnalyticableOnChange<any> & PickerShowSelectedOnly & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & { editMode?: PickerInputEditMode | undefined; maxItems?: number | undefined; minBodyWidth?: number | undefined; isSingleLine?: boolean | undefined; dropdownPlacement?: Placement | undefined; renderToggler?: ((props: PickerTogglerProps<TItem, TId>) => React.ReactNode) | undefined; searchPosition?: PickerInputSearchPosition | undefined; disableClear?: boolean | undefined; minCharsToSearch?: number | undefined; dropdownHeight?: number | undefined; autoFocus?: boolean | undefined; rawProps?: { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; } | undefined; renderFooter?: ((props: PickerInputFooterProps<TItem, TId>) => React.ReactNode) | undefined; fixedBodyPosition?: boolean | undefined; portalTarget?: HTMLElement | undefined; inputCx?: ClassValue; bodyCx?: ClassValue; highlightSearchMatches?: boolean | undefined; searchDebounceDelay?: number | undefined; id?: string | undefined; } & { renderTag?: ((props: PickerTogglerRenderItemParams<TItem, TId>) => JSX.Element) | undefined; } | Omit<PickerInputMods, never> & PickerInputModsOverride & IHasEditMode & PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType?: 'id' | undefined; emptyValue?: [] | null | undefined; } & IEditable<TId[]> & IAnalyticableOnChange<any> & PickerShowSelectedOnly & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & { editMode?: PickerInputEditMode | undefined; maxItems?: number | undefined; minBodyWidth?: number | undefined; isSingleLine?: boolean | undefined; dropdownPlacement?: Placement | undefined; renderToggler?: ((props: PickerTogglerProps<TItem, TId>) => React.ReactNode) | undefined; searchPosition?: PickerInputSearchPosition | undefined; disableClear?: boolean | undefined; minCharsToSearch?: number | undefined; dropdownHeight?: number | undefined; autoFocus?: boolean | undefined; rawProps?: { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; } | undefined; renderFooter?: ((props: PickerInputFooterProps<TItem, TId>) => React.ReactNode) | undefined; fixedBodyPosition?: boolean | undefined; portalTarget?: HTMLElement | undefined; inputCx?: ClassValue; bodyCx?: ClassValue; highlightSearchMatches?: boolean | undefined; searchDebounceDelay?: number | undefined; id?: string | undefined; } & { renderTag?: ((props: PickerTogglerRenderItemParams<TItem, TId>) => JSX.Element) | undefined; } | Omit<PickerInputMods, never> & PickerInputModsOverride & IHasEditMode & PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]> & IAnalyticableOnChange<any> & PickerShowSelectedOnly & ICanFocus<HTMLElement> & IHasPlaceholder & IDisableable & ICanBeReadonly & IHasIcon & { editMode?: PickerInputEditMode | undefined; maxItems?: number | undefined; minBodyWidth?: number | undefined; isSingleLine?: boolean | undefined; dropdownPlacement?: Placement | undefined; renderToggler?: ((props: PickerTogglerProps<TItem, TId>) => React.ReactNode) | undefined; searchPosition?: PickerInputSearchPosition | undefined; disableClear?: boolean | undefined; minCharsToSearch?: number | undefined; dropdownHeight?: number | undefined; autoFocus?: boolean | undefined; rawProps?: { input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; } | undefined; renderFooter?: ((props: PickerInputFooterProps<TItem, TId>) => React.ReactNode) | undefined; fixedBodyPosition?: boolean | undefined; portalTarget?: HTMLElement | undefined; inputCx?: ClassValue; bodyCx?: ClassValue; highlightSearchMatches?: boolean | undefined; searchDebounceDelay?: number | undefined; id?: string | undefined; } & { renderTag?: ((props: PickerTogglerRenderItemParams<TItem, TId>) => JSX.Element) | undefined; }",
     "print": [
      "type PickerInputProps<TItem, TId> = Overwrite<PickerInputMods, PickerInputModsOverride> & IHasEditMode & PickerInputBaseProps<TItem, TId> & {",
      "    /**",
      "     * Render callback for picker toggler selection tag",
      "     * If omitted, default `PickerTogglerTag` component will be rendered",
      "     */",
      "    renderTag?: (props: PickerTogglerRenderItemParams<TItem, TId>) => JSX.Element;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size."
       ]
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:SizeMod",
      "required": false
     },
     {
      "uid": "mode",
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'inline' | 'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "inline",
        "form",
        "cell"
       ]
      },
      "from": "@epam/uui:IHasEditMode",
      "required": false
     },
     {
      "uid": "entityName",
      "name": "entityName",
      "comment": {
       "raw": [
        "Name of the entity being selected. Affects wording like \"Please select [entity]\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "entityPluralName",
      "name": "entityPluralName",
      "comment": {
       "raw": [
        "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "dataSource",
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<TItem, TId, any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": true
     },
     {
      "uid": "getName",
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "renderRow",
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<TItem, TId>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "getRowOptions",
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "renderNotFound",
      "name": "renderNotFound",
      "comment": {
       "raw": [
        "Overrides the default 'no records found' banner.",
        " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
       ]
      },
      "typeValue": {
       "raw": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "emptyValue",
      "name": "emptyValue",
      "comment": {
       "raw": [
        "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
       ]
      },
      "typeValue": {
       "raw": "null | []"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "sortBy",
      "name": "sortBy",
      "comment": {
       "raw": [
        "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "comment": {
       "raw": [
        "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "sorting",
      "name": "sorting",
      "comment": {
       "raw": [
        "Defines sorting to pass to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "cascadeSelection",
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "isFoldedByDefault",
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "You can return true for all, or some items to fold them."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "getSearchFields",
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "ref",
      "name": "ref",
      "comment": {
       "raw": [
        "Component ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: PickerInputElement | null) => void | React.RefObject<PickerInputElement>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "selectionMode",
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": "valueType",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: any, oldValue: any) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "showSelectedOnly",
      "name": "showSelectedOnly",
      "comment": {
       "raw": [
        "Enables/disables selected rows only in Picker."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PickerShowSelectedOnly",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "placeholder",
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "editMode",
      "name": "editMode",
      "comment": {
       "raw": [
        "dropdown (default) - show selection in dropdown; modal - opens modal window to select items"
       ]
      },
      "typeValue": {
       "raw": "'dropdown' | 'modal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "dropdown",
        "modal"
       ]
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "maxItems",
      "name": "maxItems",
      "comment": {
       "raw": [
        "Maximum number of tags to display in input, before collapsing to \"N items selected\" mode"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "minBodyWidth",
      "name": "minBodyWidth",
      "comment": {
       "raw": [
        "Minimum width of dropdown body"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "isSingleLine",
      "name": "isSingleLine",
      "comment": {
       "raw": [
        "Prevents selected items tags to occupy multiple lines"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "dropdownPlacement",
      "name": "dropdownPlacement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'top' | 'bottom' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "top",
        "bottom",
        "auto-start",
        "auto-end",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "renderToggler",
      "name": "renderToggler",
      "comment": {
       "raw": [
        "Replaces default 'toggler' - an input to which Picker attaches dropdown"
       ]
      },
      "typeValue": {
       "raw": "(props: PickerTogglerProps<TItem, TId>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "searchPosition",
      "name": "searchPosition",
      "comment": {
       "raw": [
        "Defines where search field is:",
        " 'input' - try to place search inside the toggler (default for single-select),",
        " 'body' - put search inside the dropdown (default for multi-select)",
        " 'none' - disables search completely",
        "",
        " Note: 'searchPosition' cannot be 'input' if 'editMode' is 'modal'"
       ]
      },
      "typeValue": {
       "raw": "'none' | 'body' | 'input'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "none",
        "body",
        "input"
       ]
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "disableClear",
      "name": "disableClear",
      "comment": {
       "raw": [
        "Disallow to clear Picker value (cross icon)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "minCharsToSearch",
      "name": "minCharsToSearch",
      "comment": {
       "raw": [
        "Minimum characters to type, before search will trigger. If input characters number is less then 'minCharsToSearch', it will disable opening dropdown body.",
        " By default search triggers after input value is changed.",
        "",
        " Note: defined minCharsToSearch isn't compatible with searchPosition=body."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "dropdownHeight",
      "name": "dropdownHeight",
      "comment": {
       "raw": [
        "Overrides default height of the dropdown body"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "autoFocus",
      "name": "autoFocus",
      "comment": {
       "raw": [
        "Sets focus to component when it's mounted"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "HTML attributes to put directly to the PickerInput parts"
       ]
      },
      "typeValue": {
       "raw": "{ input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "renderFooter",
      "name": "renderFooter",
      "comment": {
       "raw": [
        "Adds custom footer to the dropdown body"
       ]
      },
      "typeValue": {
       "raw": "(props: PickerInputFooterProps<TItem, TId>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "fixedBodyPosition",
      "name": "fixedBodyPosition",
      "comment": {
       "raw": [
        "Disables moving the dropdown body, when togglers is moved. Used in filters panel, to prevent filter selection to 'jump' after adding a filter."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "portalTarget",
      "name": "portalTarget",
      "comment": {
       "raw": [
        "Node of portal target, where to render the dropdown body.",
        " By default, will be used global portal node."
       ]
      },
      "typeValue": {
       "raw": "HTMLElement"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "inputCx",
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on input-part component. See https://github.com/JedWatson/classnames#usage for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "bodyCx",
      "name": "bodyCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on body-part component. See https://github.com/JedWatson/classnames#usage for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "highlightSearchMatches",
      "name": "highlightSearchMatches",
      "comment": {
       "raw": [
        "Enables highlighting of the items' text with search-matching results."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "searchDebounceDelay",
      "name": "searchDebounceDelay",
      "comment": {
       "raw": [
        "Search input debounce delay in ms. Default value is 500ms"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID attribute for the input in toggler"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:PickerInputBaseProps",
      "required": false
     },
     {
      "uid": "renderTag",
      "name": "renderTag",
      "comment": {
       "raw": [
        "Render callback for picker toggler selection tag",
        " If omitted, default `PickerTogglerTag` component will be rendered"
       ]
      },
      "typeValue": {
       "raw": "(props: PickerTogglerRenderItemParams<TItem, TId>) => JSX.Element"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "valueType_2",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": "value_2",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_2",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "selectionMode_3",
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": "valueType_3",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": false
     },
     {
      "uid": "value_3",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_3",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "valueType_4",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": "value_4",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_4",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui:PickerItemModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PickerItemModsOverride",
     "nameFull": "PickerItemModsOverride"
    },
    "src": "uui/components/pickers/PickerItem.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerItemModsOverride",
     "print": [
      "interface PickerItemModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:PickerItemProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PickerItemProps",
     "nameFull": "PickerItemProps<TItem, TId>"
    },
    "src": "uui/components/pickers/PickerItem.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerItemProps<TItem, TId>",
     "print": [
      "interface PickerItemProps<TItem, TId> extends Overwrite<PickerItemMods, PickerItemModsOverride>, DataRowProps<TItem, TId> {",
      "    /** Path to the user avatar.",
      "     * If omitted, no avatar will be rendered.",
      "     * * */",
      "    avatarUrl?: string;",
      "    /** Icon to render in picker row.",
      "     * If omitted, nothing will be rendered.",
      "     * */",
      "    icon?: Icon;",
      "    /** Row title */",
      "    title?: string;",
      "    /** Row subtitle. Will be rendered as a second line, below the title */",
      "    subtitle?: string;",
      "    /** DataSourceState of the Picker.",
      "     * Usually provided via renderItem callback params",
      "     * */",
      "    dataSourceState?: DataSourceState;",
      "    /**",
      "     * Enables highlighting of the items' text with search-matching results.",
      "     * @default true",
      "     * */",
      "    highlightSearchMatches?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "avatarUrl",
      "name": "avatarUrl",
      "comment": {
       "raw": [
        "Path to the user avatar.",
        " If omitted, no avatar will be rendered.",
        " *"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon to render in picker row.",
        " If omitted, nothing will be rendered."
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "title",
      "name": "title",
      "comment": {
       "raw": [
        "Row title"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "subtitle",
      "name": "subtitle",
      "comment": {
       "raw": [
        "Row subtitle. Will be rendered as a second line, below the title"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "dataSourceState",
      "name": "dataSourceState",
      "comment": {
       "raw": [
        "DataSourceState of the Picker.",
        " Usually provided via renderItem callback params"
       ]
      },
      "typeValue": {
       "raw": "DataSourceState<Record<string, any>, any>"
      },
      "required": false
     },
     {
      "uid": "highlightSearchMatches",
      "name": "highlightSearchMatches",
      "comment": {
       "raw": [
        "Enables highlighting of the items' text with search-matching results.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size."
       ]
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:PickerItemMods",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "((e?: any) => void) & ((rowProps: DataRowProps<TItem, TId>) => void) & ((rowProps: DataRowProps<TItem, TId>) => void)"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "alignItems",
      "name": "alignItems",
      "comment": {
       "raw": [
        "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)",
        " @default 'center'"
       ],
       "tags": {
        "@default": "center"
       }
      },
      "typeValue": {
       "raw": "'top' | 'center' | 'bottom' | 'stretch'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "center",
        "bottom",
        "stretch"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "justifyContent",
      "name": "justifyContent",
      "comment": {
       "raw": [
        "Flexbox justifyContent property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
       ]
      },
      "typeValue": {
       "raw": "'center' | 'space-between' | 'space-around' | 'space-evenly' | 'start' | 'end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "center",
        "space-between",
        "space-around",
        "space-evenly",
        "start",
        "end"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "columnGap",
      "name": "columnGap",
      "comment": {
       "raw": [
        "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '36' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "36"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "rowGap",
      "name": "rowGap",
      "comment": {
       "raw": [
        "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '36' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "36"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "checkbox",
      "name": "checkbox",
      "comment": {
       "raw": [
        "If row needs a checkbox, this field should be specified, and it props can be configured here"
       ]
      },
      "typeValue": {
       "raw": "{ isVisible: boolean; } & IDisableable & ICanBeInvalid"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "isSelectable",
      "name": "isSelectable",
      "comment": {
       "raw": [
        "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "dnd",
      "name": "dnd",
      "comment": {
       "raw": [
        "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
       ]
      },
      "typeValue": {
       "raw": "IDndActor<any, any>"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Can be specified to make row act as a link (plain or SPA)"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "pin",
      "name": "pin",
      "comment": {
       "raw": [
        "A pure function that gets pinned state for each row.",
        " If row pinned, it means that it will be sticky inside their parent section."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "validationMessage",
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasValidationMessage",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "ID of the TItem rows displays"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": "rowKey",
      "name": "rowKey",
      "comment": {
       "raw": [
        "Key to be used as component's key when rendering. Usually, it's stringified ID"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": "index",
      "name": "index",
      "comment": {
       "raw": [
        "Index of the row, from the top of the list. This doesn't account any hierarchy."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": "parentId",
      "name": "parentId",
      "comment": {
       "raw": [
        "ID of the parent TItem"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "path",
      "name": "path",
      "comment": {
       "raw": [
        "Hierarchical path from the root node to the item (excluding the item itself)"
       ]
      },
      "typeValue": {
       "raw": "DataRowPathItem<TId, TItem>[]"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "depth",
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of the row in tree, 0 for the top-level"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "indent",
      "name": "indent",
      "comment": {
       "raw": [
        "Indent of the item, to show hierarchy.",
        "  Unlike depth, it contains additional logic, to not add unnecessary indents:",
        "  if all children of node has no children, all nodes would get the same indent as parent."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isLoading",
      "name": "isLoading",
      "comment": {
       "raw": [
        "True if row is in loading state. 'value' is empty in this case"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isUnknown",
      "name": "isUnknown",
      "comment": {
       "raw": [
        "True if item doesn't exist in a dataSource"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isFoldable",
      "name": "isFoldable",
      "comment": {
       "raw": [
        "True if row be folded or unfolded (usually because it contains children)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isFolded",
      "name": "isFolded",
      "comment": {
       "raw": [
        "True if row is currently folded"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isChecked",
      "name": "isChecked",
      "comment": {
       "raw": [
        "True if row is checked with checkbox"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isCheckable",
      "name": "isCheckable",
      "comment": {
       "raw": [
        "True if row has checkbox and can be checkable"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isChildrenChecked",
      "name": "isChildrenChecked",
      "comment": {
       "raw": [
        "True if some of row's children are checked.",
        " Used to show 'indefinite' checkbox state, to show user that something inside is checked"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isSelected",
      "name": "isSelected",
      "comment": {
       "raw": [
        "True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isChildrenSelected",
      "name": "isChildrenSelected",
      "comment": {
       "raw": [
        "True if any of row's children is selected."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isFocused",
      "name": "isFocused",
      "comment": {
       "raw": [
        "True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isLastChild",
      "name": "isLastChild",
      "comment": {
       "raw": [
        "True if row is the last child of his parent"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "onFold",
      "name": "onFold",
      "comment": {
       "raw": [
        "Handles row folding change.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "onCheck",
      "name": "onCheck",
      "comment": {
       "raw": [
        "Handles row checkbox change.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "onSelect",
      "name": "onSelect",
      "comment": {
       "raw": [
        "Handles row selection.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Handles row focusing."
       ]
      },
      "typeValue": {
       "raw": "(focusedIndex: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isPinned",
      "name": "isPinned",
      "comment": {
       "raw": [
        "True if row pinned, it means that it will be sticky inside his nesting level"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:PickerListItemProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PickerListItemProps",
     "nameFull": "PickerListItemProps<TItem, TId>"
    },
    "src": "uui/components/pickers/PickerListItem.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerListItemProps<TItem, TId>",
     "print": [
      "interface PickerListItemProps<TItem, TId> extends DataRowProps<TItem, TId> {",
      "    /** A pure function that gets entity name from entity object.",
      "     Default: (item) => item.name.",
      "     */",
      "    getName(item: TItem): string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "getName",
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "((e?: any) => void) & ((rowProps: DataRowProps<TItem, TId>) => void) & ((rowProps: DataRowProps<TItem, TId>) => void)"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "alignItems",
      "name": "alignItems",
      "comment": {
       "raw": [
        "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)",
        " @default 'center'"
       ],
       "tags": {
        "@default": "center"
       }
      },
      "typeValue": {
       "raw": "'top' | 'center' | 'bottom' | 'stretch'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "center",
        "bottom",
        "stretch"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "justifyContent",
      "name": "justifyContent",
      "comment": {
       "raw": [
        "Flexbox justifyContent property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
       ]
      },
      "typeValue": {
       "raw": "'center' | 'space-between' | 'space-around' | 'space-evenly' | 'start' | 'end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "center",
        "space-between",
        "space-around",
        "space-evenly",
        "start",
        "end"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "columnGap",
      "name": "columnGap",
      "comment": {
       "raw": [
        "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '36' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "36"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "rowGap",
      "name": "rowGap",
      "comment": {
       "raw": [
        "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '6' | '12' | '18' | '36' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "36"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "checkbox",
      "name": "checkbox",
      "comment": {
       "raw": [
        "If row needs a checkbox, this field should be specified, and it props can be configured here"
       ]
      },
      "typeValue": {
       "raw": "{ isVisible: boolean; } & IDisableable & ICanBeInvalid"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "isSelectable",
      "name": "isSelectable",
      "comment": {
       "raw": [
        "True if row is selectable (for whole-row single-selection, multi-selection via checkbox are configured with the checkbox prop)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "dnd",
      "name": "dnd",
      "comment": {
       "raw": [
        "Configures row drag-n-drop options - if it can be dragged, can rows can be dropped into it, etc."
       ]
      },
      "typeValue": {
       "raw": "IDndActor<any, any>"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Can be specified to make row act as a link (plain or SPA)"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "pin",
      "name": "pin",
      "comment": {
       "raw": [
        "A pure function that gets pinned state for each row.",
        " If row pinned, it means that it will be sticky inside their parent section."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowOptions",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "validationMessage",
      "name": "validationMessage",
      "comment": {
       "raw": [
        "Message describing why the value is invalid"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasValidationMessage",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "ID of the TItem rows displays"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": "rowKey",
      "name": "rowKey",
      "comment": {
       "raw": [
        "Key to be used as component's key when rendering. Usually, it's stringified ID"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": "index",
      "name": "index",
      "comment": {
       "raw": [
        "Index of the row, from the top of the list. This doesn't account any hierarchy."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": true
     },
     {
      "uid": "parentId",
      "name": "parentId",
      "comment": {
       "raw": [
        "ID of the parent TItem"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "path",
      "name": "path",
      "comment": {
       "raw": [
        "Hierarchical path from the root node to the item (excluding the item itself)"
       ]
      },
      "typeValue": {
       "raw": "DataRowPathItem<TId, TItem>[]"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "depth",
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of the row in tree, 0 for the top-level"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "indent",
      "name": "indent",
      "comment": {
       "raw": [
        "Indent of the item, to show hierarchy.",
        "  Unlike depth, it contains additional logic, to not add unnecessary indents:",
        "  if all children of node has no children, all nodes would get the same indent as parent."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isLoading",
      "name": "isLoading",
      "comment": {
       "raw": [
        "True if row is in loading state. 'value' is empty in this case"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isUnknown",
      "name": "isUnknown",
      "comment": {
       "raw": [
        "True if item doesn't exist in a dataSource"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isFoldable",
      "name": "isFoldable",
      "comment": {
       "raw": [
        "True if row be folded or unfolded (usually because it contains children)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isFolded",
      "name": "isFolded",
      "comment": {
       "raw": [
        "True if row is currently folded"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isChecked",
      "name": "isChecked",
      "comment": {
       "raw": [
        "True if row is checked with checkbox"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isCheckable",
      "name": "isCheckable",
      "comment": {
       "raw": [
        "True if row has checkbox and can be checkable"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isChildrenChecked",
      "name": "isChildrenChecked",
      "comment": {
       "raw": [
        "True if some of row's children are checked.",
        " Used to show 'indefinite' checkbox state, to show user that something inside is checked"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isSelected",
      "name": "isSelected",
      "comment": {
       "raw": [
        "True if row is selected (in single-select mode, or in case when interface use both single row selection and checkboxes)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isChildrenSelected",
      "name": "isChildrenSelected",
      "comment": {
       "raw": [
        "True if any of row's children is selected."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isFocused",
      "name": "isFocused",
      "comment": {
       "raw": [
        "True if row is focused. Focus can be changed via keyboard arrow keys, or by hovering mouse on top of the row"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isLastChild",
      "name": "isLastChild",
      "comment": {
       "raw": [
        "True if row is the last child of his parent"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "onFold",
      "name": "onFold",
      "comment": {
       "raw": [
        "Handles row folding change.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "onCheck",
      "name": "onCheck",
      "comment": {
       "raw": [
        "Handles row checkbox change.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "onSelect",
      "name": "onSelect",
      "comment": {
       "raw": [
        "Handles row selection.",
        " We demand to pass the row as well, to avoid creating closures for each row."
       ]
      },
      "typeValue": {
       "raw": "(rowProps: DataRowProps<TItem, TId>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Handles row focusing."
       ]
      },
      "typeValue": {
       "raw": "(focusedIndex: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     },
     {
      "uid": "isPinned",
      "name": "isPinned",
      "comment": {
       "raw": [
        "True if row pinned, it means that it will be sticky inside his nesting level"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DataRowProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:PickerListModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PickerListModsOverride",
     "nameFull": "PickerListModsOverride"
    },
    "src": "uui/components/pickers/PickerList.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerListModsOverride",
     "print": [
      "interface PickerListModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:PickerListProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PickerListProps",
     "nameFull": "PickerListProps<TItem, TId>"
    },
    "src": "uui/components/pickers/PickerList.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "Omit<PickerListMods, never> & PickerListModsOverride & IHasPlaceholder & PickerModalOptions<TItem, TId> & { renderModalToggler?(props: IClickable & IHasCaption & IDisableable, selection: DataRowProps<TItem, TId>[]): React.ReactNode; noOptionsMessage?: React.ReactNode; } & PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType?: 'id' | undefined; } & IEditable<TId> & IAnalyticableOnChange<any> & PickerShowSelectedOnly & { maxDefaultItems?: number | undefined; maxTotalItems?: number | undefined; defaultIds?: TId[] | undefined; settingsKey?: string | undefined; sortBy?(item: TItem, sorting: SortingOption<any>): string; } | Omit<PickerListMods, never> & PickerListModsOverride & IHasPlaceholder & PickerModalOptions<TItem, TId> & { renderModalToggler?(props: IClickable & IHasCaption & IDisableable, selection: DataRowProps<TItem, TId>[]): React.ReactNode; noOptionsMessage?: React.ReactNode; } & PickerBaseOptions<TItem, TId> & { selectionMode: 'single'; valueType: 'entity'; } & IEditable<TItem> & IAnalyticableOnChange<any> & PickerShowSelectedOnly & { maxDefaultItems?: number | undefined; maxTotalItems?: number | undefined; defaultIds?: TId[] | undefined; settingsKey?: string | undefined; sortBy?(item: TItem, sorting: SortingOption<any>): string; } | Omit<PickerListMods, never> & PickerListModsOverride & IHasPlaceholder & PickerModalOptions<TItem, TId> & { renderModalToggler?(props: IClickable & IHasCaption & IDisableable, selection: DataRowProps<TItem, TId>[]): React.ReactNode; noOptionsMessage?: React.ReactNode; } & PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType?: 'id' | undefined; emptyValue?: [] | null | undefined; } & IEditable<TId[]> & IAnalyticableOnChange<any> & PickerShowSelectedOnly & { maxDefaultItems?: number | undefined; maxTotalItems?: number | undefined; defaultIds?: TId[] | undefined; settingsKey?: string | undefined; sortBy?(item: TItem, sorting: SortingOption<any>): string; } | Omit<PickerListMods, never> & PickerListModsOverride & IHasPlaceholder & PickerModalOptions<TItem, TId> & { renderModalToggler?(props: IClickable & IHasCaption & IDisableable, selection: DataRowProps<TItem, TId>[]): React.ReactNode; noOptionsMessage?: React.ReactNode; } & PickerBaseOptions<TItem, TId> & { selectionMode: 'multi'; valueType: 'entity'; emptyValue?: [] | null | undefined; } & IEditable<TItem[]> & IAnalyticableOnChange<any> & PickerShowSelectedOnly & { maxDefaultItems?: number | undefined; maxTotalItems?: number | undefined; defaultIds?: TId[] | undefined; settingsKey?: string | undefined; sortBy?(item: TItem, sorting: SortingOption<any>): string; }",
     "print": [
      "type PickerListProps<TItem, TId> = Overwrite<PickerListMods, PickerListModsOverride> & IHasPlaceholder & PickerModalOptions<TItem, TId> & {",
      "    renderModalToggler?(props: IClickable & IHasCaption & IDisableable, selection: DataRowProps<TItem, TId>[]): React.ReactNode;",
      "    noOptionsMessage?: React.ReactNode;",
      "} & PickerListBaseProps<TItem, TId>;"
     ]
    },
    "props": [
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size."
       ]
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:SizeMod",
      "required": false
     },
     {
      "uid": "placeholder",
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": "renderFilter",
      "name": "renderFilter",
      "comment": {
       "raw": [
        "Render callback for custom filters block. This block will be rendered befor the items list.",
        "     If omitted, nothing will be rendered."
       ]
      },
      "typeValue": {
       "raw": "(editableFilter: IEditable<any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:PickerModalOptions",
      "required": false
     },
     {
      "uid": "renderFooter",
      "name": "renderFooter",
      "comment": {
       "raw": [
        "Render callback for modal footer.",
        "     If omitted, default footer will be rendered."
       ]
      },
      "typeValue": {
       "raw": "(props: PickerFooterProps<TItem, TId> & Partial<IModal<any, any>>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:PickerModalOptions",
      "required": false
     },
     {
      "uid": "disallowClickOutside",
      "name": "disallowClickOutside",
      "comment": {
       "raw": [
        "If true, prevent modal window closing by click outside modal",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerModalOptions",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "renderModalToggler",
      "name": "renderModalToggler",
      "typeValue": {
       "raw": "(props: IClickable & IHasCaption & IDisableable, selection: DataRowProps<TItem, TId>[]) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "noOptionsMessage",
      "name": "noOptionsMessage",
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": "entityName",
      "name": "entityName",
      "comment": {
       "raw": [
        "Name of the entity being selected. Affects wording like \"Please select [entity]\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "entityPluralName",
      "name": "entityPluralName",
      "comment": {
       "raw": [
        "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "dataSource",
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<TItem, TId, any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": true
     },
     {
      "uid": "getName",
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "renderRow",
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<TItem, TId>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "getRowOptions",
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "renderNotFound",
      "name": "renderNotFound",
      "comment": {
       "raw": [
        "Overrides the default 'no records found' banner.",
        " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
       ]
      },
      "typeValue": {
       "raw": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "emptyValue",
      "name": "emptyValue",
      "comment": {
       "raw": [
        "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
       ]
      },
      "typeValue": {
       "raw": "null | []"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "sortBy",
      "name": "sortBy",
      "comment": {
       "raw": [
        "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "((item: TItem, sorting: SortingOption<any>) => any) & ((item: TItem, sorting: SortingOption<any>) => string)"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "comment": {
       "raw": [
        "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "sorting",
      "name": "sorting",
      "comment": {
       "raw": [
        "Defines sorting to pass to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "cascadeSelection",
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "isFoldedByDefault",
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "You can return true for all, or some items to fold them."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "getSearchFields",
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "ref",
      "name": "ref",
      "comment": {
       "raw": [
        "Component ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: PickerInputElement | null) => void | React.RefObject<PickerInputElement>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "selectionMode",
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": "valueType",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: any, oldValue: any) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "showSelectedOnly",
      "name": "showSelectedOnly",
      "comment": {
       "raw": [
        "Enables/disables selected rows only in Picker."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:PickerShowSelectedOnly",
      "required": false
     },
     {
      "uid": "maxDefaultItems",
      "name": "maxDefaultItems",
      "comment": {
       "raw": [
        "Number of default items to show initially, when nothing is selected.",
        " @default 10"
       ],
       "tags": {
        "@default": 10
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerListBaseProps",
      "required": false
     },
     {
      "uid": "maxTotalItems",
      "name": "maxTotalItems",
      "comment": {
       "raw": [
        "Maximum total number of items to show, including selected",
        " @default 50"
       ],
       "tags": {
        "@default": 50
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:PickerListBaseProps",
      "required": false
     },
     {
      "uid": "defaultIds",
      "name": "defaultIds",
      "comment": {
       "raw": [
        "Ids of items to show first.",
        " If not specified, top props.maxDefaultItems will be shown according to the DataSource sorting settings (default is 10)"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-components:PickerListBaseProps",
      "required": false
     },
     {
      "uid": "settingsKey",
      "name": "settingsKey",
      "comment": {
       "raw": [
        "If provided, top picks will be automatically adjusted based on last user selection, and stored as user setting under provided key"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:PickerListBaseProps",
      "required": false
     },
     {
      "uid": "valueType_2",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:SinglePickerProps",
      "required": true
     },
     {
      "uid": "value_2",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_2",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "selectionMode_3",
      "name": "selectionMode",
      "comment": {
       "raw": [
        "If 'single' provided - only one item is selected. In case of 'multi' - multiple items are selected"
       ]
      },
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": "valueType_3",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": false
     },
     {
      "uid": "value_3",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_3",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "valueType_4",
      "name": "valueType",
      "comment": {
       "raw": [
        "Defines what to use in value/onValueChange: 'id' - item id (TId). 'entity' - the item itself (TItem)"
       ]
      },
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-core:ArrayPickerProps",
      "required": true
     },
     {
      "uid": "value_4",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange_4",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui:PickerModalProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PickerModalProps",
     "nameFull": "PickerModalProps<TItem, TId>"
    },
    "src": "uui/components/pickers/PickerModal.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "PickerBaseOptions<TItem, TId> & IHasCaption & { selectionMode: 'single'; valueType: 'id'; initialValue: TId; } & IModal<TId, any> & PickerModalOptions<TItem, TId> | PickerBaseOptions<TItem, TId> & IHasCaption & { selectionMode: 'single'; valueType: 'entity'; initialValue: TItem; } & IModal<TItem, any> & PickerModalOptions<TItem, TId> | PickerBaseOptions<TItem, TId> & IHasCaption & { selectionMode: 'multi'; valueType: 'id'; initialValue: TId[]; } & IModal<TId[], any> & PickerModalOptions<TItem, TId> | PickerBaseOptions<TItem, TId> & IHasCaption & { selectionMode: 'multi'; valueType: 'entity'; initialValue: TItem[]; } & IModal<TItem[], any> & PickerModalOptions<TItem, TId>",
     "print": [
      "type PickerModalProps<TItem, TId> = PickerBaseOptions<TItem, TId> & IHasCaption & (PickerModalScalarProps<TId, TItem> | PickerModalArrayProps<TId, TItem>) & PickerModalOptions<TItem, TId>;"
     ]
    },
    "props": [
     {
      "uid": "entityName",
      "name": "entityName",
      "comment": {
       "raw": [
        "Name of the entity being selected. Affects wording like \"Please select [entity]\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "entityPluralName",
      "name": "entityPluralName",
      "comment": {
       "raw": [
        "Plural name of the entity being selected. Affects wording like \"X [entities] selected\""
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "dataSource",
      "name": "dataSource",
      "comment": {
       "raw": [
        "Datasource to get data for the picker"
       ]
      },
      "typeValue": {
       "raw": "IDataSource<TItem, TId, any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": true
     },
     {
      "uid": "getName",
      "name": "getName",
      "comment": {
       "raw": [
        "A pure function that gets entity name from entity object.",
        "     Default: (item) => item.name."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "renderRow",
      "name": "renderRow",
      "comment": {
       "raw": [
        "Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc."
       ]
      },
      "typeValue": {
       "raw": "(props: DataRowProps<TItem, TId>, dataSourceState: DataSourceState<Record<string, any>, any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "getRowOptions",
      "name": "getRowOptions",
      "comment": {
       "raw": [
        "Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, index: number) => DataRowOptions<TItem, TId>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "renderNotFound",
      "name": "renderNotFound",
      "comment": {
       "raw": [
        "Overrides the default 'no records found' banner.",
        " The 'search' callback parameter allows to distinguish cases when there's no records at all, and when current search doesn't find anything."
       ]
      },
      "typeValue": {
       "raw": "(props: { search: string; onClose: () => void; }) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "emptyValue",
      "name": "emptyValue",
      "comment": {
       "raw": [
        "Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers"
       ]
      },
      "typeValue": {
       "raw": "null | []"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "sortBy",
      "name": "sortBy",
      "comment": {
       "raw": [
        "Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "(item: TItem, sorting: SortingOption<any>) => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "comment": {
       "raw": [
        "Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario."
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "sorting",
      "name": "sorting",
      "comment": {
       "raw": [
        "Defines sorting to pass to the DataSource"
       ]
      },
      "typeValue": {
       "raw": "SortingOption<any>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "cascadeSelection",
      "name": "cascadeSelection",
      "comment": {
       "raw": [
        "Controls how the selection (checking items) of a parent node affects the selection of its all children, and vice versa.",
        " - false: All nodes are selected independently (default).",
        " - true or 'explicit': Selecting a parent node explicitly selects all its children. Unchecking the last parent's child unchecks its parent.",
        " - 'implicit': Selecting a parent node means that all children are considered checked.",
        "   The user sees all these nodes as checked on the UI, but only the selected parent is visible in the PickerInput tags, and only the checked",
        "   parent is present in the Picker's value or DataSourceState.checked array. When the user unchecks the first child of such a parent,",
        "   its parents become unchecked and all children but the unchecked one become checked, making children's selection explicit. If the last",
        "   unchecked child gets checked, all children from the checked are removed, returning to the implicit state when only the parent is checked."
       ]
      },
      "typeValue": {
       "raw": "boolean | 'implicit' | 'explicit'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        true,
        "implicit",
        "explicit"
       ]
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "isFoldedByDefault",
      "name": "isFoldedByDefault",
      "comment": {
       "raw": [
        "You can return true for all, or some items to fold them."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "getSearchFields",
      "name": "getSearchFields",
      "comment": {
       "raw": [
        "Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field."
       ]
      },
      "typeValue": {
       "raw": "(item: TItem) => string[]"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "ref",
      "name": "ref",
      "comment": {
       "raw": [
        "Component ref"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: PickerInputElement | null) => void | React.RefObject<PickerInputElement>"
      },
      "from": "@epam/uui-core:PickerBaseOptions",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "selectionMode",
      "name": "selectionMode",
      "typeValue": {
       "raw": "'single'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "single"
       ]
      },
      "from": "@epam/uui-components:PickerModalScalarProps",
      "required": true
     },
     {
      "uid": "valueType",
      "name": "valueType",
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-components:PickerModalScalarProps",
      "required": true
     },
     {
      "uid": "initialValue",
      "name": "initialValue",
      "typeValue": {
       "raw": "TId"
      },
      "from": "@epam/uui-components:PickerModalScalarProps",
      "required": true
     },
     {
      "uid": "isActive",
      "name": "isActive",
      "comment": {
       "raw": [
        "Indicates whether the modal is currently displayed"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the modal"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "zIndex",
      "name": "zIndex",
      "comment": {
       "raw": [
        "Modal zIndex value. Calculated via LayoutContext."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "success",
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TId) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "abort",
      "name": "abort",
      "comment": {
       "raw": [
        "Call to close the modal with abort action. It's rejects `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "parameters",
      "name": "parameters",
      "comment": {
       "raw": [
        "Parameters that provided via second param of `modalContext.show` method"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": "depth",
      "name": "depth",
      "comment": {
       "raw": [
        "Depth of current modal layer"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IModal",
      "required": false
     },
     {
      "uid": "renderFilter",
      "name": "renderFilter",
      "comment": {
       "raw": [
        "Render callback for custom filters block. This block will be rendered befor the items list.",
        "     If omitted, nothing will be rendered."
       ]
      },
      "typeValue": {
       "raw": "(editableFilter: IEditable<any>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:PickerModalOptions",
      "required": false
     },
     {
      "uid": "renderFooter",
      "name": "renderFooter",
      "comment": {
       "raw": [
        "Render callback for modal footer.",
        "     If omitted, default footer will be rendered."
       ]
      },
      "typeValue": {
       "raw": "(props: PickerFooterProps<TItem, TId> & Partial<IModal<any, any>>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:PickerModalOptions",
      "required": false
     },
     {
      "uid": "disallowClickOutside",
      "name": "disallowClickOutside",
      "comment": {
       "raw": [
        "If true, prevent modal window closing by click outside modal",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerModalOptions",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "valueType_2",
      "name": "valueType",
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-components:PickerModalScalarProps",
      "required": true
     },
     {
      "uid": "initialValue_2",
      "name": "initialValue",
      "typeValue": {
       "raw": "TItem"
      },
      "from": "@epam/uui-components:PickerModalScalarProps",
      "required": true
     },
     {
      "uid": "success_2",
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TItem) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "selectionMode_3",
      "name": "selectionMode",
      "typeValue": {
       "raw": "'multi'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "multi"
       ]
      },
      "from": "@epam/uui-components:PickerModalArrayProps",
      "required": true
     },
     {
      "uid": "valueType_3",
      "name": "valueType",
      "typeValue": {
       "raw": "'id'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "id"
       ]
      },
      "from": "@epam/uui-components:PickerModalArrayProps",
      "required": true
     },
     {
      "uid": "initialValue_3",
      "name": "initialValue",
      "typeValue": {
       "raw": "TId[]"
      },
      "from": "@epam/uui-components:PickerModalArrayProps",
      "required": true
     },
     {
      "uid": "success_3",
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TId[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     },
     {
      "uid": "valueType_4",
      "name": "valueType",
      "typeValue": {
       "raw": "'entity'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "entity"
       ]
      },
      "from": "@epam/uui-components:PickerModalArrayProps",
      "required": true
     },
     {
      "uid": "initialValue_4",
      "name": "initialValue",
      "typeValue": {
       "raw": "TItem[]"
      },
      "from": "@epam/uui-components:PickerModalArrayProps",
      "required": true
     },
     {
      "uid": "success_4",
      "name": "success",
      "comment": {
       "raw": [
        "Call to successfully close the modal. It's resolves `modalContext.show()` promise with provided value."
       ]
      },
      "typeValue": {
       "raw": "(result: TItem[]) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IModal",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui:PickerTogglerMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PickerTogglerMods",
     "nameFull": "PickerTogglerMods"
    },
    "src": "uui/components/pickers/PickerToggler.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerTogglerMods",
     "print": [
      "interface PickerTogglerMods extends types.IHasEditMode {",
      "    /**",
      "     * Defines component size",
      "     * @default 36",
      "     */",
      "    size?: '24' | '30' | '36' | '42' | '48';",
      "}"
     ]
    },
    "props": [
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size",
        " @default 36"
       ],
       "tags": {
        "@default": 36
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "required": false
     },
     {
      "uid": "mode",
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'inline' | 'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "inline",
        "form",
        "cell"
       ]
      },
      "from": "@epam/uui:IHasEditMode",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:PickerTogglerModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PickerTogglerModsOverride",
     "nameFull": "PickerTogglerModsOverride"
    },
    "src": "uui/components/pickers/PickerToggler.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerTogglerModsOverride",
     "print": [
      "interface PickerTogglerModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:PickerTogglerTagModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PickerTogglerTagModsOverride",
     "nameFull": "PickerTogglerTagModsOverride"
    },
    "src": "uui/components/pickers/PickerTogglerTag.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerTogglerTagModsOverride",
     "print": [
      "interface PickerTogglerTagModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:PickerTogglerTagProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PickerTogglerTagProps",
     "nameFull": "PickerTogglerTagProps<TItem, TId>"
    },
    "src": "uui/components/pickers/PickerTogglerTag.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PickerTogglerTagProps<TItem, TId>",
     "print": [
      "interface PickerTogglerTagProps<TItem, TId> extends Overwrite<PickerTogglerTagMods, PickerTogglerTagModsOverride>, PickerTogglerRenderItemParams<TItem, TId>, Omit<TagProps, 'size'> {",
      "    getName: (item: TItem) => string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "getName",
      "name": "getName",
      "typeValue": {
       "raw": "(item: TItem) => string"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size"
       ]
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:PickerTogglerTagMods",
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "comment": {
       "raw": [
        "Key for the component"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:PickerTogglerRenderItemParams",
      "required": true
     },
     {
      "uid": "rowProps",
      "name": "rowProps",
      "comment": {
       "raw": [
        "DataRowProps object of the rendered item"
       ]
      },
      "typeValue": {
       "raw": "DataRowProps<TItem, TId>"
      },
      "from": "@epam/uui-components:PickerTogglerRenderItemParams",
      "required": false
     },
     {
      "uid": "isCollapsed",
      "name": "isCollapsed",
      "comment": {
       "raw": [
        "Indicates that tag is collapsed rest selected items, like '+N items selected'"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:PickerTogglerRenderItemParams",
      "required": false
     },
     {
      "uid": "onClear",
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear a value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:PickerTogglerRenderItemParams",
      "required": false
     },
     {
      "uid": "collapsedRows",
      "name": "collapsedRows",
      "comment": {
       "raw": [
        "The array of rows that are folded in the 'collapsed button'",
        " (only in selectionMode='multi' with maxItems property, in other ways it's an empty array)"
       ]
      },
      "typeValue": {
       "raw": "DataRowProps<TItem, TId>[]"
      },
      "from": "@epam/uui-components:PickerTogglerRenderItemParams",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'neutral'"
       ],
       "tags": {
        "@default": "neutral"
       }
      },
      "typeValue": {
       "raw": "'info' | 'success' | 'warning' | 'critical' | 'neutral'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "info",
        "success",
        "warning",
        "critical",
        "neutral"
       ]
      },
      "from": "@epam/uui:TagMods",
      "required": false
     },
     {
      "uid": "fill",
      "name": "fill",
      "comment": {
       "raw": [
        "Defines component fill style.",
        " @default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline"
       ]
      },
      "from": "@epam/uui:TagCoreProps",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:TagCoreProps",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "clearIcon",
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:TagCoreProps",
      "required": false
     },
     {
      "uid": "count",
      "name": "count",
      "comment": {
       "raw": [
        "Count value to be placed in component"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "from": "@epam/uui:TagCoreProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:PresetsPanelProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PresetsPanelProps",
     "nameFull": "PresetsPanelProps"
    },
    "src": "uui/components/filters/PresetPanel/PresetsPanel.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PresetsPanelProps",
     "print": [
      "interface PresetsPanelProps extends IPresetsApi, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    /** Current state value of the table(list) */",
      "    tableState: DataTableState;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "tableState",
      "name": "tableState",
      "comment": {
       "raw": [
        "Current state value of the table(list)"
       ]
      },
      "typeValue": {
       "raw": "DataTableState<any, any>"
      },
      "required": true
     },
     {
      "uid": "activePresetId",
      "name": "activePresetId",
      "comment": {
       "raw": [
        "ID of selected preset"
       ]
      },
      "typeValue": {
       "raw": "null | number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": false
     },
     {
      "uid": "choosePreset",
      "name": "choosePreset",
      "comment": {
       "raw": [
        "Function that selects given preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<any, any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": "createNewPreset",
      "name": "createNewPreset",
      "comment": {
       "raw": [
        "Function that gives preset name and create new preset with this name and current table state"
       ]
      },
      "typeValue": {
       "raw": "(name: string) => Promise<number>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": "hasPresetChanged",
      "name": "hasPresetChanged",
      "comment": {
       "raw": [
        "Function that gives preset and return if this preset changed or not"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<any, any>) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": "duplicatePreset",
      "name": "duplicatePreset",
      "comment": {
       "raw": [
        "Function that gives the preset and creat their duplicate"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<any, any>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": "deletePreset",
      "name": "deletePreset",
      "comment": {
       "raw": [
        "Function that deletes given preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<any, any>) => Promise<void>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": "updatePreset",
      "name": "updatePreset",
      "comment": {
       "raw": [
        "Function that updates given preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<any, any>) => Promise<void>"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": "getPresetLink",
      "name": "getPresetLink",
      "comment": {
       "raw": [
        "Function that gives preset and return URL link on given preset"
       ]
      },
      "typeValue": {
       "raw": "(preset: ITablePreset<any, any>) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": "presets",
      "name": "presets",
      "comment": {
       "raw": [
        "Array of presets"
       ]
      },
      "typeValue": {
       "raw": "ITablePreset<any, any>[]"
      },
      "from": "@epam/uui-core:IPresetsApi",
      "required": true
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:ProgressBarProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ProgressBarProps",
     "nameFull": "ProgressBarProps"
    },
    "src": "uui/components/widgets/ProgressBar.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "ProgressBarProps",
     "print": [
      "type ProgressBarProps = uui.ProgressBarProps & ProgressBarMods;"
     ]
    },
    "props": [
     {
      "uid": "progress",
      "name": "progress",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:ProgressBarProps",
      "required": true
     },
     {
      "uid": "label",
      "name": "label",
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:ProgressBarProps",
      "required": false
     },
     {
      "uid": "hideLabel",
      "name": "hideLabel",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:ProgressBarProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '12'"
       ],
       "tags": {
        "@default": "12"
       }
      },
      "typeValue": {
       "raw": "'12' | '18' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:ProgressBarMods",
      "required": false
     },
     {
      "uid": "striped",
      "name": "striped",
      "comment": {
       "raw": [
        "To show ProgressBar with striped animation. The striped progress bar has no label."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:ProgressBarMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:RadioGroupItem": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RadioGroupItem",
     "nameFull": "RadioGroupItem<TValue>"
    },
    "src": "uui/components/layout/RadioGroup.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "RadioGroupItem<TValue>",
     "print": [
      "interface RadioGroupItem<TValue> extends IDisableable, Omit<RadioInputProps, 'id' | 'onValueChange' | 'value' | 'name'> {",
      "    /** RadioInput label. Can be a string, or React.ReactNode */",
      "    name?: React.ReactNode;",
      "    /** Render callback for checkbox label",
      "     * If omitted, 'name' prop value will be rendered",
      "     */",
      "    renderName?: () => React.ReactNode;",
      "    /** Item ID to put into selection */",
      "    id: TValue;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "name",
      "name": "name",
      "comment": {
       "raw": [
        "RadioInput label. Can be a string, or React.ReactNode"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": "renderName",
      "name": "renderName",
      "comment": {
       "raw": [
        "Render callback for checkbox label",
        " If omitted, 'name' prop value will be rendered"
       ]
      },
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "Item ID to put into selection"
       ]
      },
      "typeValue": {
       "raw": "TValue"
      },
      "required": true
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '18'"
       ],
       "tags": {
        "@default": "18"
       }
      },
      "typeValue": {
       "raw": "'12' | '18'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18"
       ]
      },
      "from": "@epam/uui:RadioInputMods",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.LabelHTMLAttributes<HTMLLabelElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "label",
      "name": "label",
      "comment": {
       "raw": [
        "Component label. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in labels."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "from": "@epam/uui-core:IHasLabel",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon for radio input selected state.",
        " Usually it has a default implementation in skins, so providing this is only necessary if you want to replace the default icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:RadioInputProps",
      "required": false
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean | null, oldValue: boolean | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "renderLabel",
      "name": "renderLabel",
      "comment": {
       "raw": [
        "Render callback for checkbox label.",
        " If omitted, 'label' prop value will be rendered."
       ]
      },
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:RadioInputProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:RadioGroupProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RadioGroupProps",
     "nameFull": "RadioGroupProps<TValue>"
    },
    "src": "uui/components/layout/RadioGroup.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "RadioGroupProps<TValue>",
     "print": [
      "interface RadioGroupProps<TValue> extends IHasCX, IEditable<TValue>, IDisableable, IHasDirection, ICanBeReadonly, IHasRawProps<React.FieldsetHTMLAttributes<HTMLFieldSetElement>>, IHasForwardedRef<HTMLFieldSetElement>, ICanFocus<HTMLFieldSetElement> {",
      "    /** Array of checkbox items to be rendered in group */",
      "    items: RadioGroupItem<TValue>[];",
      "    /** Defines group components size */",
      "    size?: RadioInputProps['size'];",
      "    /** Defines native HTML name attribute for each group member */",
      "    name?: string;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "items",
      "name": "items",
      "comment": {
       "raw": [
        "Array of checkbox items to be rendered in group"
       ]
      },
      "typeValue": {
       "raw": "RadioGroupItem<TValue>[]"
      },
      "required": true
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines group components size"
       ]
      },
      "typeValue": {
       "raw": "'12' | '18'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18"
       ]
      },
      "required": false
     },
     {
      "uid": "name",
      "name": "name",
      "comment": {
       "raw": [
        "Defines native HTML name attribute for each group member"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TValue"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "direction",
      "name": "direction",
      "comment": {
       "raw": [
        "Direction of child components."
       ]
      },
      "typeValue": {
       "raw": "'vertical' | 'horizontal'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "vertical",
        "horizontal"
       ]
      },
      "from": "@epam/uui-core:IHasDirection",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.FieldsetHTMLAttributes<HTMLFieldSetElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLFieldSetElement | null) => void | React.MutableRefObject<HTMLFieldSetElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLFieldSetElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLFieldSetElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:RadioInputProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RadioInputProps",
     "nameFull": "RadioInputProps"
    },
    "src": "uui/components/inputs/RadioInput.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a RadioInput component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "RadioInputProps",
     "print": [
      "/** Represents the properties of a RadioInput component. */",
      "type RadioInputProps = RadioInputMods & uuiRadioInputProps;"
     ]
    },
    "props": [
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '18'"
       ],
       "tags": {
        "@default": "18"
       }
      },
      "typeValue": {
       "raw": "'12' | '18'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18"
       ]
      },
      "from": "@epam/uui:RadioInputMods",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "label",
      "name": "label",
      "comment": {
       "raw": [
        "Component label. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in labels."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasLabel",
      "required": false
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean | null, oldValue: boolean | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.LabelHTMLAttributes<HTMLLabelElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon for radio input selected state.",
        " Usually it has a default implementation in skins, so providing this is only necessary if you want to replace the default icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:RadioInputProps",
      "required": false
     },
     {
      "uid": "renderLabel",
      "name": "renderLabel",
      "comment": {
       "raw": [
        "Render callback for checkbox label.",
        " If omitted, 'label' prop value will be rendered."
       ]
      },
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:RadioInputProps",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "ID to put on 'input' node"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:RadioInputProps",
      "required": false
     },
     {
      "uid": "name",
      "name": "name",
      "comment": {
       "raw": [
        "Defines native HTML name attribute for the input"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:RadioInputProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:RangeDatePickerBodyProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RangeDatePickerBodyProps",
     "nameFull": "RangeDatePickerBodyProps<T>"
    },
    "src": "uui/components/datePickers/RangeDatePickerBody.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "RangeDatePickerBodyProps<T>",
     "print": [
      "interface RangeDatePickerBodyProps<T> extends CommonDatePickerBodyProps, IControlled<RangeDatePickerBodyValue<T>> {",
      "    renderFooter?(): React.ReactNode;",
      "    isHoliday?: (day: Dayjs) => boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "renderFooter",
      "name": "renderFooter",
      "typeValue": {
       "raw": "() => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "isHoliday",
      "name": "isHoliday",
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui:CommonDatePickerBodyProps",
      "required": false
     },
     {
      "uid": "presets",
      "name": "presets",
      "typeValue": {
       "raw": "RangeDatePickerPresets"
      },
      "from": "@epam/uui:CommonDatePickerBodyProps",
      "required": false
     },
     {
      "uid": "renderDay",
      "name": "renderDay",
      "typeValue": {
       "raw": "(renderProps: DayProps) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:CommonDatePickerBodyProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "RangeDatePickerBodyValue<T>"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: RangeDatePickerBodyValue<T>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:RangeDatePickerBodyValue": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RangeDatePickerBodyValue",
     "nameFull": "RangeDatePickerBodyValue<TSelection>"
    },
    "src": "uui/components/datePickers/types.ts",
    "comment": {
     "raw": [
      "Represents date picker body value"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "RangeDatePickerBodyValue<TSelection>",
     "print": [
      "/**",
      " * Represents date picker body value",
      " */",
      "interface RangeDatePickerBodyValue<TSelection> {",
      "    /**",
      "     * Currently setting date",
      "     */",
      "    inFocus: RangeDatePickerInputType;",
      "    /**",
      "     * Date currently set",
      "     */",
      "    selectedDate: TSelection;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "inFocus",
      "name": "inFocus",
      "comment": {
       "raw": [
        "Currently setting date"
       ]
      },
      "typeValue": {
       "raw": "null | 'from' | 'to'"
      },
      "typeValueRef": "@epam/uui:RangeDatePickerInputType",
      "editor": {
       "type": "oneOf",
       "options": [
        "from",
        "to",
        null
       ]
      },
      "required": false
     },
     {
      "uid": "selectedDate",
      "name": "selectedDate",
      "comment": {
       "raw": [
        "Date currently set"
       ]
      },
      "typeValue": {
       "raw": "TSelection"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:RangeDatePickerInputProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RangeDatePickerInputProps",
     "nameFull": "RangeDatePickerInputProps"
    },
    "src": "uui/components/datePickers/RangeDatePickerInput.tsx",
    "comment": {
     "raw": [
      "Represents RangeDatePickerInputProps"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "RangeDatePickerInputProps",
     "print": [
      "/**",
      " * Represents RangeDatePickerInputProps",
      " */",
      "interface RangeDatePickerInputProps extends IEditable<RangeDatePickerValue>, IHasCX, IClickable, Pick<RangeDatePickerProps, 'getPlaceholder' | 'disableClear' | 'filter' | 'id' | 'format'> {",
      "    /**",
      "     * Defines component size.",
      "     */",
      "    size?: '24' | '30' | '36' | '42' | '48';",
      "    /**",
      "     * rawProps as HTML attributes",
      "     */",
      "    rawProps?: {",
      "        /**",
      "         * Any HTML attributes (native or 'data-') to put on 'from' input",
      "         */",
      "        from?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
      "        /**",
      "         * Any HTML attributes (native or 'data-') to put on 'to' input",
      "         */",
      "        to?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
      "    };",
      "    /**",
      "     * Currently setting date",
      "     */",
      "    inFocus: RangeDatePickerInputType;",
      "    /**",
      "     * Handles focus event on input element",
      "    */",
      "    onFocusInput: (event: React.FocusEvent<HTMLInputElement>, inputType: RangeDatePickerInputType) => void;",
      "    /**",
      "    * Handles blur event on input element",
      "   */",
      "    onBlurInput?: (event: React.FocusEvent<HTMLInputElement, Element>, inputType: RangeDatePickerInputType) => void;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size."
       ]
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "rawProps as HTML attributes"
       ]
      },
      "typeValue": {
       "raw": "{ from?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; to?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
      },
      "required": false
     },
     {
      "uid": "inFocus",
      "name": "inFocus",
      "comment": {
       "raw": [
        "Currently setting date"
       ]
      },
      "typeValue": {
       "raw": "null | 'from' | 'to'"
      },
      "typeValueRef": "@epam/uui:RangeDatePickerInputType",
      "editor": {
       "type": "oneOf",
       "options": [
        "from",
        "to",
        null
       ]
      },
      "required": false
     },
     {
      "uid": "onFocusInput",
      "name": "onFocusInput",
      "comment": {
       "raw": [
        "Handles focus event on input element"
       ]
      },
      "typeValue": {
       "raw": "(event: React.FocusEvent<HTMLInputElement, Element>, inputType: RangeDatePickerInputType) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": true
     },
     {
      "uid": "onBlurInput",
      "name": "onBlurInput",
      "comment": {
       "raw": [
        "Handles blur event on input element"
       ]
      },
      "typeValue": {
       "raw": "(event: React.FocusEvent<HTMLInputElement, Element>, inputType: RangeDatePickerInputType) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "RangeDatePickerValue"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: RangeDatePickerValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "comment": {
       "raw": [
        "Filter selectable days. Days, for which this callback returns false - will be disabled"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     },
     {
      "uid": "format",
      "name": "format",
      "comment": {
       "raw": [
        "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID attribute for the toggler input"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     },
     {
      "uid": "getPlaceholder",
      "name": "getPlaceholder",
      "comment": {
       "raw": [
        "A pure function that gets placeholder for 'from' or 'to' input."
       ]
      },
      "typeValue": {
       "raw": "(type: RangeDatePickerInputType) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui:RangeDatePickerProps",
      "required": false
     },
     {
      "uid": "disableClear",
      "name": "disableClear",
      "comment": {
       "raw": [
        "Disable clearing date value (e.g. via cross icon)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:RangeDatePickerProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RangeDatePickerProps",
     "nameFull": "RangeDatePickerProps"
    },
    "src": "uui/components/datePickers/types.ts",
    "comment": {
     "raw": [
      "Represents the properties of the RangeDatePicker component"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "RangeDatePickerProps",
     "print": [
      "/**",
      " * Represents the properties of the RangeDatePicker component",
      " */",
      "interface RangeDatePickerProps extends Overwrite<RangeDatePickerMods, RangeDatePickerModsOverride>, IEditable<RangeDatePickerValue | null>, IAnalyticableOnChange<RangeDatePickerValue | null>, CommonDatePickerProps {",
      "    /**",
      "     * Range presets (like 'this week', 'this month', etc.) to display at the right of the Picker's body.",
      "     * UUI provides defaults in the 'rangeDatePickerPresets' exported variable - you can use it as is, or build on top of it (e.g. add your presets)",
      "     */",
      "    presets?: RangeDatePickerPresets;",
      "    /**",
      "     * Allows to add a custom footer to the Picker's dropdown body",
      "     */",
      "    renderFooter?(value: RangeDatePickerValue): ReactNode;",
      "    /**",
      "     * Called when component gets input focus",
      "     */",
      "    onFocus?: (e: React.FocusEvent<HTMLInputElement>, inputType: RangeDatePickerInputType) => void;",
      "    /**",
      "     * Called when component looses input focus",
      "     */",
      "    onBlur?: (e: React.FocusEvent<HTMLInputElement>, inputType: RangeDatePickerInputType) => void;",
      "    /**",
      "     * Called when component is opened/closed",
      "     */",
      "    onOpenChange?: (isOpen: boolean) => void;",
      "    /**",
      "     * A pure function that gets placeholder for 'from' or 'to' input.",
      "     */",
      "    getPlaceholder?(type: RangeDatePickerInputType): string;",
      "    /**",
      "     * Overrides rendering of the single day. For example, to highlight certain days",
      "     */",
      "    renderDay?: (renderProps: DayProps) => ReactElement<Element>;",
      "    /**",
      "     * rawProps as HTML attributes",
      "     */",
      "    rawProps?: {",
      "        /**",
      "         * Any HTML attributes (native or 'data-') to put on 'from' input",
      "         */",
      "        from?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
      "        /**",
      "         * Any HTML attributes (native or 'data-') to put on 'to' input",
      "         */",
      "        to?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
      "        /**",
      "         * Any HTML attributes (native or 'data-') to put on date picker body",
      "         */",
      "        body?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
      "    };",
      "}"
     ]
    },
    "props": [
     {
      "uid": "presets",
      "name": "presets",
      "comment": {
       "raw": [
        "Range presets (like 'this week', 'this month', etc.) to display at the right of the Picker's body.",
        " UUI provides defaults in the 'rangeDatePickerPresets' exported variable - you can use it as is, or build on top of it (e.g. add your presets)"
       ]
      },
      "typeValue": {
       "raw": "RangeDatePickerPresets"
      },
      "required": false
     },
     {
      "uid": "renderFooter",
      "name": "renderFooter",
      "comment": {
       "raw": [
        "Allows to add a custom footer to the Picker's dropdown body"
       ]
      },
      "typeValue": {
       "raw": "(value: RangeDatePickerValue) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>, inputType: RangeDatePickerInputType) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>, inputType: RangeDatePickerInputType) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "onOpenChange",
      "name": "onOpenChange",
      "comment": {
       "raw": [
        "Called when component is opened/closed"
       ]
      },
      "typeValue": {
       "raw": "(isOpen: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "getPlaceholder",
      "name": "getPlaceholder",
      "comment": {
       "raw": [
        "A pure function that gets placeholder for 'from' or 'to' input."
       ]
      },
      "typeValue": {
       "raw": "(type: RangeDatePickerInputType) => string"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "renderDay",
      "name": "renderDay",
      "comment": {
       "raw": [
        "Overrides rendering of the single day. For example, to highlight certain days"
       ]
      },
      "typeValue": {
       "raw": "(renderProps: DayProps) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "rawProps as HTML attributes"
       ]
      },
      "typeValue": {
       "raw": "{ from?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; to?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
      },
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size."
       ]
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:RangeDatePickerMods",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "null | RangeDatePickerValue"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: RangeDatePickerValue | null) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: RangeDatePickerValue | null, oldValue: RangeDatePickerValue | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID attribute for the toggler input"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     },
     {
      "uid": "format",
      "name": "format",
      "comment": {
       "raw": [
        "Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     },
     {
      "uid": "filter",
      "name": "filter",
      "comment": {
       "raw": [
        "Filter selectable days. Days, for which this callback returns false - will be disabled"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     },
     {
      "uid": "renderTarget",
      "name": "renderTarget",
      "comment": {
       "raw": [
        "Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach DatePicker to other components, e.g. Buttons"
       ]
      },
      "typeValue": {
       "raw": "(props: IDropdownToggler) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     },
     {
      "uid": "disableClear",
      "name": "disableClear",
      "comment": {
       "raw": [
        "Disable clearing date value (e.g. via cross icon)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     },
     {
      "uid": "placement",
      "name": "placement",
      "comment": {
       "raw": [
        "Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'top' | 'bottom' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "top",
        "bottom",
        "auto-start",
        "auto-end",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     },
     {
      "uid": "isHoliday",
      "name": "isHoliday",
      "comment": {
       "raw": [
        "If this function returns true, the day will be highlighted as holiday"
       ]
      },
      "typeValue": {
       "raw": "(day: Dayjs) => boolean"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     },
     {
      "uid": "inputCx",
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on datepicker input"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     },
     {
      "uid": "bodyCx",
      "name": "bodyCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on datepicker body"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:CommonDatePickerProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:RangeDatePickerValue": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RangeDatePickerValue",
     "nameFull": "RangeDatePickerValue"
    },
    "src": "uui/components/datePickers/types.ts",
    "comment": {
     "raw": [
      "Represents RangeDatePicker value"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "RangeDatePickerValue",
     "print": [
      "/**",
      " * Represents RangeDatePicker value",
      "*/",
      "type RangeDatePickerValue = {",
      "    /**",
      "     * Defines DatePicker value 'from'.",
      "     */",
      "    from: string | null;",
      "    /**",
      "     * Defines DatePicker value 'to'.",
      "     */",
      "    to: string | null;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "from",
      "name": "from",
      "comment": {
       "raw": [
        "Defines DatePicker value 'from'."
       ]
      },
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "to",
      "name": "to",
      "comment": {
       "raw": [
        "Defines DatePicker value 'to'."
       ]
      },
      "typeValue": {
       "raw": "null | string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:RichTextViewModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RichTextViewModsOverride",
     "nameFull": "RichTextViewModsOverride"
    },
    "src": "uui/components/typography/RichTextView.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "RichTextViewModsOverride",
     "print": [
      "interface RichTextViewModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:RichTextViewProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RichTextViewProps",
     "nameFull": "RichTextViewProps"
    },
    "src": "uui/components/typography/RichTextView.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "RichTextViewProps",
     "print": [
      "interface RichTextViewProps extends uuiComponents.RichTextViewProps, Overwrite<RichTextViewMods, RichTextViewModsOverride> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "htmlContent",
      "name": "htmlContent",
      "comment": {
       "raw": [
        "HTML content to be rendered"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-components:RichTextViewProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '14'"
       ],
       "tags": {
        "@default": "14"
       }
      },
      "typeValue": {
       "raw": "'12' | '14' | '16'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "14",
        "16"
       ]
      },
      "from": "@epam/uui:RichTextViewMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:RowMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RowMods",
     "nameFull": "RowMods"
    },
    "src": "uui/components/layout/FlexItems/FlexRow.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "RowMods",
     "print": [
      "type RowMods = {",
      "    /** Defines row size */",
      "    size?: null | '24' | '30' | '36' | '42' | '48';",
      "    /** Pass true, to enable row top border */",
      "    borderTop?: boolean;",
      "    /** Pass true, to enable row bottom border */",
      "    borderBottom?: boolean;",
      "    /** Defines row margin */",
      "    margin?: '12' | '24';",
      "    /** Defines horizontal row padding */",
      "    padding?: '6' | '12' | '18' | '24';",
      "    /** Defines row spacing */",
      "    spacing?: '6' | '12' | '18';",
      "    /** Pass true, to show a top shadow */",
      "    topShadow?: boolean;",
      "    /** Defines vertical row padding */",
      "    vPadding?: '12' | '18' | '24' | '36' | '48';",
      "    /** Defines row background */",
      "    background?: 'surface-main';",
      "};"
     ]
    },
    "props": [
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines row size"
       ]
      },
      "typeValue": {
       "raw": "null | '36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        null
       ]
      },
      "required": false
     },
     {
      "uid": "borderTop",
      "name": "borderTop",
      "comment": {
       "raw": [
        "Pass true, to enable row top border"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "borderBottom",
      "name": "borderBottom",
      "comment": {
       "raw": [
        "Pass true, to enable row bottom border"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "margin",
      "name": "margin",
      "comment": {
       "raw": [
        "Defines row margin"
       ]
      },
      "typeValue": {
       "raw": "'12' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "24"
       ]
      },
      "required": false
     },
     {
      "uid": "padding",
      "name": "padding",
      "comment": {
       "raw": [
        "Defines horizontal row padding"
       ]
      },
      "typeValue": {
       "raw": "'6' | '12' | '18' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24"
       ]
      },
      "required": false
     },
     {
      "uid": "spacing",
      "name": "spacing",
      "comment": {
       "raw": [
        "Defines row spacing"
       ]
      },
      "typeValue": {
       "raw": "'6' | '12' | '18'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18"
       ]
      },
      "required": false
     },
     {
      "uid": "topShadow",
      "name": "topShadow",
      "comment": {
       "raw": [
        "Pass true, to show a top shadow"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "vPadding",
      "name": "vPadding",
      "comment": {
       "raw": [
        "Defines vertical row padding"
       ]
      },
      "typeValue": {
       "raw": "'12' | '18' | '36' | '48' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "36",
        "48"
       ]
      },
      "required": false
     },
     {
      "uid": "background",
      "name": "background",
      "comment": {
       "raw": [
        "Defines row background"
       ]
      },
      "typeValue": {
       "raw": "'surface-main'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "surface-main"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:SearchInputProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "SearchInputProps",
     "nameFull": "SearchInputProps"
    },
    "src": "uui/components/inputs/TextInput.tsx",
    "comment": {
     "raw": [
      "Represents the properties for a SearchInput component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "SearchInputProps",
     "print": [
      "/** Represents the properties for a SearchInput component. */",
      "interface SearchInputProps extends TextInputProps, IEditableDebouncerOptions {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "acceptIcon",
      "name": "acceptIcon",
      "comment": {
       "raw": [
        "Overrides accept (check) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": "cancelIcon",
      "name": "cancelIcon",
      "comment": {
       "raw": [
        "Overrides cancel (cross) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Overrides dropdown (chevron) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": "inputCx",
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put to the HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": "renderInput",
      "name": "renderInput",
      "comment": {
       "raw": [
        "overrides rendering of HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "(props: IRenderInputProps) => JSX.Element"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": "onCancel",
      "name": "onCancel",
      "comment": {
       "raw": [
        "Enables cancel (cross) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "onAccept",
      "name": "onAccept",
      "comment": {
       "raw": [
        "Enables accept (check) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "onKeyDown",
      "name": "onKeyDown",
      "comment": {
       "raw": [
        "keydown event handler to put on the HTML input element"
       ]
      },
      "typeValue": {
       "raw": "(e?: React.KeyboardEvent<HTMLInputElement> | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "autoFocus",
      "name": "autoFocus",
      "comment": {
       "raw": [
        "Put focus on the element, when component is mounted"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "type",
      "name": "type",
      "comment": {
       "raw": [
        "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "autoComplete",
      "name": "autoComplete",
      "comment": {
       "raw": [
        "Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "name",
      "name": "name",
      "comment": {
       "raw": [
        "Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "maxLength",
      "name": "maxLength",
      "comment": {
       "raw": [
        "Maximum input length in characters"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "inputMode",
      "name": "inputMode",
      "comment": {
       "raw": [
        "Standard [inputMode attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode}"
       ]
      },
      "typeValue": {
       "raw": "'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "none",
        "text",
        "tel",
        "url",
        "email",
        "numeric",
        "decimal",
        "search"
       ]
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID attribute for input"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "placeholder",
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | null, oldValue: string | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLInputElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "mode",
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'inline' | 'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "inline",
        "form",
        "cell"
       ]
      },
      "from": "@epam/uui:IHasEditMode",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "60"
       ]
      },
      "from": "@epam/uui:TextInputMods",
      "required": false
     },
     {
      "uid": "disableDebounce",
      "name": "disableDebounce",
      "comment": {
       "raw": [
        "Pass true to disable debouncing"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IEditableDebouncerOptions",
      "required": false
     },
     {
      "uid": "debounceDelay",
      "name": "debounceDelay",
      "comment": {
       "raw": [
        "Debounce delay in ms. Default value is 500ms"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IEditableDebouncerOptions",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:SliderProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "SliderProps",
     "nameFull": "SliderProps"
    },
    "src": "uui/components/inputs/Slider.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "SliderProps",
     "print": [
      "interface SliderProps extends uuiSliderProps {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "min",
      "name": "min",
      "comment": {
       "raw": [
        "Min value (when slider is at leftmost position)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": true
     },
     {
      "uid": "max",
      "name": "max",
      "comment": {
       "raw": [
        "Max value (when slider is at rightmost position)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": true
     },
     {
      "uid": "step",
      "name": "step",
      "comment": {
       "raw": [
        "Value change step"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": true
     },
     {
      "uid": "splitAt",
      "name": "splitAt",
      "comment": {
       "raw": [
        "Slider renders a label at each splitAt position"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": false
     },
     {
      "uid": "renderLabel",
      "name": "renderLabel",
      "comment": {
       "raw": [
        "Overrides rendering of values labels"
       ]
      },
      "typeValue": {
       "raw": "(value: number) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": false
     },
     {
      "uid": "showTooltip",
      "name": "showTooltip",
      "comment": {
       "raw": [
        "Toggles rendering of tooltip with current value"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:SnackbarProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "SnackbarProps",
     "nameFull": "SnackbarProps"
    },
    "src": "uui/components/overlays/Snackbar.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "SnackbarProps",
     "print": [
      "interface SnackbarProps extends UuiSnackbarProps {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "closeIcon",
      "name": "closeIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:SnackbarProps",
      "required": false
     },
     {
      "uid": "notifications",
      "name": "notifications",
      "typeValue": {
       "raw": "NotificationOperation[]"
      },
      "from": "@epam/uui-components:SnackbarProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:SpinnerProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "SpinnerProps",
     "nameFull": "SpinnerProps"
    },
    "src": "uui/components/widgets/Spinner.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "SpinnerProps",
     "print": [
      "type SpinnerProps = uuiSpinnerProps;"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:StatusIndicatorCoreProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "StatusIndicatorCoreProps",
     "nameFull": "StatusIndicatorCoreProps"
    },
    "src": "uui/components/widgets/StatusIndicator.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "StatusIndicatorCoreProps",
     "print": [
      "type StatusIndicatorCoreProps = IHasCX & {",
      "    /**",
      "     * Component size. If omitted, 24 size will be used.",
      "     * @default '24'",
      "     */",
      "    size?: '24' | '18' | '12';",
      "    /**",
      "     * Fill mode, solid is used by default",
      "     * @default 'solid'",
      "     */",
      "    fill?: 'solid' | 'outline';",
      "    /** Component caption. */",
      "    caption: string;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Component size. If omitted, 24 size will be used.",
        " @default '24'"
       ],
       "tags": {
        "@default": "24"
       }
      },
      "typeValue": {
       "raw": "'12' | '18' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24"
       ]
      },
      "required": false
     },
     {
      "uid": "fill",
      "name": "fill",
      "comment": {
       "raw": [
        "Fill mode, solid is used by default",
        " @default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline"
       ]
      },
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Component caption."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:StatusIndicatorProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "StatusIndicatorProps",
     "nameFull": "StatusIndicatorProps"
    },
    "src": "uui/components/widgets/StatusIndicator.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "StatusIndicatorProps",
     "print": [
      "type StatusIndicatorProps = StatusIndicatorCoreProps & StatusIndicatorMods;"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Component size. If omitted, 24 size will be used.",
        " @default '24'"
       ],
       "tags": {
        "@default": "24"
       }
      },
      "typeValue": {
       "raw": "'12' | '18' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:StatusIndicatorCoreProps",
      "required": false
     },
     {
      "uid": "fill",
      "name": "fill",
      "comment": {
       "raw": [
        "Fill mode, solid is used by default",
        " @default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline"
       ]
      },
      "from": "@epam/uui:StatusIndicatorCoreProps",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Component caption."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui:StatusIndicatorCoreProps",
      "required": true
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Component color.",
        " @default 'neutral'"
       ],
       "tags": {
        "@default": "neutral"
       }
      },
      "typeValue": {
       "raw": "'info' | 'success' | 'warning' | 'critical' | 'neutral'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "info",
        "success",
        "warning",
        "critical",
        "neutral"
       ]
      },
      "from": "@epam/uui:StatusIndicatorMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:SwitchModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "SwitchModsOverride",
     "nameFull": "SwitchModsOverride"
    },
    "src": "uui/components/inputs/Switch.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "SwitchModsOverride",
     "print": [
      "interface SwitchModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:SwitchProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "SwitchProps",
     "nameFull": "SwitchProps"
    },
    "src": "uui/components/inputs/Switch.tsx",
    "comment": {
     "raw": [
      "Represents the properties of the Switch component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "SwitchProps",
     "print": [
      "/** Represents the properties of the Switch component. */",
      "interface SwitchProps extends uuiComponents.SwitchProps, Overwrite<SwitchMods, SwitchModsOverride> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "ID to put on 'input' node"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:SwitchProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "label",
      "name": "label",
      "comment": {
       "raw": [
        "Component label. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in labels."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasLabel",
      "required": false
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean | null, oldValue: boolean | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.LabelHTMLAttributes<HTMLLabelElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '18'"
       ],
       "tags": {
        "@default": "18"
       }
      },
      "typeValue": {
       "raw": "'12' | '18' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:SwitchMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TabButtonModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TabButtonModsOverride",
     "nameFull": "TabButtonModsOverride"
    },
    "src": "uui/components/buttons/TabButton.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TabButtonModsOverride",
     "print": [
      "interface TabButtonModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:TabButtonProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TabButtonProps",
     "nameFull": "TabButtonProps"
    },
    "src": "uui/components/buttons/TabButton.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a TabButton component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TabButtonProps",
     "print": [
      "/** Represents the properties of a TabButton component. */",
      "interface TabButtonProps extends Overwrite<TabButtonMods, TabButtonModsOverride>, ClickableComponentProps, IDropdownToggler, IHasIcon, IHasCaption {",
      "    /** Call to clear toggler value */",
      "    onClear?(e?: any): void;",
      "    /** Icon for clear value button (usually cross) */",
      "    clearIcon?: Icon;",
      "    /** Icon for drop-down toggler */",
      "    dropdownIcon?: Icon;",
      "    /** Count value to be placed in component */",
      "    count?: React.ReactNode;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "onClear",
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "clearIcon",
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "count",
      "name": "count",
      "comment": {
       "raw": [
        "Count value to be placed in component"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '48'"
       ],
       "tags": {
        "@default": "48"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "36",
        "48",
        "60"
       ]
      },
      "from": "@epam/uui:TabButtonMods",
      "required": false
     },
     {
      "uid": "withNotify",
      "name": "withNotify",
      "comment": {
       "raw": [
        "Defines is the component showing Notify"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:TabButtonMods",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TagCoreProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TagCoreProps",
     "nameFull": "TagCoreProps"
    },
    "src": "uui/components/widgets/Tag.tsx",
    "comment": {
     "raw": [
      "Represents the Core properties of the Tag component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "TagCoreProps",
     "print": [
      "/** Represents the Core properties of the Tag component. */",
      "type TagCoreProps = ClickableComponentProps & IDropdownToggler & IHasIcon & IHasCaption & {",
      "    /**",
      "     * Defines component fill style.",
      "     * @default 'solid'",
      "     */",
      "    fill?: 'solid' | 'outline';",
      "    /** Call to clear toggler value */",
      "    onClear?(e?: any): void;",
      "    /** Icon for clear value button (usually cross) */",
      "    clearIcon?: Icon;",
      "    /** Icon for drop-down toggler */",
      "    dropdownIcon?: Icon;",
      "    /** Count value to be placed in component */",
      "    count?: React.ReactNode;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "fill",
      "name": "fill",
      "comment": {
       "raw": [
        "Defines component fill style.",
        " @default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline"
       ]
      },
      "required": false
     },
     {
      "uid": "onClear",
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "clearIcon",
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "count",
      "name": "count",
      "comment": {
       "raw": [
        "Count value to be placed in component"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TagModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TagModsOverride",
     "nameFull": "TagModsOverride"
    },
    "src": "uui/components/widgets/Tag.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TagModsOverride",
     "print": [
      "interface TagModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:TagProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TagProps",
     "nameFull": "TagProps"
    },
    "src": "uui/components/widgets/Tag.tsx",
    "comment": {
     "raw": [
      "Represents the properties of the Tag component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TagProps",
     "print": [
      "/** Represents the properties of the Tag component. */",
      "interface TagProps extends TagCoreProps, Overwrite<TagMods, TagModsOverride> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "fill",
      "name": "fill",
      "comment": {
       "raw": [
        "Defines component fill style.",
        " @default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline"
       ]
      },
      "from": "@epam/uui:TagCoreProps",
      "required": false
     },
     {
      "uid": "onClear",
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui:TagCoreProps",
      "required": false
     },
     {
      "uid": "clearIcon",
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:TagCoreProps",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:TagCoreProps",
      "required": false
     },
     {
      "uid": "count",
      "name": "count",
      "comment": {
       "raw": [
        "Count value to be placed in component"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui:TagCoreProps",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'neutral'"
       ],
       "tags": {
        "@default": "neutral"
       }
      },
      "typeValue": {
       "raw": "'info' | 'success' | 'warning' | 'critical' | 'neutral'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "info",
        "success",
        "warning",
        "critical",
        "neutral"
       ]
      },
      "from": "@epam/uui:TagMods",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'18' | '36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:TagMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TextAreaModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TextAreaModsOverride",
     "nameFull": "TextAreaModsOverride"
    },
    "src": "uui/components/inputs/TextArea.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TextAreaModsOverride",
     "print": [
      "interface TextAreaModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:TextAreaProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TextAreaProps",
     "nameFull": "TextAreaProps"
    },
    "src": "uui/components/inputs/TextArea.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a TextArea component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TextAreaProps",
     "print": [
      "/** Represents the properties of a TextArea component. */",
      "interface TextAreaProps extends uuiTextAreaProps, Overwrite<TextAreaMods, TextAreaModsOverride> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "rows",
      "name": "rows",
      "comment": {
       "raw": [
        "Adjust height to fit specified number or text rows. HTML TextArea attribute."
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:TextAreaProps",
      "required": false
     },
     {
      "uid": "autoSize",
      "name": "autoSize",
      "comment": {
       "raw": [
        "Enables auto-resizing height to fit text. Rows prop is ignored in this mode"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:TextAreaProps",
      "required": false
     },
     {
      "uid": "onKeyDown",
      "name": "onKeyDown",
      "comment": {
       "raw": [
        "onKeyDown event handler to put on HTML Input"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:TextAreaProps",
      "required": false
     },
     {
      "uid": "autoFocus",
      "name": "autoFocus",
      "comment": {
       "raw": [
        "Automatically sets input focus to component, when its mounted"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:TextAreaProps",
      "required": false
     },
     {
      "uid": "inputCx",
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class names to put to the HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:TextAreaProps",
      "required": false
     },
     {
      "uid": "maxLength",
      "name": "maxLength",
      "comment": {
       "raw": [
        "Maximum text length, in characters"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:TextAreaProps",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "HTML id attribute to put on the HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-components:TextAreaProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "placeholder",
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.TextareaHTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLTextAreaElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLTextAreaElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "mode",
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'inline' | 'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "inline",
        "form",
        "cell"
       ]
      },
      "from": "@epam/uui:IHasEditMode",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:TextAreaMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TextCoreProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TextCoreProps",
     "nameFull": "TextCoreProps"
    },
    "src": "uui/components/typography/Text.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TextCoreProps",
     "print": [
      "interface TextCoreProps extends uuiComponents.TextProps, TextSettings {",
      "    /**",
      "     * Defines text font weight value",
      "     * @default '400'",
      "     */",
      "    fontWeight?: TextFontWeight;",
      "    /**",
      "     * Determines the style of the text font.",
      "     * @default 'normal'",
      "     */",
      "    fontStyle?: TextFontStyle;",
      "    /**",
      "     * Defines text size",
      "     * @default '36'",
      "     */",
      "    size?: TextSize;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "fontWeight",
      "name": "fontWeight",
      "comment": {
       "raw": [
        "Defines text font weight value",
        " @default '400'"
       ],
       "tags": {
        "@default": "400"
       }
      },
      "typeValue": {
       "raw": "'200' | '300' | '400' | '600' | '700' | '900'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "200",
        "300",
        "400",
        "600",
        "700",
        "900"
       ]
      },
      "required": false
     },
     {
      "uid": "fontStyle",
      "name": "fontStyle",
      "comment": {
       "raw": [
        "Determines the style of the text font.",
        " @default 'normal'"
       ],
       "tags": {
        "@default": "normal"
       }
      },
      "typeValue": {
       "raw": "'normal' | 'italic'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "normal",
        "italic"
       ]
      },
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines text size",
        " @default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'18' | '36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": "lineHeight",
      "name": "lineHeight",
      "comment": {
       "raw": [
        "Defines text line-height"
       ]
      },
      "typeValue": {
       "raw": "'12' | '18' | '24' | '30'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "30"
       ]
      },
      "from": "@epam/uui:TextSettings",
      "required": false
     },
     {
      "uid": "fontSize",
      "name": "fontSize",
      "comment": {
       "raw": [
        "Defines text font-size"
       ]
      },
      "typeValue": {
       "raw": "'12' | '18' | '24' | '14' | '16' | '10'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "10",
        "12",
        "14",
        "16",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:TextSettings",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TextInputModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TextInputModsOverride",
     "nameFull": "TextInputModsOverride"
    },
    "src": "uui/components/inputs/TextInput.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TextInputModsOverride",
     "print": [
      "interface TextInputModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:TextInputProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TextInputProps",
     "nameFull": "TextInputProps"
    },
    "src": "uui/components/inputs/TextInput.tsx",
    "comment": {
     "raw": [
      "Represents the properties for a TextInput component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TextInputProps",
     "print": [
      "/** Represents the properties for a TextInput component. */",
      "interface TextInputProps extends CoreTextInputProps, Overwrite<TextInputMods, TextInputModsOverride> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "acceptIcon",
      "name": "acceptIcon",
      "comment": {
       "raw": [
        "Overrides accept (check) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": "cancelIcon",
      "name": "cancelIcon",
      "comment": {
       "raw": [
        "Overrides cancel (cross) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Overrides dropdown (chevron) icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": "inputCx",
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put to the HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": "renderInput",
      "name": "renderInput",
      "comment": {
       "raw": [
        "overrides rendering of HTML Input element"
       ]
      },
      "typeValue": {
       "raw": "(props: IRenderInputProps) => JSX.Element"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:TextInputProps",
      "required": false
     },
     {
      "uid": "onCancel",
      "name": "onCancel",
      "comment": {
       "raw": [
        "Enables cancel (cross) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "onAccept",
      "name": "onAccept",
      "comment": {
       "raw": [
        "Enables accept (check) icon, and fires when the icon is clicked"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "onKeyDown",
      "name": "onKeyDown",
      "comment": {
       "raw": [
        "keydown event handler to put on the HTML input element"
       ]
      },
      "typeValue": {
       "raw": "(e?: React.KeyboardEvent<HTMLInputElement> | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "autoFocus",
      "name": "autoFocus",
      "comment": {
       "raw": [
        "Put focus on the element, when component is mounted"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "type",
      "name": "type",
      "comment": {
       "raw": [
        "Standard 'type' attribute to put on the HTML input element (e.g. 'password')"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "autoComplete",
      "name": "autoComplete",
      "comment": {
       "raw": [
        "Standard [autocomplete attribute]{@link https://www.w3schools.com/tags/att_input_autocomplete.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "name",
      "name": "name",
      "comment": {
       "raw": [
        "Standard [name attribute]{@link https://www.w3schools.com/tags/att_input_name.asp}"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "maxLength",
      "name": "maxLength",
      "comment": {
       "raw": [
        "Maximum input length in characters"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "inputMode",
      "name": "inputMode",
      "comment": {
       "raw": [
        "Standard [inputMode attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode}"
       ]
      },
      "typeValue": {
       "raw": "'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "none",
        "text",
        "tel",
        "url",
        "email",
        "numeric",
        "decimal",
        "search"
       ]
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "HTML ID attribute for input"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:TextInputCoreProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | undefined) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "placeholder",
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "getValueChangeAnalyticsEvent",
      "name": "getValueChangeAnalyticsEvent",
      "comment": {
       "raw": [
        "Given a value, returns an analytics event to send when component is edited.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "(newValue: string | null, oldValue: string | null) => AnalyticsEvent"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IAnalyticableOnChange",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLInputElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLInputElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "mode",
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'inline' | 'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "inline",
        "form",
        "cell"
       ]
      },
      "from": "@epam/uui:IHasEditMode",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        "60"
       ]
      },
      "from": "@epam/uui:TextInputMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TextModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TextModsOverride",
     "nameFull": "TextModsOverride"
    },
    "src": "uui/components/typography/Text.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TextModsOverride",
     "print": [
      "interface TextModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:TextPlaceholderProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TextPlaceholderProps",
     "nameFull": "TextPlaceholderProps"
    },
    "src": "uui/components/typography/TextPlaceholder.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "TextPlaceholderProps",
     "print": [
      "type TextPlaceholderProps = PropsWithChildren<ITextPlaceholderProps>;"
     ]
    },
    "props": [
     {
      "uid": "wordsCount",
      "name": "wordsCount",
      "comment": {
       "raw": [
        "Number of placeholder worlds to render in block"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui:ITextPlaceholderProps",
      "required": false
     },
     {
      "uid": "isNotAnimated",
      "name": "isNotAnimated",
      "comment": {
       "raw": [
        "Pass true, to turn off the placeholder animation"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:ITextPlaceholderProps",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@types/react:PropsWithChildren",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TextProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TextProps",
     "nameFull": "TextProps"
    },
    "src": "uui/components/typography/Text.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TextProps",
     "print": [
      "interface TextProps extends TextCoreProps, Overwrite<TextMods, TextModsOverride> {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "fontWeight",
      "name": "fontWeight",
      "comment": {
       "raw": [
        "Defines text font weight value",
        " @default '400'"
       ],
       "tags": {
        "@default": "400"
       }
      },
      "typeValue": {
       "raw": "'200' | '300' | '400' | '600' | '700' | '900'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "200",
        "300",
        "400",
        "600",
        "700",
        "900"
       ]
      },
      "from": "@epam/uui:TextCoreProps",
      "required": false
     },
     {
      "uid": "fontStyle",
      "name": "fontStyle",
      "comment": {
       "raw": [
        "Determines the style of the text font.",
        " @default 'normal'"
       ],
       "tags": {
        "@default": "normal"
       }
      },
      "typeValue": {
       "raw": "'normal' | 'italic'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "normal",
        "italic"
       ]
      },
      "from": "@epam/uui:TextCoreProps",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines text size",
        " @default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'18' | '36' | '48' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:TextCoreProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": "lineHeight",
      "name": "lineHeight",
      "comment": {
       "raw": [
        "Defines text line-height"
       ]
      },
      "typeValue": {
       "raw": "'12' | '18' | '24' | '30'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "30"
       ]
      },
      "from": "@epam/uui:TextSettings",
      "required": false
     },
     {
      "uid": "fontSize",
      "name": "fontSize",
      "comment": {
       "raw": [
        "Defines text font-size"
       ]
      },
      "typeValue": {
       "raw": "'12' | '18' | '24' | '14' | '16' | '10'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "10",
        "12",
        "14",
        "16",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:TextSettings",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines text color.",
        " @default 'primary'"
       ],
       "tags": {
        "@default": "primary"
       }
      },
      "typeValue": {
       "raw": "'info' | 'success' | 'warning' | 'critical' | 'primary' | 'secondary' | 'white' | 'tertiary' | 'disabled'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "info",
        "success",
        "warning",
        "critical",
        "primary",
        "secondary",
        "white",
        "tertiary",
        "disabled"
       ]
      },
      "from": "@epam/uui:TextMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TextSettings": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TextSettings",
     "nameFull": "TextSettings"
    },
    "src": "uui/helpers/textLayout.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TextSettings",
     "print": [
      "interface TextSettings {",
      "    /** Defines text line-height */",
      "    lineHeight?: '12' | '18' | '24' | '30';",
      "    /** Defines text font-size */",
      "    fontSize?: '10' | '12' | '14' | '16' | '18' | '24';",
      "}"
     ]
    },
    "props": [
     {
      "uid": "lineHeight",
      "name": "lineHeight",
      "comment": {
       "raw": [
        "Defines text line-height"
       ]
      },
      "typeValue": {
       "raw": "'12' | '18' | '24' | '30'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "30"
       ]
      },
      "required": false
     },
     {
      "uid": "fontSize",
      "name": "fontSize",
      "comment": {
       "raw": [
        "Defines text font-size"
       ]
      },
      "typeValue": {
       "raw": "'12' | '18' | '24' | '14' | '16' | '10'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "10",
        "12",
        "14",
        "16",
        "18",
        "24"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TimePickerBodyProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TimePickerBodyProps",
     "nameFull": "TimePickerBodyProps"
    },
    "src": "uui/components/inputs/timePicker/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TimePickerBodyProps",
     "print": [
      "interface TimePickerBodyProps extends Pick<TimePickerProps, 'minutesStep' | 'format'>, IHasCX, IEditable<TimePickerValue>, IHasRawProps<React.HTMLAttributes<HTMLDivElement>>, IHasForwardedRef<HTMLDivElement> {",
      "    /** Icon for the add action.",
      "     * Usually it has a default implementation in skins, so providing this is only necessary if you want to replace the default icon",
      "     */",
      "    addIcon?: Icon;",
      "    /** Icon for the subtract action.",
      "     * Usually it has a default implementation in skins, so providing this is only necessary if you want to replace the default icon",
      "     */",
      "    subtractIcon?: Icon;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "addIcon",
      "name": "addIcon",
      "comment": {
       "raw": [
        "Icon for the add action.",
        " Usually it has a default implementation in skins, so providing this is only necessary if you want to replace the default icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "subtractIcon",
      "name": "subtractIcon",
      "comment": {
       "raw": [
        "Icon for the subtract action.",
        " Usually it has a default implementation in skins, so providing this is only necessary if you want to replace the default icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "format",
      "name": "format",
      "comment": {
       "raw": [
        "Time format, 12 hours with AM/PM or 24 hours",
        " @default 12"
       ],
       "tags": {
        "@default": 12
       }
      },
      "typeValue": {
       "raw": "12 | 24"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        12,
        24
       ]
      },
      "from": "@epam/uui:TimePickerProps",
      "required": false
     },
     {
      "uid": "minutesStep",
      "name": "minutesStep",
      "comment": {
       "raw": [
        "Minutes input increase/decrease step on up/down icons clicks and up/down arrow keys",
        " @default 5"
       ],
       "tags": {
        "@default": 5
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui:TimePickerProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TimePickerValue"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TimePickerValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TimePickerModsOverride": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TimePickerModsOverride",
     "nameFull": "TimePickerModsOverride"
    },
    "src": "uui/components/inputs/timePicker/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TimePickerModsOverride",
     "print": [
      "interface TimePickerModsOverride {",
      "}"
     ]
    }
   }
  },
  "@epam/uui:TimePickerProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TimePickerProps",
     "nameFull": "TimePickerProps"
    },
    "src": "uui/components/inputs/timePicker/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TimePickerProps",
     "print": [
      "interface TimePickerProps extends Overwrite<TimePickerMods, TimePickerModsOverride>, IHasEditMode, IEditable<TimePickerValue | null>, IDisableable, ICanBeReadonly, IHasPlaceholder, ICanFocus<HTMLElement>, IHasForwardedRef<HTMLElement> {",
      "    /**",
      "     * Minutes input increase/decrease step on up/down icons clicks and up/down arrow keys",
      "     * @default 5",
      "     */",
      "    minutesStep?: number;",
      "    /**",
      "     * Time format, 12 hours with AM/PM or 24 hours",
      "     * @default 12",
      "     */",
      "    format?: 12 | 24;",
      "    /** ID to put on time picker toggler 'input' node */",
      "    id?: string;",
      "    /**",
      "     * Render callback for time picker toggler.",
      "     * If omitted, default TextInput component will be rendered.",
      "     */",
      "    renderTarget?(props: IDropdownToggler): React.ReactNode;",
      "    /** HTML attributes to put directly to TimePicker parts */",
      "    rawProps?: {",
      "        /** HTML attributes to put directly to the input element */",
      "        input?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
      "        /** HTML attributes to put directly to the body root element */",
      "        body?: IHasRawProps<React.HTMLAttributes<HTMLDivElement>>['rawProps'];",
      "    };",
      "    /** CSS class(es) to put on input-part component. See https://github.com/JedWatson/classnames#usage for details */",
      "    inputCx?: CX;",
      "    /** CSS class(es) to put on body-part component. See https://github.com/JedWatson/classnames#usage for details */",
      "    bodyCx?: CX;",
      "    /**",
      "     * Indicates that inputs' clear cross is hidden",
      "     */",
      "    disableClear?: boolean;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "minutesStep",
      "name": "minutesStep",
      "comment": {
       "raw": [
        "Minutes input increase/decrease step on up/down icons clicks and up/down arrow keys",
        " @default 5"
       ],
       "tags": {
        "@default": 5
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": false
     },
     {
      "uid": "format",
      "name": "format",
      "comment": {
       "raw": [
        "Time format, 12 hours with AM/PM or 24 hours",
        " @default 12"
       ],
       "tags": {
        "@default": 12
       }
      },
      "typeValue": {
       "raw": "12 | 24"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        12,
        24
       ]
      },
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "ID to put on time picker toggler 'input' node"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": false
     },
     {
      "uid": "renderTarget",
      "name": "renderTarget",
      "comment": {
       "raw": [
        "Render callback for time picker toggler.",
        " If omitted, default TextInput component will be rendered."
       ]
      },
      "typeValue": {
       "raw": "(props: IDropdownToggler) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "HTML attributes to put directly to TimePicker parts"
       ]
      },
      "typeValue": {
       "raw": "{ input?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; body?: (React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>) | undefined; }"
      },
      "required": false
     },
     {
      "uid": "inputCx",
      "name": "inputCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on input-part component. See https://github.com/JedWatson/classnames#usage for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "required": false
     },
     {
      "uid": "bodyCx",
      "name": "bodyCx",
      "comment": {
       "raw": [
        "CSS class(es) to put on body-part component. See https://github.com/JedWatson/classnames#usage for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "required": false
     },
     {
      "uid": "disableClear",
      "name": "disableClear",
      "comment": {
       "raw": [
        "Indicates that inputs' clear cross is hidden"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size."
       ]
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:TimePickerMods",
      "required": false
     },
     {
      "uid": "mode",
      "name": "mode",
      "comment": {
       "raw": [
        "Visual mode for component:",
        " - form: default visuals, to use in forms.",
        " - cell: adjust to embed as table cell editor: no borders, no focus (it is applied by DataCell)",
        " - inline: adjust for WYSIWYG UX. Backgrounds removed. Borders appear only on hover."
       ]
      },
      "typeValue": {
       "raw": "'inline' | 'form' | 'cell'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "inline",
        "form",
        "cell"
       ]
      },
      "from": "@epam/uui:IHasEditMode",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "null | TimePickerValue"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TimePickerValue | null) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "placeholder",
      "name": "placeholder",
      "comment": {
       "raw": [
        "Placeholder to display when empty"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:IHasPlaceholder",
      "required": false
     },
     {
      "uid": "onFocus",
      "name": "onFocus",
      "comment": {
       "raw": [
        "Called when component gets input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "onBlur",
      "name": "onBlur",
      "comment": {
       "raw": [
        "Called when component looses input focus"
       ]
      },
      "typeValue": {
       "raw": "(e: React.FocusEvent<HTMLElement, Element>) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:ICanFocus",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLElement | null) => void | React.MutableRefObject<HTMLElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TimePickerValue": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TimePickerValue",
     "nameFull": "TimePickerValue"
    },
    "src": "uui/components/inputs/timePicker/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TimePickerValue",
     "print": [
      "interface TimePickerValue {",
      "    /** Selected hours value */",
      "    hours: number;",
      "    /** Selected minutes value */",
      "    minutes: number;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "hours",
      "name": "hours",
      "comment": {
       "raw": [
        "Selected hours value"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": "minutes",
      "name": "minutes",
      "comment": {
       "raw": [
        "Selected minutes value"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TooltipCoreProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TooltipCoreProps",
     "nameFull": "TooltipCoreProps"
    },
    "src": "uui/components/overlays/Tooltip.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TooltipCoreProps",
     "print": [
      "interface TooltipCoreProps extends uuiComponents.TooltipProps {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "content",
      "name": "content",
      "comment": {
       "raw": [
        "Content to show in the tooltip (ReactNode)"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "renderContent",
      "name": "renderContent",
      "comment": {
       "raw": [
        "Alternative to 'content' prop, you can pass a render function.",
        " The function will only be called when content is shown, this can save performance."
       ]
      },
      "typeValue": {
       "raw": "() => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "offset",
      "name": "offset",
      "comment": {
       "raw": [
        "See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/offset/}"
       ]
      },
      "typeValue": {
       "raw": "OffsetsFunction | [number | null | undefined, number | null | undefined]"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "React Node(s) to show tooltip for"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "maxWidth",
      "name": "maxWidth",
      "comment": {
       "raw": [
        "Max width of tooltip"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "onClose",
      "name": "onClose",
      "comment": {
       "raw": [
        "Called when dropdown was closed"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "placement",
      "name": "placement",
      "comment": {
       "raw": [
        "Defines dropdown body placement relative to target"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'top' | 'bottom' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "top",
        "bottom",
        "auto-start",
        "auto-end",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "modifiers",
      "name": "modifiers",
      "comment": {
       "raw": [
        "Original popper.js modifiers. See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/}"
       ]
      },
      "typeValue": {
       "raw": "(StrictModifier<any> | Partial<Modifier<any, object>>)[]"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "openDelay",
      "name": "openDelay",
      "comment": {
       "raw": [
        "Defines how much 'ms' user should hold mouse over target to open the dropdown",
        " This prop work only with openOnHover={true}",
        " @default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "closeDelay",
      "name": "closeDelay",
      "comment": {
       "raw": [
        "Defines after which delay dropdown will be closed, if user leave mouse from target.",
        " This prop work only with openOnHover={true}",
        " @default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "closeOnMouseLeave",
      "name": "closeOnMouseLeave",
      "comment": {
       "raw": [
        "Defined when to close dropdown in case of openOnHover={ true }",
        " toggler — dropdown will be closed when a mouse leaves the target component",
        " boundary — will not to close the dropdown when a mouse is on target or in 30px around target area",
        " false — will not close dropdown by mouse move event",
        " @default 'toggler'"
       ],
       "tags": {
        "@default": "toggler"
       }
      },
      "typeValue": {
       "raw": "false | 'toggler' | 'boundary'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        "toggler",
        "boundary"
       ]
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "portalTarget",
      "name": "portalTarget",
      "comment": {
       "raw": [
        "Node of portal target, where to render the dropdown body.",
        " By default, will be used global portal node."
       ]
      },
      "typeValue": {
       "raw": "HTMLElement"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "boundaryElement",
      "name": "boundaryElement",
      "comment": {
       "raw": [
        "Element relative to which dropdown will calculate position"
       ]
      },
      "typeValue": {
       "raw": "HTMLElement | HTMLElement[] | 'clippingParents'"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "closeBodyOnTogglerHidden",
      "name": "closeBodyOnTogglerHidden",
      "comment": {
       "raw": [
        "Pass false, if you do not want to close the dropdown in case Toggler move out of viewport.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:TooltipProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TooltipProps",
     "nameFull": "TooltipProps"
    },
    "src": "uui/components/overlays/Tooltip.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TooltipProps",
     "print": [
      "interface TooltipProps extends TooltipCoreProps, TooltipMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "content",
      "name": "content",
      "comment": {
       "raw": [
        "Content to show in the tooltip (ReactNode)"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "renderContent",
      "name": "renderContent",
      "comment": {
       "raw": [
        "Alternative to 'content' prop, you can pass a render function.",
        " The function will only be called when content is shown, this can save performance."
       ]
      },
      "typeValue": {
       "raw": "() => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "offset",
      "name": "offset",
      "comment": {
       "raw": [
        "See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/offset/}"
       ]
      },
      "typeValue": {
       "raw": "OffsetsFunction | [number | null | undefined, number | null | undefined]"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "React Node(s) to show tooltip for"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "maxWidth",
      "name": "maxWidth",
      "comment": {
       "raw": [
        "Max width of tooltip"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "onClose",
      "name": "onClose",
      "comment": {
       "raw": [
        "Called when dropdown was closed"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "placement",
      "name": "placement",
      "comment": {
       "raw": [
        "Defines dropdown body placement relative to target"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'auto' | 'top' | 'bottom' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "auto",
        "top",
        "bottom",
        "auto-start",
        "auto-end",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "modifiers",
      "name": "modifiers",
      "comment": {
       "raw": [
        "Original popper.js modifiers. See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/}"
       ]
      },
      "typeValue": {
       "raw": "(StrictModifier<any> | Partial<Modifier<any, object>>)[]"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "openDelay",
      "name": "openDelay",
      "comment": {
       "raw": [
        "Defines how much 'ms' user should hold mouse over target to open the dropdown",
        " This prop work only with openOnHover={true}",
        " @default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "closeDelay",
      "name": "closeDelay",
      "comment": {
       "raw": [
        "Defines after which delay dropdown will be closed, if user leave mouse from target.",
        " This prop work only with openOnHover={true}",
        " @default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "closeOnMouseLeave",
      "name": "closeOnMouseLeave",
      "comment": {
       "raw": [
        "Defined when to close dropdown in case of openOnHover={ true }",
        " toggler — dropdown will be closed when a mouse leaves the target component",
        " boundary — will not to close the dropdown when a mouse is on target or in 30px around target area",
        " false — will not close dropdown by mouse move event",
        " @default 'toggler'"
       ],
       "tags": {
        "@default": "toggler"
       }
      },
      "typeValue": {
       "raw": "false | 'toggler' | 'boundary'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        "toggler",
        "boundary"
       ]
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "portalTarget",
      "name": "portalTarget",
      "comment": {
       "raw": [
        "Node of portal target, where to render the dropdown body.",
        " By default, will be used global portal node."
       ]
      },
      "typeValue": {
       "raw": "HTMLElement"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "boundaryElement",
      "name": "boundaryElement",
      "comment": {
       "raw": [
        "Element relative to which dropdown will calculate position"
       ]
      },
      "typeValue": {
       "raw": "HTMLElement | HTMLElement[] | 'clippingParents'"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "closeBodyOnTogglerHidden",
      "name": "closeBodyOnTogglerHidden",
      "comment": {
       "raw": [
        "Pass false, if you do not want to close the dropdown in case Toggler move out of viewport.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Tooltip color",
        " @default 'inverted'"
       ],
       "tags": {
        "@default": "inverted"
       }
      },
      "typeValue": {
       "raw": "'critical' | 'neutral' | 'inverted'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "critical",
        "neutral",
        "inverted"
       ]
      },
      "from": "@epam/uui:TooltipMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:VerticalTabButtonProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "VerticalTabButtonProps",
     "nameFull": "VerticalTabButtonProps"
    },
    "src": "uui/components/buttons/VerticalTabButton.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a VerticalTabButton component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "TabButtonProps",
     "print": [
      "/** Represents the properties of a VerticalTabButton component. */",
      "type VerticalTabButtonProps = TabButtonProps;"
     ]
    },
    "props": [
     {
      "uid": "onClear",
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui:TabButtonProps",
      "required": false
     },
     {
      "uid": "clearIcon",
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:TabButtonProps",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:TabButtonProps",
      "required": false
     },
     {
      "uid": "count",
      "name": "count",
      "comment": {
       "raw": [
        "Count value to be placed in component"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui:TabButtonProps",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '48'"
       ],
       "tags": {
        "@default": "48"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '60'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "36",
        "48",
        "60"
       ]
      },
      "from": "@epam/uui:TabButtonMods",
      "required": false
     },
     {
      "uid": "withNotify",
      "name": "withNotify",
      "comment": {
       "raw": [
        "Defines is the component showing Notify"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:TabButtonMods",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:VirtualListProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "VirtualListProps",
     "nameFull": "VirtualListProps<List>"
    },
    "src": "uui/components/layout/VirtualList.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "BaseVirtualListProps & { rows?: React.ReactNode[] | undefined; renderRows: (config: VirtualListRenderRowsParams<List>) => React.ReactNode; } | BaseVirtualListProps & { rows: React.ReactNode[]; renderRows?: ((config: VirtualListRenderRowsParams<List>) => React.ReactNode) | undefined; }",
     "print": [
      "type VirtualListProps<List extends HTMLElement = any> = BaseVirtualListProps & VirtualListRenderRows<List>;"
     ]
    },
    "props": [
     {
      "uid": "role",
      "name": "role",
      "comment": {
       "raw": [
        "HTML role attribute to place on list container"
       ]
      },
      "typeValue": {
       "raw": "'none' | 'form' | 'cell' | string & {} | 'article' | 'button' | 'dialog' | 'figure' | 'img' | 'link' | 'main' | 'menu' | 'menuitem' | 'option' | 'table' | 'switch' | 'search' | 'alert' | 'alertdialog' | 'application' | 'banner' | 'checkbox' | 'columnheader' | 'combobox' | 'complementary' | 'contentinfo' | 'definition' | 'directory' | 'document' | 'feed' | 'grid' | 'gridcell' | 'group' | 'heading' | 'list' | 'listbox' | 'listitem' | 'log' | 'marquee' | 'math' | 'menubar' | 'menuitemcheckbox' | 'menuitemradio' | 'navigation' | 'note' | 'presentation' | 'progressbar' | 'radio' | 'radiogroup' | 'region' | 'row' | 'rowgroup' | 'rowheader' | 'scrollbar' | 'searchbox' | 'separator' | 'slider' | 'spinbutton' | 'status' | 'tab' | 'tablist' | 'tabpanel' | 'term' | 'textbox' | 'timer' | 'toolbar' | 'tooltip' | 'tree' | 'treegrid' | 'treeitem'"
      },
      "from": "@epam/uui:BaseVirtualListProps",
      "required": false
     },
     {
      "uid": "isLoading",
      "name": "isLoading",
      "comment": {
       "raw": [
        "Pass true, to enable Blocker while list loading"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:BaseVirtualListProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "VirtualListState"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: VirtualListState) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "onScroll",
      "name": "onScroll",
      "comment": {
       "raw": [
        "Called when list was scrolled"
       ]
      },
      "typeValue": {
       "raw": "(value: HTMLElement) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:UseVirtualListProps",
      "required": false
     },
     {
      "uid": "rowsCount",
      "name": "rowsCount",
      "comment": {
       "raw": [
        "Count of list items"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:UseVirtualListProps",
      "required": false
     },
     {
      "uid": "rowsSelector",
      "name": "rowsSelector",
      "comment": {
       "raw": [
        "Selector to get rows container node."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:UseVirtualListProps",
      "required": false
     },
     {
      "uid": "rows",
      "name": "rows",
      "typeValue": {
       "raw": "React.ReactNode[]"
      },
      "from": "@epam/uui:VirtualListRenderRows",
      "required": false
     },
     {
      "uid": "renderRows",
      "name": "renderRows",
      "typeValue": {
       "raw": "(config: VirtualListRenderRowsParams<List>) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:VirtualListRenderRows",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui:VirtualListRenderRowsParams": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "VirtualListRenderRowsParams",
     "nameFull": "VirtualListRenderRowsParams<ListContainer>"
    },
    "src": "uui/components/layout/VirtualList.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "VirtualListRenderRowsParams<ListContainer>",
     "print": [
      "interface VirtualListRenderRowsParams<ListContainer extends HTMLElement = any> {",
      "    listContainerRef: React.MutableRefObject<ListContainer>;",
      "    estimatedHeight: number;",
      "    offsetY: number;",
      "    scrollShadows: {",
      "        verticalTop: boolean;",
      "        verticalBottom: boolean;",
      "        horizontalLeft: boolean;",
      "        horizontalRight: boolean;",
      "    };",
      "}"
     ]
    },
    "props": [
     {
      "uid": "listContainerRef",
      "name": "listContainerRef",
      "typeValue": {
       "raw": "React.MutableRefObject<ListContainer>"
      },
      "required": true
     },
     {
      "uid": "estimatedHeight",
      "name": "estimatedHeight",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": "offsetY",
      "name": "offsetY",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "required": true
     },
     {
      "uid": "scrollShadows",
      "name": "scrollShadows",
      "typeValue": {
       "raw": "{ verticalTop: boolean; verticalBottom: boolean; horizontalLeft: boolean; horizontalRight: boolean; }"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui:AccordionMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "AccordionMods",
     "nameFull": "AccordionMods"
    },
    "src": "uui/components/layout/Accordion.tsx",
    "exported": false
   }
  },
  "@epam/uui:AlertMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "AlertMods",
     "nameFull": "AlertMods"
    },
    "src": "uui/components/overlays/Alert.tsx",
    "exported": false
   }
  },
  "@epam/uui:BadgeMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "BadgeMods",
     "nameFull": "BadgeMods"
    },
    "src": "uui/components/widgets/Badge.tsx",
    "exported": false
   }
  },
  "@epam/uui:BaseRowMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "BaseRowMods",
     "nameFull": "BaseRowMods"
    },
    "src": "uui/components/tables/types.ts",
    "exported": false
   }
  },
  "@epam/uui:BaseVirtualListProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "BaseVirtualListProps",
     "nameFull": "BaseVirtualListProps"
    },
    "src": "uui/components/layout/VirtualList.tsx",
    "exported": false
   }
  },
  "@epam/uui:BurgerButtonMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "BurgerButtonMods",
     "nameFull": "BurgerButtonMods"
    },
    "src": "uui/components/navigation/MainMenu/Burger/BurgerButton.tsx",
    "exported": false
   }
  },
  "@epam/uui:ButtonMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ButtonMods",
     "nameFull": "ButtonMods"
    },
    "src": "uui/components/buttons/Button.tsx",
    "exported": false
   }
  },
  "@epam/uui:CheckboxMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "CheckboxMods",
     "nameFull": "CheckboxMods"
    },
    "src": "uui/components/inputs/Checkbox.tsx",
    "exported": false
   }
  },
  "@epam/uui:CommonDatePickerBodyProps": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "CommonDatePickerBodyProps",
     "nameFull": "CommonDatePickerBodyProps"
    },
    "src": "uui/components/datePickers/types.ts",
    "exported": false
   }
  },
  "@epam/uui:CountIndicatorMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "CountIndicatorMods",
     "nameFull": "CountIndicatorMods"
    },
    "src": "uui/components/widgets/CountIndicator.tsx",
    "exported": false
   }
  },
  "@epam/uui:DataPickerBodyMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataPickerBodyMods",
     "nameFull": "DataPickerBodyMods"
    },
    "src": "uui/components/pickers/DataPickerBody.tsx",
    "exported": false
   }
  },
  "@epam/uui:DataPickerRowMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DataPickerRowMods",
     "nameFull": "DataPickerRowMods"
    },
    "src": "uui/components/pickers/DataPickerRow.tsx",
    "exported": false
   }
  },
  "@epam/uui:DatePickerMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DatePickerMods",
     "nameFull": "DatePickerMods"
    },
    "src": "uui/components/datePickers/types.ts",
    "exported": false
   }
  },
  "@epam/uui:DropdownContainerMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "DropdownContainerMods",
     "nameFull": "DropdownContainerMods"
    },
    "src": "uui/components/overlays/DropdownContainer.tsx",
    "exported": false
   }
  },
  "@epam/uui:FiltersPanelMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "FiltersPanelMods",
     "nameFull": "FiltersPanelMods"
    },
    "src": "uui/components/filters/FiltersPanel.tsx",
    "exported": false
   }
  },
  "@epam/uui:IconButtonMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "IconButtonMods",
     "nameFull": "IconButtonMods"
    },
    "src": "uui/components/buttons/IconButton.tsx",
    "exported": false
   }
  },
  "@epam/uui:IHasEditMode": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "IHasEditMode",
     "nameFull": "IHasEditMode"
    },
    "src": "uui/components/types.ts",
    "comment": {
     "raw": [
      "Component can adjust visuals for different contexts: forms, tables cells, on in WYSIWYG UX"
     ]
    },
    "exported": false
   }
  },
  "@epam/uui:LabeledInputMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "LabeledInputMods",
     "nameFull": "LabeledInputMods"
    },
    "src": "uui/components/layout/LabeledInput.tsx",
    "exported": false
   }
  },
  "@epam/uui:LinkButtonMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "LinkButtonMods",
     "nameFull": "LinkButtonMods"
    },
    "src": "uui/components/buttons/LinkButton.tsx",
    "exported": false
   }
  },
  "@epam/uui:MainMenuButtonMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "MainMenuButtonMods",
     "nameFull": "MainMenuButtonMods"
    },
    "src": "uui/components/navigation/MainMenu/MainMenuButton.tsx",
    "exported": false
   }
  },
  "@epam/uui:ModalWindowMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ModalWindowMods",
     "nameFull": "ModalWindowMods"
    },
    "src": "uui/components/overlays/Modals.tsx",
    "exported": false
   }
  },
  "@epam/uui:MultiSwitchMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "MultiSwitchMods",
     "nameFull": "MultiSwitchMods"
    },
    "src": "uui/components/inputs/MultiSwitch.tsx",
    "exported": false
   }
  },
  "@epam/uui:NotificationMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "NotificationMods",
     "nameFull": "NotificationMods"
    },
    "src": "uui/components/overlays/NotificationCard.tsx",
    "exported": false
   }
  },
  "@epam/uui:NumericInputMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "NumericInputMods",
     "nameFull": "NumericInputMods"
    },
    "src": "uui/components/inputs/NumericInput.tsx",
    "exported": false
   }
  },
  "@epam/uui:PanelMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PanelMods",
     "nameFull": "PanelMods"
    },
    "src": "uui/components/layout/FlexItems/Panel.tsx",
    "exported": false
   }
  },
  "@epam/uui:PickerItemMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PickerItemMods",
     "nameFull": "PickerItemMods"
    },
    "src": "uui/components/pickers/PickerItem.tsx",
    "exported": false
   }
  },
  "@epam/uui:PickerTogglerTagMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "PickerTogglerTagMods",
     "nameFull": "PickerTogglerTagMods"
    },
    "src": "uui/components/pickers/PickerTogglerTag.tsx",
    "exported": false
   }
  },
  "@epam/uui:ProgressBarMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "ProgressBarMods",
     "nameFull": "ProgressBarMods"
    },
    "src": "uui/components/widgets/ProgressBar.tsx",
    "exported": false
   }
  },
  "@epam/uui:RadioInputMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RadioInputMods",
     "nameFull": "RadioInputMods"
    },
    "src": "uui/components/inputs/RadioInput.tsx",
    "exported": false
   }
  },
  "@epam/uui:RangeDatePickerInputType": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RangeDatePickerInputType",
     "nameFull": "RangeDatePickerInputType"
    },
    "src": "uui/components/datePickers/types.ts",
    "comment": {
     "raw": [
      "Represents RangeDatePicker input type"
     ]
    },
    "exported": false
   }
  },
  "@epam/uui:RangeDatePickerMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RangeDatePickerMods",
     "nameFull": "RangeDatePickerMods"
    },
    "src": "uui/components/datePickers/types.ts",
    "exported": false
   }
  },
  "@epam/uui:RichTextViewMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "RichTextViewMods",
     "nameFull": "RichTextViewMods"
    },
    "src": "uui/components/typography/RichTextView.tsx",
    "exported": false
   }
  },
  "@epam/uui:SizeMod": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "SizeMod",
     "nameFull": "SizeMod"
    },
    "src": "uui/components/types.ts",
    "exported": false
   }
  },
  "@epam/uui:StatusIndicatorMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "StatusIndicatorMods",
     "nameFull": "StatusIndicatorMods"
    },
    "src": "uui/components/widgets/StatusIndicator.tsx",
    "exported": false
   }
  },
  "@epam/uui:SwitchMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "SwitchMods",
     "nameFull": "SwitchMods"
    },
    "src": "uui/components/inputs/Switch.tsx",
    "exported": false
   }
  },
  "@epam/uui:TabButtonMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TabButtonMods",
     "nameFull": "TabButtonMods"
    },
    "src": "uui/components/buttons/TabButton.tsx",
    "exported": false
   }
  },
  "@epam/uui:TableSizesAndPositionMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TableSizesAndPositionMods",
     "nameFull": "TableSizesAndPositionMods"
    },
    "src": "uui/components/tables/types.ts",
    "exported": false
   }
  },
  "@epam/uui:TagMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TagMods",
     "nameFull": "TagMods"
    },
    "src": "uui/components/widgets/Tag.tsx",
    "exported": false
   }
  },
  "@epam/uui:TextAreaMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TextAreaMods",
     "nameFull": "TextAreaMods"
    },
    "src": "uui/components/inputs/TextArea.tsx",
    "exported": false
   }
  },
  "@epam/uui:TextInputMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TextInputMods",
     "nameFull": "TextInputMods"
    },
    "src": "uui/components/inputs/TextInput.tsx",
    "exported": false
   }
  },
  "@epam/uui:TextMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TextMods",
     "nameFull": "TextMods"
    },
    "src": "uui/components/typography/Text.tsx",
    "exported": false
   }
  },
  "@epam/uui:TimePickerMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TimePickerMods",
     "nameFull": "TimePickerMods"
    },
    "src": "uui/components/inputs/timePicker/types.ts",
    "exported": false
   }
  },
  "@epam/uui:TooltipMods": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "TooltipMods",
     "nameFull": "TooltipMods"
    },
    "src": "uui/components/overlays/Tooltip.tsx",
    "exported": false
   }
  },
  "@epam/uui:VirtualListRenderRows": {
   "summary": {
    "module": "@epam/uui",
    "typeName": {
     "name": "VirtualListRenderRows",
     "nameFull": "VirtualListRenderRows<List>"
    },
    "src": "uui/components/layout/VirtualList.tsx",
    "exported": false
   }
  },
  "@epam/promo:AlertProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "AlertProps",
     "nameFull": "AlertProps"
    },
    "src": "epam-promo/components/overlays/Alert.tsx",
    "comment": {
     "raw": [
      "Represents the properties of an Alert component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "AlertProps",
     "print": [
      "/** Represents the properties of an Alert component. */",
      "interface AlertProps extends uui.AlertCoreProps, AlertMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "actions",
      "name": "actions",
      "comment": {
       "raw": [
        "List of actions to display in the alert. Each action has name and 'action' callback"
       ]
      },
      "typeValue": {
       "raw": "AlertNotificationAction[]"
      },
      "from": "@epam/uui:AlertCoreProps",
      "required": false
     },
     {
      "uid": "onClose",
      "name": "onClose",
      "comment": {
       "raw": [
        "When specified, a close icon is rendered. onClose callback will be called on clicking the close icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui:AlertCoreProps",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "An optional icon to show on the left of the alert"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:AlertCoreProps",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Component size. If omitted, 48 size will be used.",
        " @default '48'"
       ],
       "tags": {
        "@default": "48"
       }
      },
      "typeValue": {
       "raw": "'36' | '48'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "36",
        "48"
       ]
      },
      "from": "@epam/uui:AlertCoreProps",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'blue'"
       ],
       "tags": {
        "@default": "blue"
       }
      },
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red' | 'info' | 'success' | 'warning' | 'error'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "info",
        "success",
        "warning",
        "error"
       ]
      },
      "from": "@epam/promo:AlertMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:BadgeProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "BadgeProps",
     "nameFull": "BadgeProps"
    },
    "src": "epam-promo/components/widgets/Badge.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a badge component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "BadgeProps",
     "print": [
      "/** Represents the properties of a badge component. */",
      "type BadgeProps = uui.BadgeCoreProps & BadgeMods;"
     ]
    },
    "props": [
     {
      "uid": "indicator",
      "name": "indicator",
      "comment": {
       "raw": [
        "Pass true to display an indicator. It shows only if fill = 'outline'."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:BadgeCoreProps",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)",
        " @default 'left'"
       ],
       "tags": {
        "@default": "left"
       }
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui:BadgeCoreProps",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:BadgeCoreProps",
      "required": false
     },
     {
      "uid": "count",
      "name": "count",
      "comment": {
       "raw": [
        "Count value to be placed in component"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui:BadgeCoreProps",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'blue'"
       ],
       "tags": {
        "@default": "blue"
       }
      },
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red' | 'info' | 'success' | 'warning' | 'yellow' | 'orange' | 'fuchsia' | 'purple' | 'violet' | 'cobalt' | 'cyan' | 'mint' | 'white' | 'gray10' | 'gray30' | 'gray60' | 'critical' | 'neutral'"
      },
      "typeValueRef": "@epam/promo:BadgeColor",
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "info",
        "success",
        "warning",
        "yellow",
        "orange",
        "fuchsia",
        "purple",
        "violet",
        "cobalt",
        "cyan",
        "mint",
        "white",
        "gray10",
        "gray30",
        "gray60",
        "critical",
        "neutral"
       ]
      },
      "from": "@epam/promo:BadgeMods",
      "required": false
     },
     {
      "uid": "fill",
      "name": "fill",
      "comment": {
       "raw": [
        "Defines component fill style.",
        " @default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline"
       ]
      },
      "from": "@epam/promo:BadgeMods",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default 36"
       ],
       "tags": {
        "@default": 36
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/promo:BadgeMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:ButtonProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "ButtonProps",
     "nameFull": "ButtonProps"
    },
    "src": "epam-promo/components/buttons/Button.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a Button component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "ButtonProps",
     "print": [
      "/** Represents the properties of a Button component. */",
      "type ButtonProps = uui.ButtonCoreProps & ButtonMods;"
     ]
    },
    "props": [
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "onClear",
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": "clearIcon",
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": "fill",
      "name": "fill",
      "comment": {
       "raw": [
        "Defines component fill style.",
        " @default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'white' | 'solid' | 'light' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "solid",
        "light",
        "none"
       ]
      },
      "from": "@epam/promo:ButtonMods",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'blue'"
       ],
       "tags": {
        "@default": "blue"
       }
      },
      "typeValue": {
       "raw": "'blue' | 'green' | 'red' | 'white' | 'critical' | 'neutral' | 'gray' | 'accent' | 'primary' | 'secondary'"
      },
      "typeValueRef": "@epam/promo:ButtonColor",
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "red",
        "white",
        "critical",
        "neutral",
        "gray",
        "accent",
        "primary",
        "secondary"
       ]
      },
      "from": "@epam/promo:ButtonMods",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/promo:ButtonMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:CountIndicatorProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "CountIndicatorProps",
     "nameFull": "CountIndicatorProps"
    },
    "src": "epam-promo/components/widgets/CountIndicator.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a CountIndicator component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "CountIndicatorProps",
     "print": [
      "/** Represents the properties of a CountIndicator component. */",
      "type CountIndicatorProps = uui.CountIndicatorCoreProps & CountIndicatorMods;"
     ]
    },
    "props": [
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '24'"
       ],
       "tags": {
        "@default": "24"
       }
      },
      "typeValue": {
       "raw": "'18' | '24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:CountIndicatorCoreProps",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color."
       ]
      },
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red' | 'info' | 'success' | 'warning' | 'white' | 'critical' | 'neutral' | 'gray'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "info",
        "success",
        "warning",
        "white",
        "critical",
        "neutral",
        "gray"
       ]
      },
      "from": "@epam/promo:CountIndicatorMods",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:FlexRowProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "FlexRowProps",
     "nameFull": "FlexRowProps"
    },
    "src": "epam-promo/components/layout/FlexItems/FlexRow.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "FlexRowProps",
     "print": [
      "type FlexRowProps = Omit<uui.FlexRowProps, 'background'> & FlexRowMods;"
     ]
    },
    "props": [
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines row size"
       ]
      },
      "typeValue": {
       "raw": "null | '36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        null
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "alignItems",
      "name": "alignItems",
      "comment": {
       "raw": [
        "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)",
        " @default 'center'"
       ],
       "tags": {
        "@default": "center"
       }
      },
      "typeValue": {
       "raw": "'top' | 'center' | 'bottom' | 'stretch'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "center",
        "bottom",
        "stretch"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "justifyContent",
      "name": "justifyContent",
      "comment": {
       "raw": [
        "Flexbox justifyContent property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
       ]
      },
      "typeValue": {
       "raw": "'center' | 'space-between' | 'space-around' | 'space-evenly' | 'start' | 'end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "center",
        "space-between",
        "space-around",
        "space-evenly",
        "start",
        "end"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "columnGap",
      "name": "columnGap",
      "comment": {
       "raw": [
        "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '36' | '18' | '24' | '12' | '6'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "36"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "rowGap",
      "name": "rowGap",
      "comment": {
       "raw": [
        "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '36' | '18' | '24' | '12' | '6'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "36"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "borderTop",
      "name": "borderTop",
      "comment": {
       "raw": [
        "Pass true, to enable row top border"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "borderBottom",
      "name": "borderBottom",
      "comment": {
       "raw": [
        "Pass true, to enable row bottom border"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "margin",
      "name": "margin",
      "comment": {
       "raw": [
        "Defines row margin"
       ]
      },
      "typeValue": {
       "raw": "'24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "24"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "padding",
      "name": "padding",
      "comment": {
       "raw": [
        "Defines horizontal row padding"
       ]
      },
      "typeValue": {
       "raw": "'18' | '24' | '12' | '6'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "spacing",
      "name": "spacing",
      "comment": {
       "raw": [
        "Defines row spacing"
       ]
      },
      "typeValue": {
       "raw": "'18' | '12' | '6'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "topShadow",
      "name": "topShadow",
      "comment": {
       "raw": [
        "Pass true, to show a top shadow"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "vPadding",
      "name": "vPadding",
      "comment": {
       "raw": [
        "Defines vertical row padding"
       ]
      },
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "36",
        "48"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "background",
      "name": "background",
      "comment": {
       "raw": [
        "@default 'none'"
       ],
       "tags": {
        "@default": "none"
       }
      },
      "typeValue": {
       "raw": "'white' | 'none' | 'gray5' | 'surface-main'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "none",
        "gray5",
        "surface-main"
       ]
      },
      "from": "@epam/promo:FlexRowMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:IconButtonProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "IconButtonProps",
     "nameFull": "IconButtonProps"
    },
    "src": "epam-promo/components/buttons/IconButton.tsx",
    "comment": {
     "raw": [
      "Represents the properties for the IconButton component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "IconButtonProps",
     "print": [
      "/** Represents the properties for the IconButton component. */",
      "type IconButtonProps = uui.IconButtonCoreProps & IconButtonMods;"
     ]
    },
    "props": [
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:IconButtonProps",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:IconButtonProps",
      "required": false
     },
     {
      "uid": "showDropdownIcon",
      "name": "showDropdownIcon",
      "comment": {
       "raw": [
        "Pass true to enable dropdown icon."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:IconButtonProps",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size."
       ]
      },
      "typeValue": {
       "raw": "'36' | '18' | '24' | '30'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36"
       ]
      },
      "from": "@epam/uui:IconButtonCoreProps",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'gray60'"
       ],
       "tags": {
        "@default": "gray60"
       }
      },
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red' | 'info' | 'success' | 'warning' | 'error' | 'white' | 'gray30' | 'gray60' | 'critical' | 'neutral' | 'accent' | 'primary' | 'secondary' | 'gray50'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "info",
        "success",
        "warning",
        "error",
        "white",
        "gray30",
        "gray60",
        "critical",
        "neutral",
        "accent",
        "primary",
        "secondary",
        "gray50"
       ]
      },
      "from": "@epam/promo:IconButtonMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:LinkButtonProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "LinkButtonProps",
     "nameFull": "LinkButtonProps"
    },
    "src": "epam-promo/components/buttons/LinkButton.tsx",
    "comment": {
     "raw": [
      "Represents the properties for the LinkButton component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "LinkButtonProps",
     "print": [
      "/** Represents the properties for the LinkButton component. */",
      "type LinkButtonProps = uui.LinkButtonCoreProps & LinkButtonMods;"
     ]
    },
    "props": [
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:LinkButtonCoreProps",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:LinkButtonCoreProps",
      "required": false
     },
     {
      "uid": "weight",
      "name": "weight",
      "comment": {
       "raw": [
        "Defines component font-weight",
        " @default 'semibold'"
       ],
       "tags": {
        "@default": "semibold"
       }
      },
      "typeValue": {
       "raw": "'semibold' | 'regular'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "semibold",
        "regular"
       ]
      },
      "from": "@epam/uui:LinkButtonCoreProps",
      "required": false
     },
     {
      "uid": "underline",
      "name": "underline",
      "comment": {
       "raw": [
        "Defines component underline style"
       ]
      },
      "typeValue": {
       "raw": "'solid' | 'dashed'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "dashed"
       ]
      },
      "from": "@epam/uui:LinkButtonCoreProps",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'blue'"
       ],
       "tags": {
        "@default": "blue"
       }
      },
      "typeValue": {
       "raw": "'blue' | 'green' | 'red' | 'white' | 'gray10' | 'gray60' | 'critical' | 'accent' | 'primary' | 'secondary' | 'contrast'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "red",
        "white",
        "gray10",
        "gray60",
        "critical",
        "accent",
        "primary",
        "secondary",
        "contrast"
       ]
      },
      "from": "@epam/promo:LinkButtonMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:ModalWindowProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "ModalWindowProps",
     "nameFull": "ModalWindowProps"
    },
    "src": "epam-promo/components/overlays/ModalWindow.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a ModalWindow component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ModalWindowProps",
     "print": [
      "/** Represents the properties of a ModalWindow component. */",
      "interface ModalWindowProps extends uui.ModalWindowCoreProps, ModalWindowMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "style",
      "name": "style",
      "comment": {
       "raw": [
        "Native style attributes"
       ]
      },
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-core:VPanelProps",
      "required": false
     },
     {
      "uid": "width",
      "name": "width",
      "comment": {
       "raw": [
        "Defines component width"
       ]
      },
      "typeValue": {
       "raw": "number | '300' | '420' | '600' | '900'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "300",
        "420",
        "600",
        "900"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/promo:ModalWindowMods",
      "required": false
     },
     {
      "uid": "height",
      "name": "height",
      "comment": {
       "raw": [
        "Defines component height"
       ]
      },
      "typeValue": {
       "raw": "number | '300' | '700' | 'auto'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "300",
        "700",
        "auto"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/promo:ModalWindowMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:MultiSwitchProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "MultiSwitchProps",
     "nameFull": "MultiSwitchProps<TValue>"
    },
    "src": "epam-promo/components/inputs/MultiSwitch.tsx",
    "comment": {
     "raw": [
      "Represents the properties for the MultiSwitch component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "MultiSwitchProps<TValue>",
     "print": [
      "/** Represents the properties for the MultiSwitch component. */",
      "type MultiSwitchProps<TValue> = uui.MultiSwitchCoreProps<TValue> & MultiSwitchMods;"
     ]
    },
    "props": [
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TValue"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size."
       ]
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:SizeMod",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "items",
      "name": "items",
      "comment": {
       "raw": [
        "Defines an array of MultiSwitchItems."
       ]
      },
      "typeValue": {
       "raw": "MultiSwitchItem<TValue>[]"
      },
      "from": "@epam/uui:MultiSwitchCoreProps",
      "required": true
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'blue'"
       ],
       "tags": {
        "@default": "blue"
       }
      },
      "typeValue": {
       "raw": "'blue' | 'gray' | 'primary' | 'secondary' | 'gray50'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "gray",
        "primary",
        "secondary",
        "gray50"
       ]
      },
      "from": "@epam/promo:MultiSwitchMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:NotificationCardProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "NotificationCardProps",
     "nameFull": "NotificationCardProps"
    },
    "src": "epam-promo/components/overlays/NotificationCard.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a NotificationCard component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "NotificationCardProps",
     "print": [
      "/** Represents the properties of a NotificationCard component. */",
      "interface NotificationCardProps extends uui.NotificationCardCoreProps, NotificationCardMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "actions",
      "name": "actions",
      "comment": {
       "raw": [
        "Array of Notification actions. If provided will be displayed as LinkButtons in the end of notification."
       ]
      },
      "typeValue": {
       "raw": "NotificationAction[]"
      },
      "from": "@epam/uui:NotificationCardCoreProps",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "NotificationCard icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:NotificationCardCoreProps",
      "required": false
     },
     {
      "uid": "onClose",
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the notification with abort action. It's rejects `notificationContext.show()` promise."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": "onSuccess",
      "name": "onSuccess",
      "comment": {
       "raw": [
        "Call to close the notification with success action. It's resolved `notificationContext.show()` promise."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": "clearTimer",
      "name": "clearTimer",
      "comment": {
       "raw": [
        "Cancel notification closing timer"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": "refreshTimer",
      "name": "refreshTimer",
      "comment": {
       "raw": [
        "Reinitialize notification closing timer. It will be set to the provided notification duration."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "Unique id of the notification"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:INotification",
      "required": true
     },
     {
      "uid": "key",
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the notification"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:INotification",
      "required": true
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color."
       ]
      },
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red' | 'info' | 'success' | 'warning' | 'error'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "info",
        "success",
        "warning",
        "error"
       ]
      },
      "from": "@epam/promo:NotificationCardMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:PanelMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "PanelMods",
     "nameFull": "PanelMods"
    },
    "src": "epam-promo/components/layout/FlexItems/Panel.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PanelMods",
     "print": [
      "interface PanelMods {",
      "    shadow?: boolean;",
      "    margin?: '24';",
      "    background?: 'white' | 'gray90' | uui.PanelProps['background'];",
      "}"
     ]
    },
    "props": [
     {
      "uid": "shadow",
      "name": "shadow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "margin",
      "name": "margin",
      "typeValue": {
       "raw": "'24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24"
       ]
      },
      "required": false
     },
     {
      "uid": "background",
      "name": "background",
      "typeValue": {
       "raw": "'white' | 'surface-main' | 'gray90'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "surface-main",
        "gray90"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:PanelProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "PanelProps",
     "nameFull": "PanelProps"
    },
    "src": "epam-promo/components/layout/FlexItems/Panel.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PanelProps",
     "print": [
      "interface PanelProps extends VPanelProps, PanelMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "style",
      "name": "style",
      "comment": {
       "raw": [
        "Native style attributes"
       ]
      },
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-core:VPanelProps",
      "required": false
     },
     {
      "uid": "shadow",
      "name": "shadow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/promo:PanelMods",
      "required": false
     },
     {
      "uid": "margin",
      "name": "margin",
      "typeValue": {
       "raw": "'24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24"
       ]
      },
      "from": "@epam/promo:PanelMods",
      "required": false
     },
     {
      "uid": "background",
      "name": "background",
      "typeValue": {
       "raw": "'white' | 'surface-main' | 'gray90'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "surface-main",
        "gray90"
       ]
      },
      "from": "@epam/promo:PanelMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:RatingProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "RatingProps",
     "nameFull": "RatingProps"
    },
    "src": "epam-promo/components/inputs/Rating.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a Rating component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "RatingProps",
     "print": [
      "/** Represents the properties of a Rating component. */",
      "interface RatingProps extends uuiComponents.RatingProps, RatingMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "filledStarIcon",
      "name": "filledStarIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:RatingProps",
      "required": false
     },
     {
      "uid": "emptyStarIcon",
      "name": "emptyStarIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:RatingProps",
      "required": false
     },
     {
      "uid": "hideTooltip",
      "name": "hideTooltip",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:RatingProps",
      "required": false
     },
     {
      "uid": "hint",
      "name": "hint",
      "typeValue": {
       "raw": "(value: number) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:RatingProps",
      "required": false
     },
     {
      "uid": "Tooltip",
      "name": "Tooltip",
      "typeValue": {
       "raw": "React.ComponentClass<TooltipProps, any> | React.FunctionComponent<TooltipProps>"
      },
      "from": "@epam/uui-components:RatingProps",
      "required": false
     },
     {
      "uid": "from",
      "name": "from",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:BaseRatingProps",
      "required": false
     },
     {
      "uid": "to",
      "name": "to",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:BaseRatingProps",
      "required": false
     },
     {
      "uid": "step",
      "name": "step",
      "comment": {
       "raw": [
        "@default 1"
       ],
       "tags": {
        "@default": 1
       }
      },
      "typeValue": {
       "raw": "0.5 | 1"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        0.5,
        1
       ]
      },
      "from": "@epam/uui-components:BaseRatingProps",
      "required": false
     },
     {
      "uid": "renderRating",
      "name": "renderRating",
      "typeValue": {
       "raw": "(rating: number, markWidth: number, numberOfMarks: number) => React.ReactNode"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:BaseRatingProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '18'"
       ],
       "tags": {
        "@default": "18"
       }
      },
      "typeValue": {
       "raw": "18 | 24 | 30"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        18,
        24,
        30
       ]
      },
      "from": "@epam/promo:RatingMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:StatusIndicatorProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "StatusIndicatorProps",
     "nameFull": "StatusIndicatorProps"
    },
    "src": "epam-promo/components/widgets/StatusIndicator.tsx",
    "comment": {
     "raw": [
      "Represents the props for the StatusIndicator component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "StatusIndicatorProps",
     "print": [
      "/** Represents the props for the StatusIndicator component. */",
      "type StatusIndicatorProps = uui.StatusIndicatorCoreProps & StatusIndicatorMods;"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Component size. If omitted, 24 size will be used.",
        " @default '24'"
       ],
       "tags": {
        "@default": "24"
       }
      },
      "typeValue": {
       "raw": "'18' | '24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:StatusIndicatorCoreProps",
      "required": false
     },
     {
      "uid": "fill",
      "name": "fill",
      "comment": {
       "raw": [
        "Fill mode, solid is used by default",
        " @default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline"
       ]
      },
      "from": "@epam/uui:StatusIndicatorCoreProps",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Component caption."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui:StatusIndicatorCoreProps",
      "required": true
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'gray'"
       ],
       "tags": {
        "@default": "gray"
       }
      },
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red' | 'info' | 'success' | 'warning' | 'yellow' | 'orange' | 'fuchsia' | 'purple' | 'violet' | 'cobalt' | 'cyan' | 'mint' | 'white' | 'critical' | 'neutral' | 'gray'"
      },
      "typeValueRef": "@epam/promo:StatusIndicatorColor",
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "info",
        "success",
        "warning",
        "yellow",
        "orange",
        "fuchsia",
        "purple",
        "violet",
        "cobalt",
        "cyan",
        "mint",
        "white",
        "critical",
        "neutral",
        "gray"
       ]
      },
      "from": "@epam/promo:StatusIndicatorMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:TagProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "TagProps",
     "nameFull": "TagProps"
    },
    "src": "epam-promo/components/widgets/Tag.tsx",
    "comment": {
     "raw": [
      "Represents the properties for the Tag component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "TagProps",
     "print": [
      "/** Represents the properties for the Tag component. */",
      "type TagProps = uui.TagCoreProps & TagMods;"
     ]
    },
    "props": [
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "fill",
      "name": "fill",
      "comment": {
       "raw": [
        "Defines component fill style.",
        " @default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline"
       ]
      },
      "from": "@epam/uui:TagCoreProps",
      "required": false
     },
     {
      "uid": "onClear",
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui:TagCoreProps",
      "required": false
     },
     {
      "uid": "clearIcon",
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:TagCoreProps",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:TagCoreProps",
      "required": false
     },
     {
      "uid": "count",
      "name": "count",
      "comment": {
       "raw": [
        "Count value to be placed in component"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui:TagCoreProps",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'gray30'"
       ],
       "tags": {
        "@default": "gray30"
       }
      },
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red' | 'info' | 'success' | 'warning' | 'white' | 'gray10' | 'gray30' | 'critical' | 'neutral' | 'gray70'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "info",
        "success",
        "warning",
        "white",
        "gray10",
        "gray30",
        "critical",
        "neutral",
        "gray70"
       ]
      },
      "from": "@epam/promo:TagMods",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/promo:TagMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:TextProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "TextProps",
     "nameFull": "TextProps"
    },
    "src": "epam-promo/components/typography/Text.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a Text component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TextProps",
     "print": [
      "/** Represents the properties of a Text component. */",
      "interface TextProps extends uui.TextCoreProps, TextMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "fontWeight",
      "name": "fontWeight",
      "comment": {
       "raw": [
        "Defines text font weight value",
        " @default '400'"
       ],
       "tags": {
        "@default": "400"
       }
      },
      "typeValue": {
       "raw": "'300' | '600' | '900' | '700' | '200' | '400'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "200",
        "300",
        "400",
        "600",
        "700",
        "900"
       ]
      },
      "from": "@epam/uui:TextCoreProps",
      "required": false
     },
     {
      "uid": "fontStyle",
      "name": "fontStyle",
      "comment": {
       "raw": [
        "Determines the style of the text font.",
        " @default 'normal'"
       ],
       "tags": {
        "@default": "normal"
       }
      },
      "typeValue": {
       "raw": "'normal' | 'italic'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "normal",
        "italic"
       ]
      },
      "from": "@epam/uui:TextCoreProps",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines text size",
        " @default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:TextCoreProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": "lineHeight",
      "name": "lineHeight",
      "comment": {
       "raw": [
        "Defines text line-height"
       ]
      },
      "typeValue": {
       "raw": "'18' | '24' | '30' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "30"
       ]
      },
      "from": "@epam/uui:TextSettings",
      "required": false
     },
     {
      "uid": "fontSize",
      "name": "fontSize",
      "comment": {
       "raw": [
        "Defines text font-size"
       ]
      },
      "typeValue": {
       "raw": "'18' | '24' | '12' | '10' | '14' | '16'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "10",
        "12",
        "14",
        "16",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:TextSettings",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'gray80'"
       ],
       "tags": {
        "@default": "gray80"
       }
      },
      "typeValue": {
       "raw": "'blue' | 'green' | 'amber' | 'red' | 'info' | 'success' | 'warning' | 'white' | 'gray60' | 'critical' | 'primary' | 'secondary' | 'gray5' | 'gray50' | 'gray90' | 'gray80' | 'tertiary' | 'disabled'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "blue",
        "green",
        "amber",
        "red",
        "info",
        "success",
        "warning",
        "white",
        "gray60",
        "critical",
        "primary",
        "secondary",
        "gray5",
        "gray50",
        "gray90",
        "gray80",
        "tertiary",
        "disabled"
       ]
      },
      "from": "@epam/promo:TextMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:TooltipProps": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "TooltipProps",
     "nameFull": "TooltipProps"
    },
    "src": "epam-promo/components/overlays/Tooltip.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a Tooltip component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TooltipProps",
     "print": [
      "/** Represents the properties of a Tooltip component. */",
      "interface TooltipProps extends uui.TooltipCoreProps, TooltipMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "content",
      "name": "content",
      "comment": {
       "raw": [
        "Content to show in the tooltip (ReactNode)"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "renderContent",
      "name": "renderContent",
      "comment": {
       "raw": [
        "Alternative to 'content' prop, you can pass a render function.",
        " The function will only be called when content is shown, this can save performance."
       ]
      },
      "typeValue": {
       "raw": "() => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "offset",
      "name": "offset",
      "comment": {
       "raw": [
        "See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/offset/}"
       ]
      },
      "typeValue": {
       "raw": "OffsetsFunction | [number | null | undefined, number | null | undefined]"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "React Node(s) to show tooltip for"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "maxWidth",
      "name": "maxWidth",
      "comment": {
       "raw": [
        "Max width of tooltip"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "onClose",
      "name": "onClose",
      "comment": {
       "raw": [
        "Called when dropdown was closed"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "placement",
      "name": "placement",
      "comment": {
       "raw": [
        "Defines dropdown body placement relative to target"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'top' | 'bottom' | 'auto' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "top",
        "bottom",
        "auto",
        "auto-start",
        "auto-end",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "modifiers",
      "name": "modifiers",
      "comment": {
       "raw": [
        "Original popper.js modifiers. See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/}"
       ]
      },
      "typeValue": {
       "raw": "(StrictModifier<any> | Partial<Modifier<any, object>>)[]"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "openDelay",
      "name": "openDelay",
      "comment": {
       "raw": [
        "Defines how much 'ms' user should hold mouse over target to open the dropdown",
        " This prop work only with openOnHover={true}",
        " @default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "closeDelay",
      "name": "closeDelay",
      "comment": {
       "raw": [
        "Defines after which delay dropdown will be closed, if user leave mouse from target.",
        " This prop work only with openOnHover={true}",
        " @default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "closeOnMouseLeave",
      "name": "closeOnMouseLeave",
      "comment": {
       "raw": [
        "Defined when to close dropdown in case of openOnHover={ true }",
        " toggler — dropdown will be closed when a mouse leaves the target component",
        " boundary — will not to close the dropdown when a mouse is on target or in 30px around target area",
        " false — will not close dropdown by mouse move event",
        " @default 'toggler'"
       ],
       "tags": {
        "@default": "toggler"
       }
      },
      "typeValue": {
       "raw": "false | 'toggler' | 'boundary'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        "toggler",
        "boundary"
       ]
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "portalTarget",
      "name": "portalTarget",
      "comment": {
       "raw": [
        "Node of portal target, where to render the dropdown body.",
        " By default, will be used global portal node."
       ]
      },
      "typeValue": {
       "raw": "HTMLElement"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "boundaryElement",
      "name": "boundaryElement",
      "comment": {
       "raw": [
        "Element relative to which dropdown will calculate position"
       ]
      },
      "typeValue": {
       "raw": "HTMLElement | HTMLElement[] | 'clippingParents'"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "closeBodyOnTogglerHidden",
      "name": "closeBodyOnTogglerHidden",
      "comment": {
       "raw": [
        "Pass false, if you do not want to close the dropdown in case Toggler move out of viewport.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'gray'"
       ],
       "tags": {
        "@default": "gray"
       }
      },
      "typeValue": {
       "raw": "'red' | 'white' | 'critical' | 'neutral' | 'gray' | 'inverted'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "red",
        "white",
        "critical",
        "neutral",
        "gray",
        "inverted"
       ]
      },
      "from": "@epam/promo:TooltipMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/promo:AlertMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "AlertMods",
     "nameFull": "AlertMods"
    },
    "src": "epam-promo/components/overlays/Alert.tsx",
    "exported": false
   }
  },
  "@epam/promo:BadgeColor": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "BadgeColor",
     "nameFull": "BadgeColor"
    },
    "src": "epam-promo/components/widgets/Badge.tsx",
    "exported": false
   }
  },
  "@epam/promo:BadgeMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "BadgeMods",
     "nameFull": "BadgeMods"
    },
    "src": "epam-promo/components/widgets/Badge.tsx",
    "exported": false
   }
  },
  "@epam/promo:ButtonColor": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "ButtonColor",
     "nameFull": "ButtonColor"
    },
    "src": "epam-promo/components/buttons/Button.tsx",
    "comment": {
     "raw": [
      "Defines component color."
     ]
    },
    "exported": false
   }
  },
  "@epam/promo:ButtonMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "ButtonMods",
     "nameFull": "ButtonMods"
    },
    "src": "epam-promo/components/buttons/Button.tsx",
    "exported": false
   }
  },
  "@epam/promo:CountIndicatorMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "CountIndicatorMods",
     "nameFull": "CountIndicatorMods"
    },
    "src": "epam-promo/components/widgets/CountIndicator.tsx",
    "exported": false
   }
  },
  "@epam/promo:FlexRowMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "FlexRowMods",
     "nameFull": "FlexRowMods"
    },
    "src": "epam-promo/components/layout/FlexItems/FlexRow.tsx",
    "exported": false
   }
  },
  "@epam/promo:IconButtonMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "IconButtonMods",
     "nameFull": "IconButtonMods"
    },
    "src": "epam-promo/components/buttons/IconButton.tsx",
    "exported": false
   }
  },
  "@epam/promo:LinkButtonMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "LinkButtonMods",
     "nameFull": "LinkButtonMods"
    },
    "src": "epam-promo/components/buttons/LinkButton.tsx",
    "exported": false
   }
  },
  "@epam/promo:ModalWindowMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "ModalWindowMods",
     "nameFull": "ModalWindowMods"
    },
    "src": "epam-promo/components/overlays/ModalWindow.tsx",
    "exported": false
   }
  },
  "@epam/promo:MultiSwitchMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "MultiSwitchMods",
     "nameFull": "MultiSwitchMods"
    },
    "src": "epam-promo/components/inputs/MultiSwitch.tsx",
    "exported": false
   }
  },
  "@epam/promo:NotificationCardMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "NotificationCardMods",
     "nameFull": "NotificationCardMods"
    },
    "src": "epam-promo/components/overlays/NotificationCard.tsx",
    "exported": false
   }
  },
  "@epam/promo:RatingMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "RatingMods",
     "nameFull": "RatingMods"
    },
    "src": "epam-promo/components/inputs/Rating.tsx",
    "exported": false
   }
  },
  "@epam/promo:StatusIndicatorColor": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "StatusIndicatorColor",
     "nameFull": "StatusIndicatorColor"
    },
    "src": "epam-promo/components/widgets/StatusIndicator.tsx",
    "exported": false
   }
  },
  "@epam/promo:StatusIndicatorMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "StatusIndicatorMods",
     "nameFull": "StatusIndicatorMods"
    },
    "src": "epam-promo/components/widgets/StatusIndicator.tsx",
    "exported": false
   }
  },
  "@epam/promo:TagMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "TagMods",
     "nameFull": "TagMods"
    },
    "src": "epam-promo/components/widgets/Tag.tsx",
    "exported": false
   }
  },
  "@epam/promo:TextMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "TextMods",
     "nameFull": "TextMods"
    },
    "src": "epam-promo/components/typography/Text.tsx",
    "exported": false
   }
  },
  "@epam/promo:TooltipMods": {
   "summary": {
    "module": "@epam/promo",
    "typeName": {
     "name": "TooltipMods",
     "nameFull": "TooltipMods"
    },
    "src": "epam-promo/components/overlays/Tooltip.tsx",
    "exported": false
   }
  },
  "@epam/electric:BadgeProps": {
   "summary": {
    "module": "@epam/electric",
    "typeName": {
     "name": "BadgeProps",
     "nameFull": "BadgeProps"
    },
    "src": "epam-electric/components/widgets/Badge.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a Badge component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "BadgeProps",
     "print": [
      "/** Represents the properties of a Badge component. */",
      "type BadgeProps = uui.BadgeCoreProps & BadgeMods;"
     ]
    },
    "props": [
     {
      "uid": "indicator",
      "name": "indicator",
      "comment": {
       "raw": [
        "Pass true to display an indicator. It shows only if fill = 'outline'."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:BadgeCoreProps",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)",
        " @default 'left'"
       ],
       "tags": {
        "@default": "left"
       }
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui:BadgeCoreProps",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:BadgeCoreProps",
      "required": false
     },
     {
      "uid": "count",
      "name": "count",
      "comment": {
       "raw": [
        "Count value to be placed in component"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui:BadgeCoreProps",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'info'"
       ],
       "tags": {
        "@default": "info"
       }
      },
      "typeValue": {
       "raw": "'info' | 'success' | 'warning' | 'critical' | 'neutral' | 'yellow' | 'orange' | 'purple' | 'cyan' | 'mint' | 'cobalt' | 'violet' | 'fuchsia' | 'white' | 'night100' | 'night600'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "info",
        "success",
        "warning",
        "critical",
        "neutral",
        "yellow",
        "orange",
        "purple",
        "cyan",
        "mint",
        "cobalt",
        "violet",
        "fuchsia",
        "white",
        "night100",
        "night600"
       ]
      },
      "from": "@epam/electric:BadgeMods",
      "required": false
     },
     {
      "uid": "fill",
      "name": "fill",
      "comment": {
       "raw": [
        "Defines component fill style.",
        " @default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline"
       ]
      },
      "from": "@epam/electric:BadgeMods",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'18' | '24' | '30' | '36' | '42' | '48'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/electric:BadgeMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/electric:PromoButtonProps": {
   "summary": {
    "module": "@epam/electric",
    "typeName": {
     "name": "PromoButtonProps",
     "nameFull": "PromoButtonProps"
    },
    "src": "epam-electric/components/buttons/PromoButton.ts",
    "comment": {
     "raw": [
      "Represents the properties of the PromoButton component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PromoButtonProps",
     "print": [
      "/** Represents the properties of the PromoButton component. */",
      "interface PromoButtonProps extends ButtonPropsWithOmit, PromoButtonMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "36",
        "42"
       ]
      },
      "from": "@epam/electric:PromoButtonMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/electric:StatusIndicatorProps": {
   "summary": {
    "module": "@epam/electric",
    "typeName": {
     "name": "StatusIndicatorProps",
     "nameFull": "StatusIndicatorProps"
    },
    "src": "epam-electric/components/widgets/StatusIndicator.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a StatusIndicator component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "StatusIndicatorProps",
     "print": [
      "/** Represents the properties of a StatusIndicator component. */",
      "interface StatusIndicatorProps extends uui.StatusIndicatorCoreProps, StatusIndicatorMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Component size. If omitted, 24 size will be used.",
        " @default '24'"
       ],
       "tags": {
        "@default": "24"
       }
      },
      "typeValue": {
       "raw": "'18' | '24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:StatusIndicatorCoreProps",
      "required": false
     },
     {
      "uid": "fill",
      "name": "fill",
      "comment": {
       "raw": [
        "Fill mode, solid is used by default",
        " @default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline"
       ]
      },
      "from": "@epam/uui:StatusIndicatorCoreProps",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Component caption."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui:StatusIndicatorCoreProps",
      "required": true
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'neutral'"
       ],
       "tags": {
        "@default": "neutral"
       }
      },
      "typeValue": {
       "raw": "'info' | 'success' | 'warning' | 'critical' | 'neutral' | 'yellow' | 'orange' | 'purple' | 'cyan' | 'mint' | 'cobalt' | 'violet' | 'fuchsia' | 'white'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "info",
        "success",
        "warning",
        "critical",
        "neutral",
        "yellow",
        "orange",
        "purple",
        "cyan",
        "mint",
        "cobalt",
        "violet",
        "fuchsia",
        "white"
       ]
      },
      "from": "@epam/electric:StatusIndicatorMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/electric:TagMods": {
   "summary": {
    "module": "@epam/electric",
    "typeName": {
     "name": "TagMods",
     "nameFull": "TagMods"
    },
    "src": "epam-electric/components/widgets/Tag.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "TagMods",
     "print": [
      "type TagMods = {",
      "    /**",
      "     * Defines component color.",
      "     * @default 'neutral'",
      "     */",
      "    color?: uui.TagProps['color'] | 'white' | 'night100' | 'night700';",
      "    /**",
      "     * Defines component size.",
      "     * @default '36'",
      "     */",
      "    size?: '18' | '24' | '30' | '36' | '42' | '48';",
      "};"
     ]
    },
    "props": [
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'neutral'"
       ],
       "tags": {
        "@default": "neutral"
       }
      },
      "typeValue": {
       "raw": "'info' | 'success' | 'warning' | 'critical' | 'neutral' | 'white' | 'night100' | 'night700'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "info",
        "success",
        "warning",
        "critical",
        "neutral",
        "white",
        "night100",
        "night700"
       ]
      },
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'18' | '24' | '30' | '36' | '42' | '48'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/electric:TagProps": {
   "summary": {
    "module": "@epam/electric",
    "typeName": {
     "name": "TagProps",
     "nameFull": "TagProps"
    },
    "src": "epam-electric/components/widgets/Tag.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a Tag component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "TagProps",
     "print": [
      "/** Represents the properties of a Tag component. */",
      "type TagProps = uui.TagCoreProps & TagMods;"
     ]
    },
    "props": [
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "fill",
      "name": "fill",
      "comment": {
       "raw": [
        "Defines component fill style.",
        " @default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline"
       ]
      },
      "from": "@epam/uui:TagCoreProps",
      "required": false
     },
     {
      "uid": "onClear",
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui:TagCoreProps",
      "required": false
     },
     {
      "uid": "clearIcon",
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:TagCoreProps",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:TagCoreProps",
      "required": false
     },
     {
      "uid": "count",
      "name": "count",
      "comment": {
       "raw": [
        "Count value to be placed in component"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui:TagCoreProps",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'neutral'"
       ],
       "tags": {
        "@default": "neutral"
       }
      },
      "typeValue": {
       "raw": "'info' | 'success' | 'warning' | 'critical' | 'neutral' | 'white' | 'night100' | 'night700'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "info",
        "success",
        "warning",
        "critical",
        "neutral",
        "white",
        "night100",
        "night700"
       ]
      },
      "from": "@epam/electric:TagMods",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'18' | '24' | '30' | '36' | '42' | '48'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/electric:TagMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/electric:BadgeMods": {
   "summary": {
    "module": "@epam/electric",
    "typeName": {
     "name": "BadgeMods",
     "nameFull": "BadgeMods"
    },
    "src": "epam-electric/components/widgets/Badge.tsx",
    "exported": false
   }
  },
  "@epam/electric:PromoButtonMods": {
   "summary": {
    "module": "@epam/electric",
    "typeName": {
     "name": "PromoButtonMods",
     "nameFull": "PromoButtonMods"
    },
    "src": "epam-electric/components/buttons/PromoButton.ts",
    "exported": false
   }
  },
  "@epam/electric:StatusIndicatorMods": {
   "summary": {
    "module": "@epam/electric",
    "typeName": {
     "name": "StatusIndicatorMods",
     "nameFull": "StatusIndicatorMods"
    },
    "src": "epam-electric/components/widgets/StatusIndicator.tsx",
    "exported": false
   }
  },
  "@epam/loveship:AlertProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "AlertProps",
     "nameFull": "AlertProps"
    },
    "src": "loveship/components/overlays/Alert.tsx",
    "comment": {
     "raw": [
      "Represents the properties of the Alert component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "AlertProps",
     "print": [
      "/** Represents the properties of the Alert component. */",
      "interface AlertProps extends uui.AlertCoreProps, AlertMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "actions",
      "name": "actions",
      "comment": {
       "raw": [
        "List of actions to display in the alert. Each action has name and 'action' callback"
       ]
      },
      "typeValue": {
       "raw": "AlertNotificationAction[]"
      },
      "from": "@epam/uui:AlertCoreProps",
      "required": false
     },
     {
      "uid": "onClose",
      "name": "onClose",
      "comment": {
       "raw": [
        "When specified, a close icon is rendered. onClose callback will be called on clicking the close icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui:AlertCoreProps",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "An optional icon to show on the left of the alert"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:AlertCoreProps",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Component size. If omitted, 48 size will be used.",
        " @default '48'"
       ],
       "tags": {
        "@default": "48"
       }
      },
      "typeValue": {
       "raw": "'36' | '48'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "36",
        "48"
       ]
      },
      "from": "@epam/uui:AlertCoreProps",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'sky'"
       ],
       "tags": {
        "@default": "sky"
       }
      },
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'info' | 'success' | 'warning' | 'error'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "info",
        "success",
        "warning",
        "error"
       ]
      },
      "from": "@epam/loveship:AlertMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:BadgeProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "BadgeProps",
     "nameFull": "BadgeProps"
    },
    "src": "loveship/components/widgets/Badge.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a Badge component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "BadgeProps",
     "print": [
      "/** Represents the properties of a Badge component. */",
      "type BadgeProps = uui.BadgeCoreProps & BadgeMods;"
     ]
    },
    "props": [
     {
      "uid": "indicator",
      "name": "indicator",
      "comment": {
       "raw": [
        "Pass true to display an indicator. It shows only if fill = 'outline'."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:BadgeCoreProps",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)",
        " @default 'left'"
       ],
       "tags": {
        "@default": "left"
       }
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui:BadgeCoreProps",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:BadgeCoreProps",
      "required": false
     },
     {
      "uid": "count",
      "name": "count",
      "comment": {
       "raw": [
        "Count value to be placed in component"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui:BadgeCoreProps",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'sky'"
       ],
       "tags": {
        "@default": "sky"
       }
      },
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'info' | 'success' | 'warning' | 'cobalt' | 'violet' | 'fuchsia' | 'yellow' | 'orange' | 'purple' | 'cyan' | 'mint' | 'white' | 'night100' | 'night300' | 'night600' | 'critical' | 'neutral'"
      },
      "typeValueRef": "@epam/loveship:BadgeColor",
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "info",
        "success",
        "warning",
        "cobalt",
        "violet",
        "fuchsia",
        "yellow",
        "orange",
        "purple",
        "cyan",
        "mint",
        "white",
        "night100",
        "night300",
        "night600",
        "critical",
        "neutral"
       ]
      },
      "from": "@epam/loveship:BadgeMods",
      "required": false
     },
     {
      "uid": "fill",
      "name": "fill",
      "comment": {
       "raw": [
        "Defines component fill style.",
        " @default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline"
       ]
      },
      "from": "@epam/loveship:BadgeMods",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '18'"
       ],
       "tags": {
        "@default": "18"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/loveship:BadgeMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:ButtonProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "ButtonProps",
     "nameFull": "ButtonProps"
    },
    "src": "loveship/components/buttons/Button.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a Button component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "ButtonProps",
     "print": [
      "/** Represents the properties of a Button component. */",
      "type ButtonProps = uui.ButtonCoreProps & ButtonMods;"
     ]
    },
    "props": [
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "onClear",
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": "clearIcon",
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:ButtonProps",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default \"sky\""
       ],
       "tags": {
        "@default": "sky"
       }
      },
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'white' | 'critical' | 'neutral' | 'gray' | 'accent' | 'primary' | 'secondary'"
      },
      "typeValueRef": "@epam/loveship:ButtonColor",
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "white",
        "critical",
        "neutral",
        "gray",
        "accent",
        "primary",
        "secondary"
       ]
      },
      "from": "@epam/loveship:ButtonMods",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/loveship:ButtonMods",
      "required": false
     },
     {
      "uid": "shape",
      "name": "shape",
      "comment": {
       "raw": [
        "Defines component shape.",
        " @default 'square'"
       ],
       "tags": {
        "@default": "square"
       }
      },
      "typeValue": {
       "raw": "'square' | 'round'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "square",
        "round"
       ]
      },
      "from": "@epam/loveship:ButtonMods",
      "required": false
     },
     {
      "uid": "fill",
      "name": "fill",
      "comment": {
       "raw": [
        "Defines component fill style.",
        " @default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'white' | 'solid' | 'light' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "solid",
        "light",
        "none"
       ]
      },
      "from": "@epam/loveship:ButtonMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:CountIndicatorProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "CountIndicatorProps",
     "nameFull": "CountIndicatorProps"
    },
    "src": "loveship/components/widgets/CountIndicator.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a CountIndicator component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "CountIndicatorProps",
     "print": [
      "/** Represents the properties of a CountIndicator component. */",
      "type CountIndicatorProps = uui.CountIndicatorCoreProps & CountIndicatorMods;"
     ]
    },
    "props": [
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '24'"
       ],
       "tags": {
        "@default": "24"
       }
      },
      "typeValue": {
       "raw": "'18' | '24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:CountIndicatorCoreProps",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color."
       ]
      },
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'info' | 'success' | 'warning' | 'white' | 'critical' | 'neutral' | 'gray'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "info",
        "success",
        "warning",
        "white",
        "critical",
        "neutral",
        "gray"
       ]
      },
      "from": "@epam/loveship:CountIndicatorMods",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:FlexRowProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "FlexRowProps",
     "nameFull": "FlexRowProps"
    },
    "src": "loveship/components/layout/FlexItems/FlexRow.tsx",
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "FlexRowProps",
     "print": [
      "type FlexRowProps = uuiCore.FlexRowProps & RowMods;"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "key",
      "name": "key",
      "typeValue": {
       "raw": "null | string | number"
      },
      "from": "@types/react:Attributes",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "alignItems",
      "name": "alignItems",
      "comment": {
       "raw": [
        "Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)",
        " @default 'center'"
       ],
       "tags": {
        "@default": "center"
       }
      },
      "typeValue": {
       "raw": "'top' | 'center' | 'bottom' | 'stretch'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "top",
        "center",
        "bottom",
        "stretch"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "justifyContent",
      "name": "justifyContent",
      "comment": {
       "raw": [
        "Flexbox justifyContent property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
       ]
      },
      "typeValue": {
       "raw": "'center' | 'space-between' | 'space-around' | 'space-evenly' | 'start' | 'end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "center",
        "space-between",
        "space-around",
        "space-evenly",
        "start",
        "end"
       ]
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "columnGap",
      "name": "columnGap",
      "comment": {
       "raw": [
        "Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '36' | '18' | '24' | '12' | '6'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "36"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "rowGap",
      "name": "rowGap",
      "comment": {
       "raw": [
        "Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)"
       ]
      },
      "typeValue": {
       "raw": "number | '36' | '18' | '24' | '12' | '6'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24",
        "36"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/uui-core:FlexRowProps",
      "required": false
     },
     {
      "uid": "background",
      "name": "background",
      "comment": {
       "raw": [
        "@default 'none'"
       ],
       "tags": {
        "@default": "none"
       }
      },
      "typeValue": {
       "raw": "'white' | 'night100' | 'none' | 'night50'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "night100",
        "none",
        "night50"
       ]
      },
      "from": "@epam/loveship:RowMods",
      "required": false
     },
     {
      "uid": "spacing",
      "name": "spacing",
      "typeValue": {
       "raw": "null | '18' | '12' | '6'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        null
       ]
      },
      "from": "@epam/loveship:RowMods",
      "required": false
     },
     {
      "uid": "type",
      "name": "type",
      "comment": {
       "raw": [
        "@default 'panel'"
       ],
       "tags": {
        "@default": "panel"
       }
      },
      "typeValue": {
       "raw": "'form' | 'panel'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "form",
        "panel"
       ]
      },
      "from": "@epam/loveship:RowMods",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines row size"
       ]
      },
      "typeValue": {
       "raw": "null | '36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        null
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "borderTop",
      "name": "borderTop",
      "comment": {
       "raw": [
        "Pass true, to enable row top border"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "borderBottom",
      "name": "borderBottom",
      "comment": {
       "raw": [
        "Pass true, to enable row bottom border"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "margin",
      "name": "margin",
      "comment": {
       "raw": [
        "Defines row margin"
       ]
      },
      "typeValue": {
       "raw": "'24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "24"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "padding",
      "name": "padding",
      "comment": {
       "raw": [
        "Defines horizontal row padding"
       ]
      },
      "typeValue": {
       "raw": "'18' | '24' | '12' | '6'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "topShadow",
      "name": "topShadow",
      "comment": {
       "raw": [
        "Pass true, to show a top shadow"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "vPadding",
      "name": "vPadding",
      "comment": {
       "raw": [
        "Defines vertical row padding"
       ]
      },
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "36",
        "48"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:IconButtonProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "IconButtonProps",
     "nameFull": "IconButtonProps"
    },
    "src": "loveship/components/buttons/IconButton.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a IconButton component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "IconButtonProps",
     "print": [
      "/** Represents the properties of a IconButton component. */",
      "type IconButtonProps = uui.IconButtonCoreProps & IconButtonMods;"
     ]
    },
    "props": [
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:IconButtonProps",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:IconButtonProps",
      "required": false
     },
     {
      "uid": "showDropdownIcon",
      "name": "showDropdownIcon",
      "comment": {
       "raw": [
        "Pass true to enable dropdown icon."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:IconButtonProps",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size."
       ]
      },
      "typeValue": {
       "raw": "'36' | '18' | '24' | '30'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36"
       ]
      },
      "from": "@epam/uui:IconButtonCoreProps",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'night600'"
       ],
       "tags": {
        "@default": "night600"
       }
      },
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'info' | 'success' | 'warning' | 'error' | 'cobalt' | 'violet' | 'fuchsia' | 'white' | 'night600' | 'critical' | 'neutral' | 'accent' | 'primary' | 'secondary' | 'night500'"
      },
      "typeValueRef": "@epam/loveship:IconButtonColor",
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "info",
        "success",
        "warning",
        "error",
        "cobalt",
        "violet",
        "fuchsia",
        "white",
        "night600",
        "critical",
        "neutral",
        "accent",
        "primary",
        "secondary",
        "night500"
       ]
      },
      "from": "@epam/loveship:IconButtonMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:LinkButtonProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "LinkButtonProps",
     "nameFull": "LinkButtonProps"
    },
    "src": "loveship/components/buttons/LinkButton.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a LinkButton component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "LinkButtonProps",
     "print": [
      "/** Represents the properties of a LinkButton component. */",
      "type LinkButtonProps = uui.LinkButtonCoreProps & LinkButtonMods;"
     ]
    },
    "props": [
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:LinkButtonCoreProps",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:LinkButtonCoreProps",
      "required": false
     },
     {
      "uid": "weight",
      "name": "weight",
      "comment": {
       "raw": [
        "Defines component font-weight",
        " @default 'semibold'"
       ],
       "tags": {
        "@default": "semibold"
       }
      },
      "typeValue": {
       "raw": "'semibold' | 'regular'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "semibold",
        "regular"
       ]
      },
      "from": "@epam/uui:LinkButtonCoreProps",
      "required": false
     },
     {
      "uid": "underline",
      "name": "underline",
      "comment": {
       "raw": [
        "Defines component underline style"
       ]
      },
      "typeValue": {
       "raw": "'solid' | 'dashed'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "dashed"
       ]
      },
      "from": "@epam/uui:LinkButtonCoreProps",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'sky'"
       ],
       "tags": {
        "@default": "sky"
       }
      },
      "typeValue": {
       "raw": "'sky' | 'grass' | 'fire' | 'white' | 'night100' | 'night600' | 'critical' | 'accent' | 'primary' | 'secondary' | 'contrast'"
      },
      "typeValueRef": "@epam/loveship:LinkButtonColor",
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "fire",
        "white",
        "night100",
        "night600",
        "critical",
        "accent",
        "primary",
        "secondary",
        "contrast"
       ]
      },
      "from": "@epam/loveship:LinkButtonMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:ModalWindowProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "ModalWindowProps",
     "nameFull": "ModalWindowProps"
    },
    "src": "loveship/components/overlays/ModalWindow.tsx",
    "comment": {
     "raw": [
      "Represents the properties of the ModalWindow component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "ModalWindowProps",
     "print": [
      "/** Represents the properties of the ModalWindow component. */",
      "interface ModalWindowProps extends uui.ModalWindowCoreProps, ModalWindowMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "style",
      "name": "style",
      "comment": {
       "raw": [
        "Native style attributes"
       ]
      },
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-core:VPanelProps",
      "required": false
     },
     {
      "uid": "width",
      "name": "width",
      "comment": {
       "raw": [
        "Defines component width."
       ]
      },
      "typeValue": {
       "raw": "number | '300' | '420' | '480' | '600' | '900'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "300",
        "420",
        "480",
        "600",
        "900"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/loveship:ModalWindowMods",
      "required": false
     },
     {
      "uid": "height",
      "name": "height",
      "comment": {
       "raw": [
        "Defines component height."
       ]
      },
      "typeValue": {
       "raw": "number | '300' | '700' | 'auto'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "300",
        "700",
        "auto"
       ],
       "scalarTypeOption": "number"
      },
      "from": "@epam/loveship:ModalWindowMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:MultiSwitchProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "MultiSwitchProps",
     "nameFull": "MultiSwitchProps<TValue>"
    },
    "src": "loveship/components/inputs/MultiSwitch.tsx",
    "comment": {
     "raw": [
      "Represents the properties for the MultiSwitch component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "MultiSwitchProps<TValue>",
     "print": [
      "/** Represents the properties for the MultiSwitch component. */",
      "type MultiSwitchProps<TValue> = uui.MultiSwitchCoreProps<TValue> & MultiSwitchMods;"
     ]
    },
    "props": [
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TValue"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size."
       ]
      },
      "typeValue": {
       "raw": "'36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/uui:SizeMod",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "items",
      "name": "items",
      "comment": {
       "raw": [
        "Defines an array of MultiSwitchItems."
       ]
      },
      "typeValue": {
       "raw": "MultiSwitchItem<TValue>[]"
      },
      "from": "@epam/uui:MultiSwitchCoreProps",
      "required": true
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'sky'"
       ],
       "tags": {
        "@default": "sky"
       }
      },
      "typeValue": {
       "raw": "'sky' | 'gray' | 'primary' | 'secondary'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "gray",
        "primary",
        "secondary"
       ]
      },
      "from": "@epam/loveship:MultiSwitchMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:NotificationCardProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "NotificationCardProps",
     "nameFull": "NotificationCardProps"
    },
    "src": "loveship/components/overlays/NotificationCard.tsx",
    "comment": {
     "raw": [
      "Represents the properties of the NotificationCard component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "NotificationCardProps",
     "print": [
      "/** Represents the properties of the NotificationCard component. */",
      "interface NotificationCardProps extends uui.NotificationCardCoreProps, NotificationCardMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "actions",
      "name": "actions",
      "comment": {
       "raw": [
        "Array of Notification actions. If provided will be displayed as LinkButtons in the end of notification."
       ]
      },
      "typeValue": {
       "raw": "NotificationAction[]"
      },
      "from": "@epam/uui:NotificationCardCoreProps",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "NotificationCard icon"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:NotificationCardCoreProps",
      "required": false
     },
     {
      "uid": "onClose",
      "name": "onClose",
      "comment": {
       "raw": [
        "Call to close the notification with abort action. It's rejects `notificationContext.show()` promise."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": "onSuccess",
      "name": "onSuccess",
      "comment": {
       "raw": [
        "Call to close the notification with success action. It's resolved `notificationContext.show()` promise."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": "clearTimer",
      "name": "clearTimer",
      "comment": {
       "raw": [
        "Cancel notification closing timer"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": "refreshTimer",
      "name": "refreshTimer",
      "comment": {
       "raw": [
        "Reinitialize notification closing timer. It will be set to the provided notification duration."
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:INotification",
      "required": false
     },
     {
      "uid": "id",
      "name": "id",
      "comment": {
       "raw": [
        "Unique id of the notification"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:INotification",
      "required": true
     },
     {
      "uid": "key",
      "name": "key",
      "comment": {
       "raw": [
        "Unique key of the notification"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:INotification",
      "required": true
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color."
       ]
      },
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'info' | 'success' | 'warning' | 'error'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "info",
        "success",
        "warning",
        "error"
       ]
      },
      "from": "@epam/loveship:NotificationCardMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:PanelMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "PanelMods",
     "nameFull": "PanelMods"
    },
    "src": "loveship/components/layout/FlexItems/Panel.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PanelMods",
     "print": [
      "interface PanelMods {",
      "    shadow?: boolean;",
      "    margin?: '24';",
      "    background?: 'white' | 'night50';",
      "}"
     ]
    },
    "props": [
     {
      "uid": "shadow",
      "name": "shadow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "margin",
      "name": "margin",
      "typeValue": {
       "raw": "'24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24"
       ]
      },
      "required": false
     },
     {
      "uid": "background",
      "name": "background",
      "typeValue": {
       "raw": "'white' | 'night50'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "night50"
       ]
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:PanelProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "PanelProps",
     "nameFull": "PanelProps"
    },
    "src": "loveship/components/layout/FlexItems/Panel.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PanelProps",
     "print": [
      "interface PanelProps extends VPanelProps, PanelMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "style",
      "name": "style",
      "comment": {
       "raw": [
        "Native style attributes"
       ]
      },
      "typeValue": {
       "raw": "React.CSSProperties"
      },
      "from": "@epam/uui-core:VPanelProps",
      "required": false
     },
     {
      "uid": "shadow",
      "name": "shadow",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/loveship:PanelMods",
      "required": false
     },
     {
      "uid": "margin",
      "name": "margin",
      "typeValue": {
       "raw": "'24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24"
       ]
      },
      "from": "@epam/loveship:PanelMods",
      "required": false
     },
     {
      "uid": "background",
      "name": "background",
      "typeValue": {
       "raw": "'white' | 'night50'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "night50"
       ]
      },
      "from": "@epam/loveship:PanelMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:RangeSliderProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "RangeSliderProps",
     "nameFull": "RangeSliderProps"
    },
    "src": "loveship/components/inputs/Slider/RangeSlider.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a RangeSlider component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "RangeSliderProps",
     "print": [
      "/** Represents the properties of a RangeSlider component. */",
      "interface RangeSliderProps extends uuiRangeSliderProps {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "min",
      "name": "min",
      "comment": {
       "raw": [
        "Min value (when slider is at leftmost position)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": true
     },
     {
      "uid": "max",
      "name": "max",
      "comment": {
       "raw": [
        "Max value (when slider is at rightmost position)"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": true
     },
     {
      "uid": "step",
      "name": "step",
      "comment": {
       "raw": [
        "Value change step"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": true
     },
     {
      "uid": "splitAt",
      "name": "splitAt",
      "comment": {
       "raw": [
        "Slider renders a label at each splitAt position"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": false
     },
     {
      "uid": "renderLabel",
      "name": "renderLabel",
      "comment": {
       "raw": [
        "Overrides rendering of values labels"
       ]
      },
      "typeValue": {
       "raw": "(value: number) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": false
     },
     {
      "uid": "showTooltip",
      "name": "showTooltip",
      "comment": {
       "raw": [
        "Toggles rendering of tooltip with current value"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:SliderBaseProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "RangeSliderValue"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: RangeSliderValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:RatingProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "RatingProps",
     "nameFull": "RatingProps"
    },
    "src": "loveship/components/inputs/Rating.tsx",
    "comment": {
     "raw": [
      "Represents the properties for the MultiSwitch component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "RatingProps",
     "print": [
      "/** Represents the properties for the MultiSwitch component. */",
      "interface RatingProps extends uuiComponents.RatingProps, RatingMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "filledStarIcon",
      "name": "filledStarIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:RatingProps",
      "required": false
     },
     {
      "uid": "emptyStarIcon",
      "name": "emptyStarIcon",
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-components:RatingProps",
      "required": false
     },
     {
      "uid": "hideTooltip",
      "name": "hideTooltip",
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-components:RatingProps",
      "required": false
     },
     {
      "uid": "hint",
      "name": "hint",
      "typeValue": {
       "raw": "(value: number) => string"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:RatingProps",
      "required": false
     },
     {
      "uid": "Tooltip",
      "name": "Tooltip",
      "typeValue": {
       "raw": "React.ComponentClass<TooltipProps, any> | React.FunctionComponent<TooltipProps>"
      },
      "from": "@epam/uui-components:RatingProps",
      "required": false
     },
     {
      "uid": "from",
      "name": "from",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:BaseRatingProps",
      "required": false
     },
     {
      "uid": "to",
      "name": "to",
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-components:BaseRatingProps",
      "required": false
     },
     {
      "uid": "step",
      "name": "step",
      "comment": {
       "raw": [
        "@default 1"
       ],
       "tags": {
        "@default": 1
       }
      },
      "typeValue": {
       "raw": "0.5 | 1"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        0.5,
        1
       ]
      },
      "from": "@epam/uui-components:BaseRatingProps",
      "required": false
     },
     {
      "uid": "renderRating",
      "name": "renderRating",
      "typeValue": {
       "raw": "(rating: number, markWidth: number, numberOfMarks: number) => React.ReactNode"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-components:BaseRatingProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: number) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '18'"
       ],
       "tags": {
        "@default": "18"
       }
      },
      "typeValue": {
       "raw": "18 | 24 | 30"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        18,
        24,
        30
       ]
      },
      "from": "@epam/loveship:RatingMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:RowMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "RowMods",
     "nameFull": "RowMods"
    },
    "src": "loveship/components/layout/FlexItems/FlexRow.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "RowMods",
     "print": [
      "interface RowMods extends Omit<uui.RowMods, 'spacing' | 'background'> {",
      "    /**",
      "     * @default 'none'",
      "     */",
      "    background?: 'white' | 'night50' | 'night100' | 'none';",
      "    spacing?: '6' | '12' | '18' | null;",
      "    /**",
      "     * @default 'panel'",
      "     */",
      "    type?: 'form' | 'panel';",
      "}"
     ]
    },
    "props": [
     {
      "uid": "background",
      "name": "background",
      "comment": {
       "raw": [
        "@default 'none'"
       ],
       "tags": {
        "@default": "none"
       }
      },
      "typeValue": {
       "raw": "'white' | 'night100' | 'none' | 'night50'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "white",
        "night100",
        "none",
        "night50"
       ]
      },
      "required": false
     },
     {
      "uid": "spacing",
      "name": "spacing",
      "typeValue": {
       "raw": "null | '18' | '12' | '6'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        null
       ]
      },
      "required": false
     },
     {
      "uid": "type",
      "name": "type",
      "comment": {
       "raw": [
        "@default 'panel'"
       ],
       "tags": {
        "@default": "panel"
       }
      },
      "typeValue": {
       "raw": "'form' | 'panel'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "form",
        "panel"
       ]
      },
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines row size"
       ]
      },
      "typeValue": {
       "raw": "null | '36' | '48' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "24",
        "30",
        "36",
        "42",
        "48",
        null
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "borderTop",
      "name": "borderTop",
      "comment": {
       "raw": [
        "Pass true, to enable row top border"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "borderBottom",
      "name": "borderBottom",
      "comment": {
       "raw": [
        "Pass true, to enable row bottom border"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "margin",
      "name": "margin",
      "comment": {
       "raw": [
        "Defines row margin"
       ]
      },
      "typeValue": {
       "raw": "'24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "24"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "padding",
      "name": "padding",
      "comment": {
       "raw": [
        "Defines horizontal row padding"
       ]
      },
      "typeValue": {
       "raw": "'18' | '24' | '12' | '6'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "6",
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "topShadow",
      "name": "topShadow",
      "comment": {
       "raw": [
        "Pass true, to show a top shadow"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui:RowMods",
      "required": false
     },
     {
      "uid": "vPadding",
      "name": "vPadding",
      "comment": {
       "raw": [
        "Defines vertical row padding"
       ]
      },
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "36",
        "48"
       ]
      },
      "from": "@epam/uui:RowMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:SliderRatingProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "SliderRatingProps",
     "nameFull": "SliderRatingProps<TValue>"
    },
    "src": "loveship/components/inputs/SliderRating.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "SliderRatingProps<TValue>",
     "print": [
      "interface SliderRatingProps<TValue> extends IEditable<TValue>, IHasRawProps<React.HTMLAttributes<HTMLDivElement>> {",
      "    /**",
      "     * Enables to pass your custom Tooltip component instead of default.",
      "     */",
      "    renderTooltip?: (value: TValue) => React.ReactNode;",
      "    /**",
      "     * Defines start point of component.",
      "     * @default '1'",
      "     */",
      "    from?: 1 | 2;",
      "    /**",
      "     * Defines is NotAvailable showing.",
      "     * @default false",
      "     */",
      "    withoutNa?: boolean;",
      "    /**",
      "     * Defines component size.",
      "     * @default '18'",
      "     */",
      "    size?: '18' | '24';",
      "    /**",
      "     * Enables to pass your ScaleIcon component instead of default.",
      "     */",
      "    getScaleIcon?: (value: number) => Icon;",
      "    /**",
      "     * Icon click handler.",
      "     */",
      "    getHandlerIcon?: (value: number) => Icon;",
      "    /*",
      "    * Defines Tooltip color.",
      "    */",
      "    tooltipColor?: 'white' | 'fire' | 'gray';",
      "}"
     ]
    },
    "props": [
     {
      "uid": "renderTooltip",
      "name": "renderTooltip",
      "comment": {
       "raw": [
        "Enables to pass your custom Tooltip component instead of default."
       ]
      },
      "typeValue": {
       "raw": "(value: TValue) => React.ReactNode"
      },
      "editor": {
       "type": "component"
      },
      "required": false
     },
     {
      "uid": "from",
      "name": "from",
      "comment": {
       "raw": [
        "Defines start point of component.",
        " @default '1'"
       ],
       "tags": {
        "@default": "1"
       }
      },
      "typeValue": {
       "raw": "1 | 2"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        1,
        2
       ]
      },
      "required": false
     },
     {
      "uid": "withoutNa",
      "name": "withoutNa",
      "comment": {
       "raw": [
        "Defines is NotAvailable showing.",
        " @default false"
       ],
       "tags": {
        "@default": false
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '18'"
       ],
       "tags": {
        "@default": "18"
       }
      },
      "typeValue": {
       "raw": "'18' | '24'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24"
       ]
      },
      "required": false
     },
     {
      "uid": "getScaleIcon",
      "name": "getScaleIcon",
      "comment": {
       "raw": [
        "Enables to pass your ScaleIcon component instead of default."
       ]
      },
      "typeValue": {
       "raw": "(value: number) => Icon"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "getHandlerIcon",
      "name": "getHandlerIcon",
      "comment": {
       "raw": [
        "Icon click handler."
       ]
      },
      "typeValue": {
       "raw": "(value: number) => Icon"
      },
      "editor": {
       "type": "func"
      },
      "required": false
     },
     {
      "uid": "tooltipColor",
      "name": "tooltipColor",
      "typeValue": {
       "raw": "'fire' | 'white' | 'gray'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "fire",
        "white",
        "gray"
       ]
      },
      "required": false
     },
     {
      "uid": "isInvalid",
      "name": "isInvalid",
      "comment": {
       "raw": [
        "True if component contains invalid input"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeInvalid",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "isReadonly",
      "name": "isReadonly",
      "comment": {
       "raw": [
        "Disable editing. Unlike isDisabled, keep component's value readable."
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeReadonly",
      "required": false
     },
     {
      "uid": "isRequired",
      "name": "isRequired",
      "comment": {
       "raw": [
        "Marks that component's value is required and shouldn't be empty"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanBeRequired",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "TValue"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: TValue) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": true
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:StatusIndicatorProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "StatusIndicatorProps",
     "nameFull": "StatusIndicatorProps"
    },
    "src": "loveship/components/widgets/StatusIndicator.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a StatusIndicator component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "StatusIndicatorProps",
     "print": [
      "/** Represents the properties of a StatusIndicator component. */",
      "type StatusIndicatorProps = uui.StatusIndicatorCoreProps & StatusIndicatorMods;"
     ]
    },
    "props": [
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Component size. If omitted, 24 size will be used.",
        " @default '24'"
       ],
       "tags": {
        "@default": "24"
       }
      },
      "typeValue": {
       "raw": "'18' | '24' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:StatusIndicatorCoreProps",
      "required": false
     },
     {
      "uid": "fill",
      "name": "fill",
      "comment": {
       "raw": [
        "Fill mode, solid is used by default",
        " @default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline"
       ]
      },
      "from": "@epam/uui:StatusIndicatorCoreProps",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Component caption."
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui:StatusIndicatorCoreProps",
      "required": true
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'gray'"
       ],
       "tags": {
        "@default": "gray"
       }
      },
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'info' | 'success' | 'warning' | 'cobalt' | 'violet' | 'fuchsia' | 'yellow' | 'orange' | 'purple' | 'cyan' | 'mint' | 'white' | 'critical' | 'neutral' | 'gray'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "info",
        "success",
        "warning",
        "cobalt",
        "violet",
        "fuchsia",
        "yellow",
        "orange",
        "purple",
        "cyan",
        "mint",
        "white",
        "critical",
        "neutral",
        "gray"
       ]
      },
      "from": "@epam/loveship:StatusIndicatorMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:TagProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "TagProps",
     "nameFull": "TagProps"
    },
    "src": "loveship/components/widgets/Tag.tsx",
    "comment": {
     "raw": [
      "Represents the properties of a Tag component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "TagProps",
     "print": [
      "/** Represents the properties of a Tag component. */",
      "type TagProps = uui.TagCoreProps & TagMods;"
     ]
    },
    "props": [
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "tabIndex",
      "name": "tabIndex",
      "comment": {
       "raw": [
        "Controls the order of keyboard navigation between components"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:IHasTabIndex",
      "required": false
     },
     {
      "uid": "isDisabled",
      "name": "isDisabled",
      "comment": {
       "raw": [
        "Disable editing, and visually de-emphasize value of the component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDisableable",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "link",
      "name": "link",
      "comment": {
       "raw": [
        "Link object to redirect to for SPA-redirects"
       ]
      },
      "typeValue": {
       "raw": "Link"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "href",
      "name": "href",
      "comment": {
       "raw": [
        "Href (URL) to redirect to, for non-SPA redirects"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "isLinkActive",
      "name": "isLinkActive",
      "comment": {
       "raw": [
        "Highlights component to show that link is active (browser is displaying the page to which link is pointing)"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "target",
      "name": "target",
      "comment": {
       "raw": [
        "Controls where the link should be opened"
       ]
      },
      "typeValue": {
       "raw": "'_blank'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "_blank"
       ]
      },
      "from": "@epam/uui-core:ICanRedirect",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.AnchorHTMLAttributes<HTMLAnchorElement> & Record<`data-${string}`, string> | React.ButtonHTMLAttributes<HTMLButtonElement> & Record<`data-${string}`, string> | React.HTMLAttributes<HTMLSpanElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "isOpen",
      "name": "isOpen",
      "comment": {
       "raw": [
        "When isDropdown=true, indicate that dropdown is open with chevron icon"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "isDropdown",
      "name": "isDropdown",
      "comment": {
       "raw": [
        "Shows chevron icon, enabling component to act as dropdown toggler"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IDropdownToggler",
      "required": false
     },
     {
      "uid": "icon",
      "name": "icon",
      "comment": {
       "raw": [
        "Icon can be a React element (usually an SVG element)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "iconPosition",
      "name": "iconPosition",
      "comment": {
       "raw": [
        "Position of the icon (left of right)"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right"
       ]
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "onIconClick",
      "name": "onIconClick",
      "comment": {
       "raw": [
        "Click handler for the icon"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IHasIcon",
      "required": false
     },
     {
      "uid": "caption",
      "name": "caption",
      "comment": {
       "raw": [
        "Caption. Can be a string, or React.Element. Certain components supports minimal markup (<b>,<i>,<a>) in captions."
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasCaption",
      "required": false
     },
     {
      "uid": "fill",
      "name": "fill",
      "comment": {
       "raw": [
        "Defines component fill style.",
        " @default 'solid'"
       ],
       "tags": {
        "@default": "solid"
       }
      },
      "typeValue": {
       "raw": "'solid' | 'outline'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "solid",
        "outline"
       ]
      },
      "from": "@epam/uui:TagCoreProps",
      "required": false
     },
     {
      "uid": "onClear",
      "name": "onClear",
      "comment": {
       "raw": [
        "Call to clear toggler value"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui:TagCoreProps",
      "required": false
     },
     {
      "uid": "clearIcon",
      "name": "clearIcon",
      "comment": {
       "raw": [
        "Icon for clear value button (usually cross)"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:TagCoreProps",
      "required": false
     },
     {
      "uid": "dropdownIcon",
      "name": "dropdownIcon",
      "comment": {
       "raw": [
        "Icon for drop-down toggler"
       ]
      },
      "typeValue": {
       "raw": "Icon"
      },
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui:TagCoreProps",
      "required": false
     },
     {
      "uid": "count",
      "name": "count",
      "comment": {
       "raw": [
        "Count value to be placed in component"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui:TagCoreProps",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'night300'"
       ],
       "tags": {
        "@default": "night300"
       }
      },
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'info' | 'success' | 'warning' | 'white' | 'night100' | 'night300' | 'critical' | 'neutral' | 'night700'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "info",
        "success",
        "warning",
        "white",
        "night100",
        "night300",
        "critical",
        "neutral",
        "night700"
       ]
      },
      "from": "@epam/loveship:TagMods",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines component size.",
        " @default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '30' | '42'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48"
       ]
      },
      "from": "@epam/loveship:TagMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:TextProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "TextProps",
     "nameFull": "TextProps"
    },
    "src": "loveship/components/typography/Text.tsx",
    "comment": {
     "raw": [
      "Represents the properties of the Text component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TextProps",
     "print": [
      "/** Represents the properties of the Text component. */",
      "interface TextProps extends uui.TextCoreProps, TextMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "fontWeight",
      "name": "fontWeight",
      "comment": {
       "raw": [
        "Defines text font weight value",
        " @default '400'"
       ],
       "tags": {
        "@default": "400"
       }
      },
      "typeValue": {
       "raw": "'300' | '600' | '900' | '700' | '200' | '400'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "200",
        "300",
        "400",
        "600",
        "700",
        "900"
       ]
      },
      "from": "@epam/uui:TextCoreProps",
      "required": false
     },
     {
      "uid": "fontStyle",
      "name": "fontStyle",
      "comment": {
       "raw": [
        "Determines the style of the text font.",
        " @default 'normal'"
       ],
       "tags": {
        "@default": "normal"
       }
      },
      "typeValue": {
       "raw": "'normal' | 'italic'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "normal",
        "italic"
       ]
      },
      "from": "@epam/uui:TextCoreProps",
      "required": false
     },
     {
      "uid": "size",
      "name": "size",
      "comment": {
       "raw": [
        "Defines text size",
        " @default '36'"
       ],
       "tags": {
        "@default": "36"
       }
      },
      "typeValue": {
       "raw": "'36' | '48' | '18' | '24' | '30' | '42' | 'none'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "18",
        "24",
        "30",
        "36",
        "42",
        "48",
        "none"
       ]
      },
      "from": "@epam/uui:TextCoreProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "Component children"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:IHasChildren",
      "required": false
     },
     {
      "uid": "onClick",
      "name": "onClick",
      "comment": {
       "raw": [
        "Called when component is clicked"
       ]
      },
      "typeValue": {
       "raw": "(e?: any) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IClickable",
      "required": false
     },
     {
      "uid": "clickAnalyticsEvent",
      "name": "clickAnalyticsEvent",
      "comment": {
       "raw": [
        "An analytics event to send (via AnalyticsContext) when component is clicked.",
        " See [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&mode=doc&skin=UUI4_promo&category=contexts)."
       ]
      },
      "typeValue": {
       "raw": "null | { [key: string]: any; name: string; }"
      },
      "from": "@epam/uui-core:IAnalyticableClick",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "forwardedRef",
      "name": "forwardedRef",
      "comment": {
       "raw": [
        "this ref is passed to the underlying component"
       ]
      },
      "typeValue": {
       "raw": "null | (instance: HTMLDivElement | null) => void | React.MutableRefObject<HTMLDivElement | null>"
      },
      "from": "@epam/uui-core:IHasForwardedRef",
      "required": false
     },
     {
      "uid": "lineHeight",
      "name": "lineHeight",
      "comment": {
       "raw": [
        "Defines text line-height"
       ]
      },
      "typeValue": {
       "raw": "'18' | '24' | '30' | '12'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "12",
        "18",
        "24",
        "30"
       ]
      },
      "from": "@epam/uui:TextSettings",
      "required": false
     },
     {
      "uid": "fontSize",
      "name": "fontSize",
      "comment": {
       "raw": [
        "Defines text font-size"
       ]
      },
      "typeValue": {
       "raw": "'18' | '24' | '12' | '10' | '14' | '16'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "10",
        "12",
        "14",
        "16",
        "18",
        "24"
       ]
      },
      "from": "@epam/uui:TextSettings",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'night700'"
       ],
       "tags": {
        "@default": "night700"
       }
      },
      "typeValue": {
       "raw": "'sky' | 'grass' | 'sun' | 'fire' | 'info' | 'success' | 'warning' | 'white' | 'night300' | 'night600' | 'critical' | 'primary' | 'secondary' | 'night50' | 'night500' | 'night700' | 'night400' | 'night800' | 'night900' | 'tertiary' | 'disabled'"
      },
      "typeValueRef": "@epam/loveship:TextColors",
      "editor": {
       "type": "oneOf",
       "options": [
        "sky",
        "grass",
        "sun",
        "fire",
        "info",
        "success",
        "warning",
        "white",
        "night300",
        "night600",
        "critical",
        "primary",
        "secondary",
        "night50",
        "night500",
        "night700",
        "night400",
        "night800",
        "night900",
        "tertiary",
        "disabled"
       ]
      },
      "from": "@epam/loveship:TextMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:TooltipProps": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "TooltipProps",
     "nameFull": "TooltipProps"
    },
    "src": "loveship/components/overlays/Tooltip.tsx",
    "comment": {
     "raw": [
      "Represents the properties of the Tooltip component."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "TooltipProps",
     "print": [
      "/** Represents the properties of the Tooltip component. */",
      "interface TooltipProps extends uui.TooltipCoreProps, TooltipMods {",
      "}"
     ]
    },
    "props": [
     {
      "uid": "content",
      "name": "content",
      "comment": {
       "raw": [
        "Content to show in the tooltip (ReactNode)"
       ]
      },
      "typeValue": {
       "raw": "any"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "renderContent",
      "name": "renderContent",
      "comment": {
       "raw": [
        "Alternative to 'content' prop, you can pass a render function.",
        " The function will only be called when content is shown, this can save performance."
       ]
      },
      "typeValue": {
       "raw": "() => any"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "offset",
      "name": "offset",
      "comment": {
       "raw": [
        "See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/offset/}"
       ]
      },
      "typeValue": {
       "raw": "OffsetsFunction | [number | null | undefined, number | null | undefined]"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "children",
      "name": "children",
      "comment": {
       "raw": [
        "React Node(s) to show tooltip for"
       ]
      },
      "typeValue": {
       "raw": "React.ReactNode"
      },
      "typeValueRef": "@types/react:ReactNode",
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "maxWidth",
      "name": "maxWidth",
      "comment": {
       "raw": [
        "Max width of tooltip"
       ]
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:TooltipCoreProps",
      "required": false
     },
     {
      "uid": "cx",
      "name": "cx",
      "comment": {
       "raw": [
        "CSS class(es) to put on component's root. See {@link https://github.com/JedWatson/classnames#usage} for details"
       ]
      },
      "typeValue": {
       "raw": "null | string | number | boolean | ClassDictionary | ClassArray"
      },
      "typeValueRef": "@epam/uui-core:ClassValue",
      "from": "@epam/uui-core:IHasCX",
      "required": false
     },
     {
      "uid": "rawProps",
      "name": "rawProps",
      "comment": {
       "raw": [
        "Any HTML attributes (native or 'data-') to put on the underlying component"
       ]
      },
      "typeValue": {
       "raw": "React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>"
      },
      "from": "@epam/uui-core:IHasRawProps",
      "required": false
     },
     {
      "uid": "value",
      "name": "value",
      "comment": {
       "raw": [
        "The current value of component"
       ]
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "onValueChange",
      "name": "onValueChange",
      "comment": {
       "raw": [
        "Called when value needs to be changed (usually due to user interaction)"
       ]
      },
      "typeValue": {
       "raw": "(newValue: boolean) => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:IControlled",
      "required": false
     },
     {
      "uid": "onClose",
      "name": "onClose",
      "comment": {
       "raw": [
        "Called when dropdown was closed"
       ]
      },
      "typeValue": {
       "raw": "() => void"
      },
      "editor": {
       "type": "func"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "placement",
      "name": "placement",
      "comment": {
       "raw": [
        "Defines dropdown body placement relative to target"
       ]
      },
      "typeValue": {
       "raw": "'left' | 'right' | 'top' | 'bottom' | 'auto' | 'auto-start' | 'auto-end' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'right-start' | 'right-end' | 'left-start' | 'left-end'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "left",
        "right",
        "top",
        "bottom",
        "auto",
        "auto-start",
        "auto-end",
        "top-start",
        "top-end",
        "bottom-start",
        "bottom-end",
        "right-start",
        "right-end",
        "left-start",
        "left-end"
       ]
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "modifiers",
      "name": "modifiers",
      "comment": {
       "raw": [
        "Original popper.js modifiers. See [Popper docs]{@link https://popper.js.org/docs/v2/modifiers/}"
       ]
      },
      "typeValue": {
       "raw": "(StrictModifier<any> | Partial<Modifier<any, object>>)[]"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "openDelay",
      "name": "openDelay",
      "comment": {
       "raw": [
        "Defines how much 'ms' user should hold mouse over target to open the dropdown",
        " This prop work only with openOnHover={true}",
        " @default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "closeDelay",
      "name": "closeDelay",
      "comment": {
       "raw": [
        "Defines after which delay dropdown will be closed, if user leave mouse from target.",
        " This prop work only with openOnHover={true}",
        " @default 0"
       ],
       "tags": {
        "@default": 0
       }
      },
      "typeValue": {
       "raw": "number"
      },
      "editor": {
       "type": "number"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "closeOnMouseLeave",
      "name": "closeOnMouseLeave",
      "comment": {
       "raw": [
        "Defined when to close dropdown in case of openOnHover={ true }",
        " toggler — dropdown will be closed when a mouse leaves the target component",
        " boundary — will not to close the dropdown when a mouse is on target or in 30px around target area",
        " false — will not close dropdown by mouse move event",
        " @default 'toggler'"
       ],
       "tags": {
        "@default": "toggler"
       }
      },
      "typeValue": {
       "raw": "false | 'toggler' | 'boundary'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        false,
        "toggler",
        "boundary"
       ]
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "portalTarget",
      "name": "portalTarget",
      "comment": {
       "raw": [
        "Node of portal target, where to render the dropdown body.",
        " By default, will be used global portal node."
       ]
      },
      "typeValue": {
       "raw": "HTMLElement"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "boundaryElement",
      "name": "boundaryElement",
      "comment": {
       "raw": [
        "Element relative to which dropdown will calculate position"
       ]
      },
      "typeValue": {
       "raw": "HTMLElement | HTMLElement[] | 'clippingParents'"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "closeBodyOnTogglerHidden",
      "name": "closeBodyOnTogglerHidden",
      "comment": {
       "raw": [
        "Pass false, if you do not want to close the dropdown in case Toggler move out of viewport.",
        " @default true"
       ],
       "tags": {
        "@default": true
       }
      },
      "typeValue": {
       "raw": "boolean"
      },
      "editor": {
       "type": "bool"
      },
      "from": "@epam/uui-core:DropdownProps",
      "required": false
     },
     {
      "uid": "color",
      "name": "color",
      "comment": {
       "raw": [
        "Defines component color.",
        " @default 'gray'"
       ],
       "tags": {
        "@default": "gray"
       }
      },
      "typeValue": {
       "raw": "'fire' | 'white' | 'critical' | 'neutral' | 'gray' | 'inverted'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "fire",
        "white",
        "critical",
        "neutral",
        "gray",
        "inverted"
       ]
      },
      "from": "@epam/loveship:TooltipMods",
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/loveship:AlertMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "AlertMods",
     "nameFull": "AlertMods"
    },
    "src": "loveship/components/overlays/Alert.tsx",
    "exported": false
   }
  },
  "@epam/loveship:BadgeColor": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "BadgeColor",
     "nameFull": "BadgeColor"
    },
    "src": "loveship/components/widgets/Badge.tsx",
    "exported": false
   }
  },
  "@epam/loveship:BadgeMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "BadgeMods",
     "nameFull": "BadgeMods"
    },
    "src": "loveship/components/widgets/Badge.tsx",
    "exported": false
   }
  },
  "@epam/loveship:ButtonColor": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "ButtonColor",
     "nameFull": "ButtonColor"
    },
    "src": "loveship/components/buttons/Button.tsx",
    "comment": {
     "raw": [
      "Defines component color."
     ]
    },
    "exported": false
   }
  },
  "@epam/loveship:ButtonMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "ButtonMods",
     "nameFull": "ButtonMods"
    },
    "src": "loveship/components/buttons/Button.tsx",
    "exported": false
   }
  },
  "@epam/loveship:CountIndicatorMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "CountIndicatorMods",
     "nameFull": "CountIndicatorMods"
    },
    "src": "loveship/components/widgets/CountIndicator.tsx",
    "exported": false
   }
  },
  "@epam/loveship:IconButtonColor": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "IconButtonColor",
     "nameFull": "IconButtonColor"
    },
    "src": "loveship/components/buttons/IconButton.tsx",
    "exported": false
   }
  },
  "@epam/loveship:IconButtonMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "IconButtonMods",
     "nameFull": "IconButtonMods"
    },
    "src": "loveship/components/buttons/IconButton.tsx",
    "exported": false
   }
  },
  "@epam/loveship:LinkButtonColor": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "LinkButtonColor",
     "nameFull": "LinkButtonColor"
    },
    "src": "loveship/components/buttons/LinkButton.tsx",
    "exported": false
   }
  },
  "@epam/loveship:LinkButtonMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "LinkButtonMods",
     "nameFull": "LinkButtonMods"
    },
    "src": "loveship/components/buttons/LinkButton.tsx",
    "exported": false
   }
  },
  "@epam/loveship:ModalWindowMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "ModalWindowMods",
     "nameFull": "ModalWindowMods"
    },
    "src": "loveship/components/overlays/ModalWindow.tsx",
    "exported": false
   }
  },
  "@epam/loveship:MultiSwitchMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "MultiSwitchMods",
     "nameFull": "MultiSwitchMods"
    },
    "src": "loveship/components/inputs/MultiSwitch.tsx",
    "exported": false
   }
  },
  "@epam/loveship:NotificationCardMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "NotificationCardMods",
     "nameFull": "NotificationCardMods"
    },
    "src": "loveship/components/overlays/NotificationCard.tsx",
    "exported": false
   }
  },
  "@epam/loveship:RatingMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "RatingMods",
     "nameFull": "RatingMods"
    },
    "src": "loveship/components/inputs/Rating.tsx",
    "exported": false
   }
  },
  "@epam/loveship:StatusIndicatorMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "StatusIndicatorMods",
     "nameFull": "StatusIndicatorMods"
    },
    "src": "loveship/components/widgets/StatusIndicator.tsx",
    "exported": false
   }
  },
  "@epam/loveship:TagMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "TagMods",
     "nameFull": "TagMods"
    },
    "src": "loveship/components/widgets/Tag.tsx",
    "exported": false
   }
  },
  "@epam/loveship:TextColors": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "TextColors",
     "nameFull": "TextColors"
    },
    "src": "loveship/components/typography/Text.tsx",
    "exported": false
   }
  },
  "@epam/loveship:TextMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "TextMods",
     "nameFull": "TextMods"
    },
    "src": "loveship/components/typography/Text.tsx",
    "exported": false
   }
  },
  "@epam/loveship:TooltipMods": {
   "summary": {
    "module": "@epam/loveship",
    "typeName": {
     "name": "TooltipMods",
     "nameFull": "TooltipMods"
    },
    "src": "loveship/components/overlays/Tooltip.tsx",
    "exported": false
   }
  },
  "@epam/uui-editor:EditorValue": {
   "summary": {
    "module": "@epam/uui-editor",
    "typeName": {
     "name": "EditorValue",
     "nameFull": "EditorValue"
    },
    "src": "uui-editor/src/types.ts",
    "comment": {
     "raw": [
      "null historically added and should also be deprecated to in favor of undefined"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "undefined | null | Value | SlateSchema",
     "print": [
      "/** Slate schema needed to support legacy format which should be deprecated */",
      "/** null historically added and should also be deprecated to in favor of undefined */",
      "type EditorValue = Value | SlateSchema | undefined | null;"
     ]
    }
   }
  },
  "@epam/uui-editor:HeadersConfig": {
   "summary": {
    "module": "@epam/uui-editor",
    "typeName": {
     "name": "HeadersConfig",
     "nameFull": "HeadersConfig"
    },
    "src": "uui-editor/src/plugins/headerPlugin/constants.ts",
    "comment": {
     "raw": [
      "type of headers"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "HeadersConfig",
     "print": [
      "/** type of headers */",
      "type HeadersConfig = {",
      "    /** headers */",
      "    headers?: HeaderType[];",
      "};"
     ]
    },
    "props": [
     {
      "uid": "headers",
      "name": "headers",
      "comment": {
       "raw": [
        "headers"
       ]
      },
      "typeValue": {
       "raw": "('header-1' | 'header-2' | 'header-3' | 'header-4' | 'header-5' | 'header-6')[]"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-editor:HeaderType": {
   "summary": {
    "module": "@epam/uui-editor",
    "typeName": {
     "name": "HeaderType",
     "nameFull": "HeaderType"
    },
    "src": "uui-editor/src/plugins/headerPlugin/constants.ts",
    "comment": {
     "raw": [
      "header type"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "'header-1' | 'header-2' | 'header-3' | 'header-4' | 'header-5' | 'header-6'",
     "print": [
      "/** header type */",
      "type HeaderType = keyof typeof HEADER_TO_TYPE;"
     ]
    }
   }
  },
  "@epam/uui-editor:NodeConfig": {
   "summary": {
    "module": "@epam/uui-editor",
    "typeName": {
     "name": "NodeConfig",
     "nameFull": "NodeConfig"
    },
    "src": "uui-editor/src/plugins/notePlugin/types.ts",
    "comment": {
     "raw": [
      "node config"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "NodeConfig",
     "print": [
      "/** node config */",
      "interface NodeConfig {",
      "    /** notes items */",
      "    notes?: NoteConfigItem[];",
      "}"
     ]
    },
    "props": [
     {
      "uid": "notes",
      "name": "notes",
      "comment": {
       "raw": [
        "notes items"
       ]
      },
      "typeValue": {
       "raw": "NoteConfigItem[]"
      },
      "required": false
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-editor:NoteConfigItem": {
   "summary": {
    "module": "@epam/uui-editor",
    "typeName": {
     "name": "NoteConfigItem",
     "nameFull": "NoteConfigItem"
    },
    "src": "uui-editor/src/plugins/notePlugin/types.ts",
    "comment": {
     "raw": [
      "note entry config"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "NoteConfigItem",
     "print": [
      "/** note entry config */",
      "interface NoteConfigItem extends NoteNodeProps {",
      "    /** type of note */",
      "    type: `note-${string}`;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "type",
      "name": "type",
      "comment": {
       "raw": [
        "type of note"
       ]
      },
      "typeValue": {
       "raw": "`note-${string}`"
      },
      "required": true
     },
     {
      "uid": "borderColor",
      "name": "borderColor",
      "comment": {
       "raw": [
        "border color"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-editor:NoteNodeProps",
      "required": true
     },
     {
      "uid": "backgroundColor",
      "name": "backgroundColor",
      "comment": {
       "raw": [
        "background color"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "from": "@epam/uui-editor:NoteNodeProps",
      "required": true
     },
     {
      "uid": "toolbarIcon",
      "name": "toolbarIcon",
      "comment": {
       "raw": [
        "icon"
       ]
      },
      "typeValue": {
       "raw": "React.FC<{}>"
      },
      "typeValueRef": "@types/react:FC",
      "editor": {
       "type": "component"
      },
      "from": "@epam/uui-editor:NoteNodeProps",
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-editor:NoteNodeProps": {
   "summary": {
    "module": "@epam/uui-editor",
    "typeName": {
     "name": "NoteNodeProps",
     "nameFull": "NoteNodeProps"
    },
    "src": "uui-editor/src/plugins/notePlugin/types.ts",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "NoteNodeProps",
     "print": [
      "interface NoteNodeProps {",
      "    /** border color */",
      "    borderColor: string;",
      "    /** background color */",
      "    backgroundColor: string;",
      "    /** icon */",
      "    toolbarIcon: React.FC;",
      "}"
     ]
    },
    "props": [
     {
      "uid": "borderColor",
      "name": "borderColor",
      "comment": {
       "raw": [
        "border color"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": "backgroundColor",
      "name": "backgroundColor",
      "comment": {
       "raw": [
        "background color"
       ]
      },
      "typeValue": {
       "raw": "string"
      },
      "editor": {
       "type": "string"
      },
      "required": true
     },
     {
      "uid": "toolbarIcon",
      "name": "toolbarIcon",
      "comment": {
       "raw": [
        "icon"
       ]
      },
      "typeValue": {
       "raw": "React.FC<{}>"
      },
      "typeValueRef": "@types/react:FC",
      "editor": {
       "type": "component"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-editor:NotePluginOptions": {
   "summary": {
    "module": "@epam/uui-editor",
    "typeName": {
     "name": "NotePluginOptions",
     "nameFull": "NotePluginOptions"
    },
    "src": "uui-editor/src/plugins/notePlugin/types.ts",
    "comment": {
     "raw": [
      "note plugin options"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "WithBottomButtonPlugin & { notes: NoteConfigItem[]; } | WithFloatingButtonPlugin & { notes: NoteConfigItem[]; } | AnyObject & { notes: NoteConfigItem[]; }",
     "print": [
      "/** note plugin options */",
      "type NotePluginOptions = WithToolbarButton & {",
      "    /** notes list */",
      "    notes: NoteConfigItem[];",
      "};"
     ]
    },
    "props": [
     {
      "uid": "bottomBarButton",
      "name": "bottomBarButton",
      "typeValue": {
       "raw": "React.ComponentType<ToolbarButtonProps>"
      },
      "typeValueRef": "@types/react:ComponentType",
      "from": "@epam/uui-editor:WithBottomButtonPlugin",
      "required": true
     },
     {
      "uid": "notes",
      "name": "notes",
      "comment": {
       "raw": [
        "notes list"
       ]
      },
      "typeValue": {
       "raw": "NoteConfigItem[]"
      },
      "required": true
     },
     {
      "uid": "floatingBarButton",
      "name": "floatingBarButton",
      "typeValue": {
       "raw": "React.ComponentType<ToolbarButtonProps>"
      },
      "typeValueRef": "@types/react:ComponentType",
      "from": "@epam/uui-editor:WithFloatingButtonPlugin",
      "required": true
     }
    ],
    "propsFromUnion": true
   }
  },
  "@epam/uui-editor:PlaceholderPluginParams": {
   "summary": {
    "module": "@epam/uui-editor",
    "typeName": {
     "name": "PlaceholderPluginParams",
     "nameFull": "PlaceholderPluginParams"
    },
    "src": "uui-editor/src/plugins/placeholderPlugin/placeholderPlugin.tsx",
    "exported": true
   },
   "details": {
    "kind": 264,
    "typeValue": {
     "raw": "PlaceholderPluginParams",
     "print": [
      "interface PlaceholderPluginParams {",
      "    /** Placeholder items */",
      "    items: {",
      "        name: string;",
      "        [key: string]: any;",
      "    }[];",
      "}"
     ]
    },
    "props": [
     {
      "uid": "items",
      "name": "items",
      "comment": {
       "raw": [
        "Placeholder items"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: any; name: string; }[]"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-editor:SlateSchema": {
   "summary": {
    "module": "@epam/uui-editor",
    "typeName": {
     "name": "SlateSchema",
     "nameFull": "SlateSchema"
    },
    "src": "uui-editor/src/migrations/types.ts",
    "comment": {
     "raw": [
      "Deprecated Slate content structure"
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "SlateSchema",
     "print": [
      "/**",
      " * Legacy slate schema types",
      " */",
      "/** Deprecated Slate content structure */",
      "type SlateSchema = {",
      "    /** object type */",
      "    object: 'value';",
      "    /** document object */",
      "    document: {",
      "        object: 'document';",
      "        nodes: SlateElement[];",
      "        data?: {",
      "            [key: string]: unknown;",
      "        };",
      "        [key: string]: unknown;",
      "    };",
      "    /** any other key */",
      "    [key: string]: unknown;",
      "};"
     ]
    },
    "props": [
     {
      "uid": "[key: string]",
      "name": "[key: string]",
      "comment": {
       "raw": [
        "any other key"
       ]
      },
      "typeValue": {
       "raw": "unknown"
      },
      "required": true
     },
     {
      "uid": "object",
      "name": "object",
      "comment": {
       "raw": [
        "object type"
       ]
      },
      "typeValue": {
       "raw": "'value'"
      },
      "editor": {
       "type": "oneOf",
       "options": [
        "value"
       ]
      },
      "required": true
     },
     {
      "uid": "document",
      "name": "document",
      "comment": {
       "raw": [
        "document object"
       ]
      },
      "typeValue": {
       "raw": "{ [key: string]: unknown; object: 'document'; nodes: SlateElement[]; data?: { [key: string]: unknown; } | undefined; }"
      },
      "required": true
     }
    ],
    "propsFromUnion": false
   }
  },
  "@epam/uui-editor:WithBottomButtonPlugin": {
   "summary": {
    "module": "@epam/uui-editor",
    "typeName": {
     "name": "WithBottomButtonPlugin",
     "nameFull": "WithBottomButtonPlugin"
    },
    "src": "uui-editor/src/implementation/Toolbars.tsx",
    "exported": false
   }
  },
  "@epam/uui-editor:WithFloatingButtonPlugin": {
   "summary": {
    "module": "@epam/uui-editor",
    "typeName": {
     "name": "WithFloatingButtonPlugin",
     "nameFull": "WithFloatingButtonPlugin"
    },
    "src": "uui-editor/src/implementation/Toolbars.tsx",
    "exported": false
   }
  },
  "node_modules/@udecode/plate-core/dist/index.d.ts:PlatePlugin": {
   "summary": {
    "module": "node_modules/@udecode/plate-core/dist/index.d.ts",
    "typeName": {
     "name": "PlatePlugin",
     "nameFull": "PlatePlugin<P, V, E>"
    },
    "src": "node_modules/@udecode/plate-core/dist/index.d.ts",
    "comment": {
     "raw": [
      "The `PlatePlugin` interface is a base interface for all plugins."
     ]
    },
    "exported": true
   },
   "details": {
    "kind": 265,
    "typeValue": {
     "raw": "PlatePlugin<P, V, E>",
     "print": [
      "/**",
      " * The `PlatePlugin` interface is a base interface for all plugins.",
      " */",
      "type PlatePlugin<P = PluginOptions, V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>> = Required<PlatePluginKey> & {",
      "    editor?: Nullable<{",
      "        /**",
      "         * Properties used by the `insertData` core plugin to deserialize inserted data to a slate fragment.",
      "         * The fragment will be inserted to the editor if not empty.",
      "         */",
      "        insertData?: PlatePluginInsertData<V>;",
      "    }>;",
      "    /**",
      "     * Handlers called whenever the corresponding event occurs in the editor.",
      "     * Event handlers can return a boolean flag to specify whether the event can be treated as being handled.",
      "     * If it returns `true`, the next handlers will not be called.",
      "     */",
      "    handlers?: Nullable<DOMHandlers<P, V, E> & {",
      "        /**",
      "         * @see {@link OnChange}",
      "         */",
      "        onChange?: OnChange<P, V, E>;",
      "    }>;",
      "    /**",
      "     * Inject into Plate.",
      "     */",
      "    inject?: Nullable<{",
      "        /**",
      "         * Property used by Plate to inject a component above other plugins `component`.",
      "         */",
      "        aboveComponent?: InjectComponent<V>;",
      "        /**",
      "         * Property used by Plate to inject a component below other plugins `component`, i.e. above its `children`.",
      "         */",
      "        belowComponent?: InjectComponent<V>;",
      "        /**",
      "         * Property that can be used by a plugin to allow other plugins to inject code.",
      "         * For example, if multiple plugins have defined",
      "         * `inject.editor.insertData.transformData` for `key=KEY_DESERIALIZE_HTML`,",
      "         * `insertData` plugin will call all of these `transformData` for `KEY_DESERIALIZE_HTML` plugin.",
      "         * Differs from `overrideByKey` as this is not overriding any plugin.",
      "         */",
      "        pluginsByKey?: Record<PluginKey, Partial<PlatePlugin<PluginOptions, V, E>>>;",
      "    }>;",
      "    /**",
      "     * Property used by Plate to render nodes of this `type` as elements, i.e. `renderElement`.",
      "     */",
      "    isElement?: boolean;",
      "    /**",
      "     * Property used by `inlineVoid` core plugin to set elements of this `type` as inline.",
      "     */",
      "    isInline?: boolean;",
      "    /**",
      "     * Property used by `isMarkableVoid` core plugin to set void elements of this `type` as markable.",
      "     */",
      "    isMarkableVoid?: boolean;",
      "    /**",
      "     * Property used by Plate to render nodes of this `type` as leaves, i.e. `renderLeaf`.",
      "     */",
      "    isLeaf?: boolean;",
      "    /**",
      "     * Property used by `inlineVoid` core plugin to set elements of this `type` as void.",
      "     */",
      "    isVoid?: boolean;",
      "    /**",
      "     * Property used by Plate to enable/disable the plugin.",
      "     */",
      "    enabled?: boolean;",
      "    /**",
      "     * Extended properties used by any plugin as options.",
      "     */",
      "    options?: P;",
      "    /**",
      "     * Property used by Plate to render a node by type.",
      "     * It requires slate node properties to have a `type` property.",
      "     * @default key",
      "     */",
      "    type?: string;",
      "} & InjectProps<V> & Nullable<{",
      "    /**",
      "     * React component rendering a slate element or leaf.",
      "     * @default DefaultElement | DefaultLeaf",
      "     */",
      "    component?: PlatePluginComponent;",
      "    /**",
      "     * @see {@link Decorate}",
      "     */",
      "    decorate?: Decorate<P, V, E>;",
      "    /**",
      "     * Properties used by the HTML deserializer core plugin for each HTML element.",
      "     */",
      "    deserializeHtml?: Nullable<DeserializeHtml>;",
      "    /**",
      "     * Normalize initial value before passing it into the editor.",
      "     * @return normalized value",
      "     */",
      "    normalizeInitialValue?: (initialValue: V) => V;",
      "    /**",
      "     * Property used by Plate to deeply override plugins by key.",
      "     */",
      "    overrideByKey?: Record<PluginKey, Partial<PlatePlugin<PluginOptions, V, E>>>;",
      "    /**",
      "     * Recursive plugin support to allow having multiple plugins in a single plugin.",
      "     * Plate eventually flattens all the plugins into the editor.",
      "     */",
      "    plugins?: PlatePlugin<PluginOptions, V, E>[];",
      "    /**",
      "     * Property used by Plate to override node `component` props.",
      "     * If function, its returning value will be shallow merged to the old props, with the old props as parameter.",
      "     * If object, its value will be shallow merged to the old props.",
      "     */",
      "    props?: PlatePluginProps<V>;",
      "    /**",
      "     * Render a component above `Editable`.",
      "     */",
      "    renderAboveEditable?: React__default.FC<{",
      "        children: React__default.ReactNode;",
      "    }>;",
      "    /**",
      "     * Render a component above `Slate`.",
      "     */",
      "    renderAboveSlate?: React__default.FC<{",
      "        children: React__default.ReactNode;",
      "    }>;",
      "    /**",
      "     * Render a component after `Editable`.",
      "     */",
      "    renderAfterEditable?: RenderAfterEditable;",
      "    /**",
      "     * Render a component before `Editable`.",
      "     */",
      "    renderBeforeEditable?: RenderAfterEditable;",
      "    /**",
      "     * Property used by `serializeHtml` util to replace `renderElement` and `renderLeaf` when serializing a node of this `type`.",
      "     */",
      "    serializeHtml?: SerializeHtml<V>;",
      "    /**",
      "     * Recursive plugin merging.",
      "     * Can be used to derive plugin fields from `editor` and `plugin`.",
      "     * The returned value will be deeply merged to the plugin.",
      "     */",
      "    then?: (editor: E, plugin: WithPlatePlugin<P, V, E>) => Partial<PlatePlugin<PluginOptions, V, E>> | undefined | void;",
      "    /**",
      "     * For internal use. Tracks if then has been replaced for recursive calls.",
      "     */",
      "    _thenReplaced?: number;",
      "    /**",
      "     * Hook called when the editor is initialized.",
      "     */",
      "    useHooks?: (editor: E, plugin: WithPlatePlugin<P, V, E>) => void;",
      "    /**",
      "     * Editor method overriders.",
      "     */",
      "    withOverrides?: WithOverride<P, V, E>;",
      "}>;"
     ]
    }
   }
  },
  "@types/react:AllHTMLAttributes": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "AllHTMLAttributes",
     "nameFull": "AllHTMLAttributes<T>"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:AriaAttributes": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "AriaAttributes",
     "nameFull": "AriaAttributes"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:Attributes": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "Attributes",
     "nameFull": "Attributes"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "comment": {
     "raw": [
      "@internal You shouldn't need to use this type since you never see these attributes",
      " inside your component or have to validate them."
     ]
    },
    "exported": false
   }
  },
  "@types/react:ClassAttributes": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "ClassAttributes",
     "nameFull": "ClassAttributes<T>"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:Component": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "Component",
     "nameFull": "Component<P, S, SS>"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:ComponentLifecycle": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "ComponentLifecycle",
     "nameFull": "ComponentLifecycle<P, S, SS>"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:ComponentType": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "ComponentType",
     "nameFull": "ComponentType<P>"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:DeprecatedLifecycle": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "DeprecatedLifecycle",
     "nameFull": "DeprecatedLifecycle<P, S>"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:Dispatch": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "Dispatch",
     "nameFull": "Dispatch<A>"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:DOMAttributes": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "DOMAttributes",
     "nameFull": "DOMAttributes<T>"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:FC": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "FC",
     "nameFull": "FC<P>"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:HTMLAttributes": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "HTMLAttributes",
     "nameFull": "HTMLAttributes<T>"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:InputHTMLAttributes": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "InputHTMLAttributes",
     "nameFull": "InputHTMLAttributes<T>"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:NewLifecycle": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "NewLifecycle",
     "nameFull": "NewLifecycle<P, S, SS>"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:PropsWithChildren": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "PropsWithChildren",
     "nameFull": "PropsWithChildren<P>"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "@types/react:ReactNode": {
   "summary": {
    "module": "@types/react",
    "typeName": {
     "name": "ReactNode",
     "nameFull": "ReactNode"
    },
    "src": "node_modules/@types/react/index.d.ts",
    "exported": false
   }
  },
  "node_modules/react-custom-scrollbars-2/index.d.ts:positionValues": {
   "summary": {
    "module": "node_modules/react-custom-scrollbars-2/index.d.ts",
    "typeName": {
     "name": "positionValues",
     "nameFull": "positionValues"
    },
    "src": "node_modules/react-custom-scrollbars-2/index.d.ts",
    "exported": false
   }
  },
  "node_modules/react-custom-scrollbars-2/index.d.ts:ScrollbarProps": {
   "summary": {
    "module": "node_modules/react-custom-scrollbars-2/index.d.ts",
    "typeName": {
     "name": "ScrollbarProps",
     "nameFull": "ScrollbarProps"
    },
    "src": "node_modules/react-custom-scrollbars-2/index.d.ts",
    "exported": false
   }
  },
  "node_modules/react-custom-scrollbars-2/index.d.ts:Scrollbars": {
   "summary": {
    "module": "node_modules/react-custom-scrollbars-2/index.d.ts",
    "typeName": {
     "name": "Scrollbars",
     "nameFull": "Scrollbars"
    },
    "src": "node_modules/react-custom-scrollbars-2/index.d.ts",
    "exported": false
   }
  },
  "node_modules/react-focus-lock/interfaces.d.ts:ReactFocusLockProps": {
   "summary": {
    "module": "node_modules/react-focus-lock/interfaces.d.ts",
    "typeName": {
     "name": "ReactFocusLockProps",
     "nameFull": "ReactFocusLockProps<ChildrenType, LockProps>"
    },
    "src": "node_modules/react-focus-lock/interfaces.d.ts",
    "exported": false
   }
  },
  "node_modules/typescript/lib/lib.dom.d.ts:Animatable": {
   "summary": {
    "module": "node_modules/typescript/lib/lib.dom.d.ts",
    "typeName": {
     "name": "Animatable",
     "nameFull": "Animatable"
    },
    "src": "node_modules/typescript/lib/lib.dom.d.ts",
    "exported": false
   }
  },
  "node_modules/typescript/lib/lib.dom.d.ts:ARIAMixin": {
   "summary": {
    "module": "node_modules/typescript/lib/lib.dom.d.ts",
    "typeName": {
     "name": "ARIAMixin",
     "nameFull": "ARIAMixin"
    },
    "src": "node_modules/typescript/lib/lib.dom.d.ts",
    "exported": false
   }
  },
  "node_modules/typescript/lib/lib.dom.d.ts:Blob": {
   "summary": {
    "module": "node_modules/typescript/lib/lib.dom.d.ts",
    "typeName": {
     "name": "Blob",
     "nameFull": "Blob"
    },
    "src": "node_modules/typescript/lib/lib.dom.d.ts",
    "exported": false
   }
  },
  "node_modules/typescript/lib/lib.dom.d.ts:ChildNode": {
   "summary": {
    "module": "node_modules/typescript/lib/lib.dom.d.ts",
    "typeName": {
     "name": "ChildNode",
     "nameFull": "ChildNode"
    },
    "src": "node_modules/typescript/lib/lib.dom.d.ts",
    "exported": false
   }
  },
  "node_modules/typescript/lib/lib.dom.d.ts:Element": {
   "summary": {
    "module": "node_modules/typescript/lib/lib.dom.d.ts",
    "typeName": {
     "name": "Element",
     "nameFull": "Element"
    },
    "src": "node_modules/typescript/lib/lib.dom.d.ts",
    "comment": {
     "raw": [
      "Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.",
      "",
      " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element)"
     ]
    },
    "exported": false
   }
  },
  "node_modules/typescript/lib/lib.dom.d.ts:ElementContentEditable": {
   "summary": {
    "module": "node_modules/typescript/lib/lib.dom.d.ts",
    "typeName": {
     "name": "ElementContentEditable",
     "nameFull": "ElementContentEditable"
    },
    "src": "node_modules/typescript/lib/lib.dom.d.ts",
    "exported": false
   }
  },
  "node_modules/typescript/lib/lib.dom.d.ts:ElementCSSInlineStyle": {
   "summary": {
    "module": "node_modules/typescript/lib/lib.dom.d.ts",
    "typeName": {
     "name": "ElementCSSInlineStyle",
     "nameFull": "ElementCSSInlineStyle"
    },
    "src": "node_modules/typescript/lib/lib.dom.d.ts",
    "exported": false
   }
  },
  "node_modules/typescript/lib/lib.dom.d.ts:EventTarget": {
   "summary": {
    "module": "node_modules/typescript/lib/lib.dom.d.ts",
    "typeName": {
     "name": "EventTarget",
     "nameFull": "EventTarget"
    },
    "src": "node_modules/typescript/lib/lib.dom.d.ts",
    "comment": {
     "raw": [
      "EventTarget is a DOM interface implemented by objects that can receive events and may have listeners for them.",
      "",
      " [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget)"
     ]
    },
    "exported": false
   }
  },
  "node_modules/typescript/lib/lib.dom.d.ts:File": {
   "summary": {
    "module": "node_modules/typescript/lib/lib.dom.d.ts",
    "typeName": {
     "name": "File",
     "nameFull": "File"
    },
    "src": "node_modules/typescript/lib/lib.dom.d.ts",
    "comment": {
     "raw": [
      "Provides information about files and allows JavaScript in a web page to access their content.",
      "",
      " [MDN Reference](https://developer.mozilla.org/docs/Web/API/File)"
     ]
    },
    "exported": false
   }
  },
  "node_modules/typescript/lib/lib.dom.d.ts:GlobalEventHandlers": {
   "summary": {
    "module": "node_modules/typescript/lib/lib.dom.d.ts",
    "typeName": {
     "name": "GlobalEventHandlers",
     "nameFull": "GlobalEventHandlers"
    },
    "src": "node_modules/typescript/lib/lib.dom.d.ts",
    "exported": false
   }
  },
  "node_modules/typescript/lib/lib.dom.d.ts:HTMLElement": {
   "summary": {
    "module": "node_modules/typescript/lib/lib.dom.d.ts",
    "typeName": {
     "name": "HTMLElement",
     "nameFull": "HTMLElement"
    },
    "src": "node_modules/typescript/lib/lib.dom.d.ts",
    "comment": {
     "raw": [
      "Any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.",
      "",
      " [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement)"
     ]
    },
    "exported": false
   }
  },
  "node_modules/typescript/lib/lib.dom.d.ts:HTMLOrSVGElement": {
   "summary": {
    "module": "node_modules/typescript/lib/lib.dom.d.ts",
    "typeName": {
     "name": "HTMLOrSVGElement",
     "nameFull": "HTMLOrSVGElement"
    },
    "src": "node_modules/typescript/lib/lib.dom.d.ts",
    "exported": false
   }
  },
  "node_modules/typescript/lib/lib.dom.d.ts:InnerHTML": {
   "summary": {
    "module": "node_modules/typescript/lib/lib.dom.d.ts",
    "typeName": {
     "name": "InnerHTML",
     "nameFull": "InnerHTML"
    },
    "src": "node_modules/typescript/lib/lib.dom.d.ts",
    "exported": false
   }
  },
  "node_modules/typescript/lib/lib.dom.d.ts:Node": {
   "summary": {
    "module": "node_modules/typescript/lib/lib.dom.d.ts",
    "typeName": {
     "name": "Node",
     "nameFull": "Node"
    },
    "src": "node_modules/typescript/lib/lib.dom.d.ts",
    "comment": {
     "raw": [
      "Node is an interface from which a number of DOM API object types inherit. It allows those types to be treated similarly; for example, inheriting the same set of methods, or being tested in the same way.",
      "",
      " [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node)"
     ]
    },
    "exported": false
   }
  },
  "node_modules/typescript/lib/lib.dom.d.ts:NonDocumentTypeChildNode": {
   "summary": {
    "module": "node_modules/typescript/lib/lib.dom.d.ts",
    "typeName": {
     "name": "NonDocumentTypeChildNode",
     "nameFull": "NonDocumentTypeChildNode"
    },
    "src": "node_modules/typescript/lib/lib.dom.d.ts",
    "exported": false
   }
  },
  "node_modules/typescript/lib/lib.dom.d.ts:OnErrorEventHandler": {
   "summary": {
    "module": "node_modules/typescript/lib/lib.dom.d.ts",
    "typeName": {
     "name": "OnErrorEventHandler",
     "nameFull": "OnErrorEventHandler"
    },
    "src": "node_modules/typescript/lib/lib.dom.d.ts",
    "exported": false
   }
  },
  "node_modules/typescript/lib/lib.dom.d.ts:ParentNode": {
   "summary": {
    "module": "node_modules/typescript/lib/lib.dom.d.ts",
    "typeName": {
     "name": "ParentNode",
     "nameFull": "ParentNode"
    },
    "src": "node_modules/typescript/lib/lib.dom.d.ts",
    "exported": false
   }
  },
  "node_modules/typescript/lib/lib.dom.d.ts:Slottable": {
   "summary": {
    "module": "node_modules/typescript/lib/lib.dom.d.ts",
    "typeName": {
     "name": "Slottable",
     "nameFull": "Slottable"
    },
    "src": "node_modules/typescript/lib/lib.dom.d.ts",
    "exported": false
   }
  },
  "node_modules/typescript/lib/lib.es5.d.ts:Readonly": {
   "summary": {
    "module": "node_modules/typescript/lib/lib.es5.d.ts",
    "typeName": {
     "name": "Readonly",
     "nameFull": "Readonly<T>"
    },
    "src": "node_modules/typescript/lib/lib.es5.d.ts",
    "exported": false
   }
  }
 }
}